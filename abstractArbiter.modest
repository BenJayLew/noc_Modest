
// no contention = 0, contention1 = 1, contention2 = 2

datatype buffer = {int(0..2) val, int(0..3) id, bool serviced, int(0..3) priority};
int unserviced;		//Number of unserviced buffers, iterates down when unserviced buffer's priority is set
int totalUnserviced;	//Total number of unserviced buffers in a clock cycle
int totalServiced = 0;
int optimalRuns = 0;
const int clkLower = 100; 
const int clkUpper = 125;
int(clkLower..clkUpper) clk;

buffer north, east, south, west;

buffer[] a; 	//Array of the four buffers. a[0] is the highest priority
buffer[] temp;		//Temporary buffer used to update buffer a

action tick;

// ------ Begin: properties ---------
property Pr1 = Pmax(<> (clk >= clkUpper));

property TotalServiced = Pmax(<> (totalServiced >= ((clkUpper-clkLower)*3)));		//Probablility that the arbiter servieces at least 15 buffers out of a possible 20. probablity the arbiter is at least 75% efficient

property Runs1 = Pmax(<> (optimalRuns == 1));		//Probablility that there was at least 1 cycle where all buffers were serviced
property Runs2 = Pmax(<> (optimalRuns == 2));		//Probablility that there was at least 2 cycles where all buffers were serviced
property Runs3 = Pmax(<> (optimalRuns == 3));		//Probablility that there was at least 3 cycles where all buffers were serviced
property Runs4 = Pmax(<> (optimalRuns == 4));		//Probablility that there was at least 4 cycles where all buffers were serviced
property Runs5 = Pmax(<> (optimalRuns == 5));		//Probablility that there was at least 5 cycles where all buffers were serviced
// ------ End: properties ---------

process Clock()
{	
	tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	}   
	
}


//Main process for the arbiter -------------------------------------------------------------------------------------------------------------------------------------------------
process Arbiter(){
	initialize();
	
	//runtime loop
	do {
		//Service buffers-------------------------------------------------------------------------------------------------------
		
		//Buffer priority 0
		//<Service Buffer a[0]>--------------------------------------------------------
		{= 
		a[0].serviced = true 
		=};
		
		//<Service buffer <a[1]> ------------------------------------------------------
		if(a[1].val != 0 && a[1].val == a[0].val) {			//If buffer a[1] conflicts with a[0]
			{= 
			a[1].serviced = false,
			unserviced++ 		//Increment unserviced
			=}
		}
		else {
			{= 		//Service Buffer
			a[1].serviced = true 
			=}
		};
		
		//<Service buffer a[2]> --------------------------------------------------------
		//If buffer a[2] conflicts with a[1] or a[0]
		if(a[2].val != 0 && (a[2].val == a[1].val || a[2].val == a[0].val)){	
			{= 
			a[2].serviced = false, 
			unserviced++			//Increment unserviced
			=}
		}
		else {
			{= 	//Service Buffer
			a[2].serviced = true 
			=}
		};
		
		//<Service buffer a[3]> ---------------------------------------------------------
		//If buffer a[3] conflicts with a[2], a[1], or a[0]
		if(a[3].val != 0 && (a[3].val == a[2].val || a[3].val == a[1].val || a[3].val == a[0].val)){	
			{= 
			a[3].serviced = false,
			unserviced++ 			//Increment unserviced
			=}
		}
		else {
			{= 		//Service Buffer
			a[3].serviced = true 
			=}
		};
		
		//Increment optimal runs if there were no conflitcs -------------------------------------------------------------------
		if (unserviced == 0){
			{= 
			optimalRuns++,
			totalUnserviced = unserviced,
			totalServiced = totalServiced + 4 - unserviced 
			=}
		}
		else {
			{= 
			totalUnserviced = unserviced,
			totalServiced = totalServiced + 4 - unserviced
			=}
		};
		
		//Set priority values for the next run and update the value of the buffers----------------------------------------------
		setPriority(0);
		setPriority(1);
		setPriority(2);
		setPriority(3);
		
		if(totalUnserviced == 2 && a[0].val == 1 && a[1].val == 1){
			palt{
				:0.444444444444444: {= a[0].val = 1, a[1].val = 1, a[2].val = 0, a[3].val = 0 =}
				:0.407407407407407: {= a[0].val = 1, a[1].val = 1, a[2].val = 1, a[3].val = 0 =}
				:0.148148148148149: {= a[0].val = 1, a[1].val = 1, a[2].val = 2, a[3].val = 2 =}
			}
		}
		else {
			palt{
				:0.111111111111111: {= a[0].val = 0, a[1].val = 0, a[2].val = 0, a[3].val = 0 =}
				:0.592592592592592: {= a[0].val = 1, a[1].val = 1, a[2].val = 0, a[3].val = 0 =}
				:0.172839506172841: {= a[0].val = 1, a[1].val = 1, a[2].val = 1, a[3].val = 0 =}
				:0.123456790123456: {= a[0].val = 1, a[1].val = 1, a[2].val = 2, a[3].val = 2 =}
			}
		};
		
		
		//Rewrite buffer array with new priority values-------------------------------------------------------------------------
		{= 
		temp[a[0].priority] = a[0],
		temp[a[1].priority] = a[1],
		temp[a[2].priority] = a[2],
		temp[a[3].priority] = a[3] 
		=};
		
		tick {= a = temp =};
		
		
		if (clk >= clkUpper) {
			stop
		}
		else {
			tau
		}
		
		
	}
}

//initialize values -------------------------------------------------------------------------------------------------------------------------------------------------------------
process initialize(){
	{= 
	a = [north, east, south, west],
	temp = [north, east, south, west], 
	
	a[0].id = 0, 
	a[1].id = 1, 
	a[2].id = 2, 
	a[3].id = 3,  
	
	unserviced = 0
	=};
	
	palt{
		:0.111111111111111: {= a[0].val = 0, a[1].val = 0, a[2].val = 0, a[3].val = 0 =}
		:0.592592592592592: {= a[0].val = 1, a[1].val = 1, a[2].val = 0, a[3].val = 0 =}
		:0.172839506172841: {= a[0].val = 1, a[1].val = 1, a[2].val = 1, a[3].val = 0 =}
		:0.123456790123456: {= a[0].val = 1, a[1].val = 1, a[2].val = 2, a[3].val = 2 =}
	}

	
}

//Sets the new priority value of buffer a[i] and updates the value if the buffer was serviced ------------------------------------------------------------------------------------
process setPriority(int i){
	if (a[i].serviced == true){
		{= 
		//a[i].val = DiscreteUniform(0, 2),	//Update value	
		a[i].priority = i + unserviced 						//Set new priority
		=}
		//<update buffer value and dequeue buffer>
	}
	else {
		{= 
		a[i].priority = totalUnserviced - unserviced,		//Set new priority
		unserviced-- 						//decrement unserviced
		=}
	}
}


par{
::	Clock()
::	Arbiter()
}