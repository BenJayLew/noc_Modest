option "dtmc";

const int N = 4;
const int clkLower = 100; // Lower bound for clock cycles
const int clkUpper = 105; // Upper bound for clock cycles

action tick, tock, tack;

int(clkLower..clkUpper) clk;
int v;
datatype intlist = { int hd, intlist option tl };
intlist option buff = none;


// ------ Begin: function definitions ------- 
// Calculate length of list:
function int len(intlist option ls) = if ls == none then 0 else 1 + len(ls!.tl); // "!" accesses the value of a non-empty option (causes an error if the option is empty)

// Return the front of the queue, i.e., the last element of the given integer list. No changes are made to the list.
function int peekFront(intlist option ls) =
	 if ls == none then -1
	 else if ls!.tl == none then ls!.hd
	      else peekFront(ls!.tl);

//Remove the front of the queue, i.e., the last element of the given integer list. Return the modified list. 
function intlist option dequeue(intlist option ls) = 
	if ls == none then none
	else if	ls!.tl == none then none 
		 else some(intlist { hd: ls!.hd, tl: dequeue(ls!.tl) });	

//Insert a new entry n as the head of the list ls. If ls has already reached its capacity before adding n, return ls; otherwise, return modified ls with n as its head. 
function intlist option enqueue(int n, intlist option ls) = 
	if len(ls) == N then ls
	else some(intlist { hd: n, tl: ls });		 

//recursive and wrapper functions that return the value at a specific position in the list, if the position given is outside of the list or any other error, returns -1
function int valueAtRecursive(intlist option ls, int pos, int i) = 
	if ls == none then -1
	else if i == pos then ls!.hd 
		else valueAtRecursive(ls!.tl, pos, i + 1);

function int valueAt(intlist option ls, int pos) = 
	if ls == none then -1
	else if pos > len(ls) then -1 
		else valueAtRecursive(ls, pos, 0);
		  
// Create a list of numbers n to m:
function intlist option ntom(int n, int m) = if n > m then none else some(intlist { hd: n, tl: ntom(n + 1, m) });
// ------ End: function definitions ------- 


// ------ Begin: properties ---------
property Pr1 = Pmax(<> (clk>=((clkUpper-clkLower)/2) && peekFront(buff)>2));
// ------ End: properties ---------

process Clock()
{
	tick; {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	}   
}

//Adds a new random value between 8 and 11 to the buffer
process addBuffer()
{  
  if (buff == none){
    tick;{= buff = enqueue(DiscreteUniform(2, 11), buff) =}
	
	/*
	;tick;{= buff = enqueue(DiscreteUniform(2, 11), buff) =};
	tick;{= buff = enqueue(DiscreteUniform(2, 11), buff) =};
	tick;{= v = peekFront(buff) =};
	{= buff = dequeue(buff) =};
	tick;{= v = peekFront(buff) =};
	{= buff = dequeue(buff) =};
    tick;{= buff = enqueue(DiscreteUniform(2, 11), buff) =};
	tick;{= v = peekFront(buff) =};
	{= buff = dequeue(buff) =}
	*/
  }
  else {
	tick;{= buff = enqueue(DiscreteUniform(2, 11), buff) =}
  }    
}

//assigns the tail of the buffer to v and removes the tail of the buffer
process getBuffer()
{
	tick;{= v = peekFront(buff) =};
	{= buff = dequeue(buff) =}
}


process initialize()
{
  tick;
  {= buff = enqueue(DiscreteUniform(1, 4), buff) =};
  {= buff = enqueue(DiscreteUniform(1, 4), buff) =};
  {= buff = enqueue(DiscreteUniform(1, 4), buff) =};
  {= buff = enqueue(DiscreteUniform(1, 4), buff) =}
}

process shift1()
{
  initialize();
  do
  {
  	tick;
	//{= v = peekFront(buff) =};
	{= buff = dequeue(buff) =};
	//{= buff = enqueue(DiscreteUniform(1, 4), buff) =};
	{= buff = enqueue((int) floor(min(LogNormal(1, 4), 3.68)), buff) =};
	when (clk > clkUpper) stop
  }
}

process shift2()
{
  initialize();
  do
  {
  	tick palt {
	// no incoming packet for the buffer	
	:0.2: tick palt{
	      :1: tau // no consumption of packet
	      :1: {= buff = dequeue(buff) =} // Dequeue the front packet
	      }
	// one incoming packet for the buffer	      
	:0.8: tick palt{
	      // Dequeue the front first, and then enque the incoming packet
	      :1: {= buff = dequeue(buff) =};
		  {= buff = enqueue((int) floor(min(LogNormal(1, 4), 3.68)), buff) =}
	      // Does not dequeue, only enqueue if the queue is not full.
              :1: {= buff = enqueue((int) floor(min(LogNormal(1, 4), 3.68)), buff) =}
	      }
	};
	when (clk > clkUpper) stop
  }
}

par
{
::	Clock()
//::	shift2()
::	shift1()
}