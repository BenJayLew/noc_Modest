/****************************************************************************************************************************
 * This is a modularized version of the concrete model for NoC model verification.
 *
 * Current NoC router IDs
 *	0 - 1
 *	|   |
 *	2 - 3
 *
 * In order to add routers to the NoC visit all coments labled with #MODULARIZE
 *
 * Editors: Jonah Boe
 * Date: Dec 16, 2021
 * Designed using: The Modest Toolset (www.modestchecker.net), version v3.1.182-g3d5d3ecdf.
 ***************************************************************************************************************************/

 option "dtmc";



 // --------------------------------------------------- Top level varables ---------------------------------------------------
 
 // #MODULARIZE by setting NOC_MAX_ID to 1 less than the total number of routers and allocating spaces for more routers
 const int NOC_MAX_ID = 3;
 router[] noc = [router {}, router {}, router {}, router {}];
 
 // #MODULARIZE this value changes the buffer length of all buffers.
 const int BUFFER_LENGTH = 4;
 
 // #MODULARIZE these values change the frequency with witch flits are injected.
 const int INJECTION_RATE_NUMERATOR = 3;
 const int INJECTION_RATE_DENOMINATOR = 10;
 
 // #MODULARIZE this is the upper bound of cycles run before quiting
 const int CLK_UPPER = 20;
 int clk = 0;
 
 // #MODULARIZE this is the upper threshoold for noise detected in the system
 const int RESISTIVE_NOISE_THRESH = 5;
 const int INDUCTIVE_NOISE_THRESH = 1;
 
 // These are for tracking resistive and inductive noise and must be initialized to 0.
 int resistiveNoise = 0;
 int inductiveNoise = 0;
 
 // These values are enumerations and are NOT to be changed
 const int NORTH = 0;
 const int WEST = 1;
 const int EAST = 2;
 const int SOUTH = 3;
 const int LOCAL = 4;
 
 
 
 // ------------------------------------------------------- Datatypes --------------------------------------------------------
 
 datatype buffer = {
	 int(0..NOC_MAX_ID) hd,
	 buffer option tl
 };
 
 datatype channel = {
	 buffer option buffer,
	 bool serviced,
	 bool isEmpty
 };
 
 datatype router = {
	 channel[] channels,
	 int(-1..NOC_MAX_ID)[] ids,
	 int(0..4)[] priority_list,
	 int(0..4)[] priority_list_temp,
	 int(0..4) serviced_index,
	 int(0..4) unserviced_index,
	 int(0..5) total_unserviced,
	 bool[] used,
	 bool wasResistive,
	 bool isResistive,
	 bool wasInductive,
	 bool isInductive
 };
 
 
 
 // ------------------------------------------------------- Properties -------------------------------------------------------
 
 property resistiveNoiseProbability = Pmax(<> (resistiveNoise >= RESISTIVE_NOISE_THRESH));
 //property inductiveNoiseProbability = Pmax(<> (inductiveNoise >= INDUCTIVE_NOISE_THRESH));
 
 
 
 // -------------------------------------------------------- Actions ---------------------------------------------------------
 
 // For keeping parallel processes synced
 action tick;
 action tack;
 action tock;
 
 
 
 // ------------------------------------------------------- Functions --------------------------------------------------------
 
 // Calculate length of list
 function int len(buffer option ls) = if ls == none then 0 else 1 + len(ls!.tl);
 
 // Get the mirror direction
 function int getDestinationChannel(int dir) =
	 if dir == NORTH then SOUTH
	 else if dir == WEST then EAST
	 else if dir == EAST then WEST
	 else if dir == SOUTH then NORTH
	 else -1;
 
 // Determine if the flits destination is in the same column as the current router
 function int getColumnShift(int id, int dst) =
	 (dst % ((int)sqrt(NOC_MAX_ID + 1))) - (id % ((int)sqrt(NOC_MAX_ID + 1)));
 
 // Tell if the buffer is full
 function bool isBufferFull(int id, int dir) = len(noc[id].channels[dir].buffer) >= BUFFER_LENGTH;
 
 // Return the front of the queue
 function int peekFront(buffer option ls) =
	 if ls == none then -1
	 else if ls!.tl == none then ls!.hd
	 else peekFront(ls!.tl);
 
 // Add a flit to the buffer
 function buffer option enqueue(int n, buffer option ls) =
	 if len(ls) == BUFFER_LENGTH then ls
	 else some(buffer {
		 hd: n,
		 tl: ls
	 });
 
 // Remove a flit from the buffer
 function buffer option dequeue(buffer option ls) =
	 if ls == none then none
	 else if ls!.tl == none then none
	 else some(buffer {
		 hd: ls!.hd,
		 tl: dequeue(ls!.tl)
	 });
 
 
 
 // ------------------------------------------------------- Processes --------------------------------------------------------
 
 process GenerateFlits(int id){
	 int(0..NOC_MAX_ID) destination;
	 if((clk % INJECTION_RATE_DENOMINATOR) < INJECTION_RATE_NUMERATOR){
		 // Determine a destiantion
		 palt{
			 // #MODULARIZE by adding a probability for (NOC_MAX_ID - 1) destinations.
			 :(1/3): {= destination = 0 =}
			 :(1/3): {= destination = 1 =}
			 :(1/3): {= destination = 2 =}
		 };
 
		 // Make sure it is not this router and add it to the local buffer.
		 if(destination == id){
			 {=
				 noc[id].channels[LOCAL].buffer = enqueue(destination + 1, noc[id].channels[LOCAL].buffer)
			 =}
		 }
		 else{
			 {=
				 noc[id].channels[LOCAL].buffer = enqueue(destination, noc[id].channels[LOCAL].buffer)
			 =}
		 }
	 }
	 else {
		 tau
	 }
 }
 
 // Process for behavior
 process RouterBehavior(int id, int id_north, int id_west, int id_east, int id_south){
	 // Initialize the router
	 {=
		 noc[id] = router {
			 channels: [
				 channel {serviced: false, isEmpty: false},
				 channel {serviced: false, isEmpty: false},
				 channel {serviced: false, isEmpty: false},
				 channel {serviced: false, isEmpty: false},
				 channel {serviced: false, isEmpty: false}],
			 ids: [id_north, id_west, id_east, id_south],
			 priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
			 total_unserviced: 0,
			 used: [false, false, false, false],
			 wasResistive: false,
			 wasInductive: false,
			 // These start true every cycle until proven false
			 isResistive: true,
			 isInductive: true
		 }
	 =};
 
	 // Run
	 do{
		 tick;
		 // Generate new flits
		 GenerateFlits(id);
 
		 tack;
 
		 tock;
 
		 if(clk > CLK_UPPER){
			 stop
		 }
		 else{
			 tau
		 }
	 }
 }
 
 // For syncing parallell processes
 process Clock(){
	 tick
	 {=
		 clk++
	 =};
	 if (clk <= CLK_UPPER) {
		 Clock()
	 }
	 else {
		 stop
	 }
 }
 
 
 
 // ------------------------------------------------------- Execution --------------------------------------------------------
 
 // These processes are run concurrently and kept in sync by tick and tock.
 par{
	 ::	Clock()
	 // #MODULARIZE by adding new arbiter processes for any additional routers.
	 //	0 - 1
	 //	|   |
	 //	2 - 3
	 :: RouterBehavior(0, -1, -1,  1,  2)
	 :: RouterBehavior(1, -1,  0, -1,  3)
	 :: RouterBehavior(2,  0, -1,  3, -1)
	 :: RouterBehavior(3,  1,  2, -1, -1)
 }
 