/*
 * This is a test for the prioritizing of flits that arive at one router and are headed in the same direction. A flit will be
 *	placed on router 0 with the destination of router 4. Another flit will be placed on router 2 with the destination of
 *	router 7. These two flits will conflict at router 1. and one will be prioritized.
 *
 * NoC router ID map:
 *	0 - 1 - 2
 *	|   |   |
 *	3 - 4 - 5
 * |   |   |
 * 6 - 7 - 8
 *
 * Editors: Jonah Boe
 * Date: Jul 08, 2021
 */

option "dtmc";



// ------------------------------------------------------- Datatypes --------------------------------------------------------

datatype buffer = {int(0..NOC_MAX_ID) hd, buffer option tl};
datatype channel = {buffer option buffer, int(0..4) priority};
datatype router = {channel[] channels, int(-1..NOC_MAX_ID)[] ids};



// --------------------------------------------------- Top level varables ---------------------------------------------------

// #MODULARIZE by setting NOC_MAX_ID to 1 less than the total number of routers and allocating spaces for more routers
const int NOC_MAX_ID = 8;
router[] noc = [router {}, router {}, router {}, router {}, router {}, router {}, router {}, router {}, router {}];

const int BUFFER_LENGTH = 3;

const int NORTH = 0;
const int WEST = 1;
const int EAST = 2;
const int SOUTH = 3;
const int LOCAL = 4;

int (0..1) test_1_to_7;
int (0..1) test_3_to_5;
int (0..1) test_5_to_3;
int (0..1) test_7_to_1;



// ------------------------------------------------------- Properties -------------------------------------------------------

property Send_1_to_7 = Pmax(<> (test_1_to_7 == 1));
property Send_3_to_5 = Pmax(<> (test_3_to_5 == 1));
property Send_5_to_3 = Pmax(<> (test_5_to_3 == 1));
property Send_7_to_1 = Pmax(<> (test_7_to_1 == 1));



// ------------------------------------------------------- Functions --------------------------------------------------------

// Calculate length of list
function int len(buffer option ls) = if ls == none then 0 else 1 + len(ls!.tl);

// Get the mirror direction
function int getDestinationChannel(int dir) =
	if dir == NORTH then SOUTH
	else if dir == WEST then EAST
	else if dir == EAST then WEST
	else if dir == SOUTH then NORTH
	else -1;

// Determine if the flits destination is in the same column as the current router
function int getColumnShift(int id, int dst) =
   (dst % ((int)sqrt(NOC_MAX_ID + 1))) - (id % ((int)sqrt(NOC_MAX_ID + 1)));

// Tell if the buffer is full
function bool isBufferFull(int id, int dir) = len(noc[id].channels[dir].buffer) >= BUFFER_LENGTH;

// Return the front of the queue
function int peekFront(buffer option ls) =
	if ls == none then -1
	else if ls!.tl == none then ls!.hd
	else peekFront(ls!.tl);

// Add a flit to the buffer
function buffer option enqueue(int n, buffer option ls) =
	if len(ls) == BUFFER_LENGTH then ls
	else some(buffer {
		hd: n,
		tl: ls
	});

// Remove a flit from the buffer
function buffer option dequeue(buffer option ls) =
	if ls == none then none
	else if ls!.tl == none then none
	else some(buffer {
		hd: ls!.hd,
		tl: dequeue(ls!.tl)
	});



// ------------------------------------------------------- Processes --------------------------------------------------------

// Send flit to northern router. src and dst are channels (ie NORTH, WEST, EAST, SOUTH, LOCAL), NOT the actual router ids!
process Send(int id, int src, int dir){
	// We want to chech the final destination buffer of the router we are headed into, to see if it is full
	int(-1..3) dst;
	{=
		// A flit going from router 0 to router 1 leaves 0 from the SOUTH and enters 1 from the NORTH.
		dst = getDestinationChannel(dir)
	=};

	if(!isBufferFull(noc[id].ids[dir], dst)){
		{=
			// First, add flit to destination buffer
			0: noc[noc[id].ids[dir]].channels[dst].buffer =
				enqueue(peekFront(noc[id].channels[src].buffer), noc[noc[id].ids[dir]].channels[dst].buffer),
			// Then, remove it from the source buffer
			1: noc[id].channels[src].buffer = dequeue(noc[id].channels[src].buffer)
		=}
	}
	else{
		tau
	}
}

// Advance flits to respective buffers
process AdvanceFlits(int id, int buf){
	// If flit needs to stay on this row
	int flit;
	int shift;
	{=
		0: flit = peekFront(noc[id].channels[buf].buffer),
		1: shift = getColumnShift(id, flit)
	=};

	if(shift == 0){
		// Send it north
		if(flit < id){
			Send(id, buf, NORTH)
		}
		// Or send it south
		else{
			Send(id, buf, SOUTH)
		}
	}
	// Else, if flit needs to go west
	else if(shift < 0){
		Send(id, buf, WEST)
	}
	// Else, flit needs to go east
	else{
		Send(id, buf, EAST)
	}
}

// Process for Arbiter 1
process Arbiter(int id, int id_north, int id_west, int id_east, int id_south){
	// Initialize
	{=
		// Set ids
		noc[0] = router {ids: [-1, -1,  1,  3]},
		noc[1] = router {ids: [-1,  0,  2,  4]},
		noc[2] = router {ids: [-1,  1, -1,  5]},
		noc[3] = router {ids: [ 0, -1,  4,  6]},
		noc[4] = router {ids: [ 1,  3,  5,  7]},
		noc[5] = router {ids: [ 2,  4, -1,  8]},
		noc[6] = router {ids: [ 3, -1,  7, -1]},
		noc[7] = router {ids: [ 4,  6,  8, -1]},
		noc[8] = router {ids: [ 5,  7, -1, -1]},

		// Initialize the router channels
		1: noc[0].channels = [channel {}, channel {}, channel {}, channel {}, channel {}],
		1: noc[1].channels = [channel {}, channel {}, channel {}, channel {}, channel {}],
		1: noc[2].channels = [channel {}, channel {}, channel {}, channel {}, channel {}],
		1: noc[3].channels = [channel {}, channel {}, channel {}, channel {}, channel {}],
		1: noc[4].channels = [channel {}, channel {}, channel {}, channel {}, channel {}],
		1: noc[5].channels = [channel {}, channel {}, channel {}, channel {}, channel {}],
		1: noc[6].channels = [channel {}, channel {}, channel {}, channel {}, channel {}],
		1: noc[7].channels = [channel {}, channel {}, channel {}, channel {}, channel {}],
		1: noc[8].channels = [channel {}, channel {}, channel {}, channel {}, channel {}],

		// Everything is going to pass through router 4.
		2: noc[1].channels[LOCAL].buffer = enqueue(7, none),
		2: noc[3].channels[LOCAL].buffer = enqueue(5, none),
		2: noc[5].channels[LOCAL].buffer = enqueue(3, none),
		2: noc[7].channels[LOCAL].buffer = enqueue(1, none)
	=};

	AdvanceFlits(1, LOCAL);
	AdvanceFlits(3, LOCAL);
	AdvanceFlits(5, LOCAL);
	AdvanceFlits(7, LOCAL);

	

	// TEST 1:
	{=
		test_1_to_7 = peekFront(noc[7].channels[NORTH].buffer) != -1 ? 1 : 0,
		test_3_to_5 = peekFront(noc[5].channels[WEST].buffer) != -1 ? 1 : 0,
		test_5_to_3 = peekFront(noc[3].channels[EAST].buffer) != -1 ? 1 : 0,
		test_7_to_1 = peekFront(noc[1].channels[SOUTH].buffer) != -1 ? 1 : 0
	=}

}



// ------------------------------------------------------- Execution --------------------------------------------------------

Arbiter(0, -1, -1, 1, 3)
