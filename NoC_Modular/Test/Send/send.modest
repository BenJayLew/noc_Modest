/*
 * This is a test for sending a flit from one router to another. A flit will be placed on the local buffer of router 0, and
 * then it will be sent south to the northern buffer of router 1.
 *
 * NoC router ID map:
 *	0
 *	|
 *	1
 *
 * In order to add routers to the NoC visit all coments labled with #MODULARIZE
 *
 * Editors: Jonah Boe
 * Date: Jun 09, 2021
 */

option "dtmc";



// ------------------------------------------------------- Datatypes -------------------------------------------------------

datatype buffer = {int(0..NOC_MAX_ID) hd, buffer option tl};
datatype channel = {buffer option buffer, int(0..4) priority};
datatype router = {channel[] channels, int(-1..NOC_MAX_ID)[] ids};



// --------------------------------------------------- Top level varables --------------------------------------------------

// #MODULARIZE by setting NOC_MAX_ID to 1 less than the total number of routers and allocating spaces for more routers
const int NOC_MAX_ID = 1;
router[] noc = [router {}, router {}];

const int BUFFER_LENGTH = 3;

const int NORTH = 0;
const int WEST = 1;
const int EAST = 2;
const int SOUTH = 3;
const int LOCAL = 4;

int (0..1) packetSent;



// ------------------------------------------------------- Properties ------------------------------------------------------

property Test1 = Pmax(<> (packetSent == 1));



// ------------------------------------------------------- Functions -------------------------------------------------------

// Calculate length of list
function int len(buffer option ls) = if ls == none then 0 else 1 + len(ls!.tl);

// Get the mirror direction
function int getDestinationDirection(int dir) =
	if dir == NORTH then SOUTH
	else if dir == WEST then EAST
	else if dir == EAST then WEST
	else if dir == SOUTH then NORTH
	else -1;

// Tell if the buffer is full
function bool isBufferFull(int id, int dir) = len(noc[id].channels[dir].buffer) >= BUFFER_LENGTH;

// Return the front of the queue
function int peekFront(buffer option ls) =
	 if ls == none then -1
	 else if ls!.tl == none then ls!.hd
	      else peekFront(ls!.tl);

// Add a flit to the buffer
function buffer option enqueue(int n, buffer option ls) = 
	if len(ls) == BUFFER_LENGTH then ls
	else some(buffer { 
		hd: n,
		tl: ls 
	});

// Remove a flit from the buffer
function buffer option dequeue(buffer option ls) = 
	if ls == none then none
	else if	ls!.tl == none then none 
	else some(buffer {
		hd: ls!.hd,
		tl: dequeue(ls!.tl)
	});



// ------------------------------------------------------- Processes -------------------------------------------------------

// Send flit to northern router. src and dst are channels (ie NORTH, WEST, EAST, SOUTH, LOCAL), NOT the actual router ids!
process Send(int id, int src, int dir){
	// We want to chech the final destination buffer of the router we are headed into, to see if it is full
	int(-1..3) dst;
	{=
		dst = getDestinationDirection(dir)
	=};

	if(!isBufferFull(noc[id].ids[dir], dst)){
		{=
			// Add flit to destination buffer
			noc[noc[id].ids[dir]].channels[dst].buffer = 
				enqueue(peekFront(noc[id].channels[src].buffer), noc[noc[id].ids[dir]].channels[dst].buffer),
			// Remove it from the source buffer
			noc[id].channels[src].buffer = dequeue(noc[id].channels[src].buffer)
		=}
	}
	else{
		tau
	}
}



// Process for Arbiter 0
process Arbiter(int id, int id_north, int id_west, int id_east, int id_south){
	
	// Initialize
	channel[] temp;
	{=
		noc[id] = router {ids: [id_north, id_west, id_east, id_south]},
		noc[id].channels = [channel {priority: 0}, channel {priority: 0}, channel {priority: 0}, channel {priority: 0}, channel {priority: 0}],

		// TEST: Create the router we're sending to
		noc[1] = router {ids: [0, -1, -1, -1]},
		noc[1].channels = [channel {priority: 0}, channel {priority: 0}, channel {priority: 0}, channel {priority: 0}, channel {priority: 0}],

		// TEST: Create a flit with destination of north router id
		noc[id].channels[LOCAL].buffer = enqueue(1, none)
	=};

	// Run
	do{
		// Send the flit
		Send(id, LOCAL, SOUTH);

		if(peekFront(noc[1].channels[NORTH].buffer) != -1){
			{=
				packetSent = 1
			=}
		}
		else{
			tau
		};

		// End program
		stop
	}
}



// ------------------------------------------------------- Execution -------------------------------------------------------

Arbiter(0, -1, -1, -1, 1)
