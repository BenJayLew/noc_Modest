digraph G {
	rankdir = TB;
	bgcolor = transparent;
	node [style = filled, fillcolor = white];
__global_vars__ [shape=plaintext, fillcolor="transparent", label=<<table border="0"><tr><td align="left" valign="top" colspan="2">Global variables:</td></tr><tr><td align="left" valign="top">noc</td><td align="left" valign="top" balign="left">= [ router { }, router { } ]</td></tr><tr><td align="left" valign="top">worked</td><td align="left" valign="top" balign="left">= 0</td></tr></table>>];
	0 [shape=box, label=""];
	1 [shape=box, label=""];
	0 -> 1 [label=<τ, {= noc[0] = router { channel_east: temp, channel_local: temp, channel_north: temp, channel_south: temp, channel_west: temp, id_east: -1, id_north: 1, id_south: -1, id_west: -1 }, noc[1] = router { channel_east: temp, channel_local: temp, channel_north: temp, channel_south: temp, channel_west: temp, id_east: -1, id_north: -1, id_south: 0, id_west: -1 }, noc[0].channel_local.buffer = enqueue(1, none), temp = channel { buffer: none, priority: 0 } =}<br align="left" />>];
	2 [shape=box, label=""];
	1 -> 2 [label=<!isBufferFull(noc[0].id_north, 3), τ, {= noc[noc[0].id_north].channel_south.buffer = enqueue(peekFront(noc[0].channel_north.buffer), noc[noc[0].id_north].channel_south.buffer), noc[0].channel_north.buffer = dequeue(noc[0].channel_north.buffer) =}<br align="left" />>];
	3 [shape=box, label=""];
	2 -> 3 [label=<peekFront(noc[1].channel_south.buffer) != -1, τ, {= worked = 1 =}<br align="left" />>];
	2 -> 3 [label=<peekFront(noc[1].channel_south.buffer) == -1, τ<br align="left" />>];
	1 -> 2 [label=<isBufferFull(noc[0].id_north, 3), τ<br align="left" />>];
	_____initial4 [shape=none, style=invisible, label=""];
	_____initial4 -> 0 [label=<temp == channel { buffer: none, priority: 0 }<br align="left" />>];

}
