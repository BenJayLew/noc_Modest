/****************************************************************************************************************************
* This is a modularized version of the concrete model for NoC model verification.
*
* Current NoC router IDs
*	0 - 1
*	|   |
*	2 - 3
*
* In order to add routers to the NoC visit all coments labled with #MODULARIZE
*
* Editors: Jonah Boe
* Date: Dec 16, 2021
* Designed using: The Modest Toolset (www.modestchecker.net), version v3.1.182-g3d5d3ecdf.
***************************************************************************************************************************/

option "dtmc";



// --------------------------------------------------- Top level varables ---------------------------------------------------

// #MODULARIZE by setting NOC_MAX_ID to 1 less than the total number of routers and allocating spaces for more routers
const int NOC_MAX_ID = 3;
router[] noc = [router {channels: [channel{}, channel{}, channel{}, channel{}, channel{}]},
				router {channels: [channel{}, channel{}, channel{}, channel{}, channel{}]}, 
				router {channels: [channel{}, channel{}, channel{}, channel{}, channel{}]}, 
				router {channels: [channel{}, channel{}, channel{}, channel{}, channel{}]}];

// #MODULARIZE this value changes the buffer length of all buffers.
const int BUFFER_LENGTH = 4;

// #MODULARIZE these values change the frequency with witch flits are injected.
const int INJECTION_RATE_NUMERATOR = 9;
const int INJECTION_RATE_DENOMINATOR = 10;

// #MODULARIZE this is the upper bound of cycles run before quiting
const int CLK_UPPER = 20;
int clk = 0;

// #MODULARIZE this is the upper threshoold for noise detected in the system
const int RESISTIVE_NOISE_THRESH = 5;
const int INDUCTIVE_NOISE_THRESH = 1;

// These are for tracking resistive and inductive noise and must be initialized to 0.
int resistiveNoise = 0;
int inductiveNoise = 0;

// These values are enumerations and are NOT to be changed
const int NORTH = 0;
const int WEST = 1;
const int EAST = 2;
const int SOUTH = 3;
const int LOCAL = 4;



// ------------------------------------------------------- Datatypes --------------------------------------------------------

datatype buffer = {
	int(0..NOC_MAX_ID) hd,
	buffer option tl
};

datatype channel = {
	buffer option buffer,
	bool serviced,
	bool isEmpty,
	bool isFull
};

datatype router = {
	channel[] channels,
	int(-1..NOC_MAX_ID)[] ids,
	int(0..4)[] priority_list,
	int(0..4)[] priority_list_temp,
	int(0..4) serviced_index,
	int(0..4) unserviced_index,
	int(0..5) total_unserviced,
	bool[] used,
	bool wasResistive,
	bool isResistive,
	bool wasInductive,
	bool isInductive
};



// ------------------------------------------------------- Properties -------------------------------------------------------

// A flits can only being routed when its source buffer is not empty and its destination buffer is not full.
datatype checker = {bool[] routing};
checker[] isRouting = [checker{routing:[false, false, false, false, false]},
					   checker{routing:[false, false, false, false, false]}, 
					   checker{routing:[false, false, false, false, false]},
					   checker{routing:[false, false, false, false, false]}];
//property router0RoutingSouthSynced = Pmax([]((isRouting[0].routing[SOUTH] == true => !noc[0].channels[SOUTH].isEmpty))); //!!! 
//property router0RoutingSouthSynced = Pmax(!(<>(!(!isRouting[0].routing[SOUTH] || !noc[0].channels[SOUTH].isEmpty)))); //!!!
property Router0RoutingSouthSynced = Pmax(<>(!(isRouting[0].routing[SOUTH] || (!noc[0].channels[SOUTH].isEmpty && !noc[2].channels[NORTH].isFull)))) == 0;
property Router0RoutingEastSynced = Pmax(<>(!(!isRouting[0].routing[EAST] || (!noc[0].channels[EAST].isEmpty && !noc[1].channels[WEST].isFull)))) == 0;
property router1RoutingSouthSynced = Pmax(<>(!(!isRouting[1].routing[SOUTH] || (!noc[1].channels[SOUTH].isEmpty && !noc[3].channels[NORTH].isFull)))) == 0;
property router1RoutingWestSynced = Pmax(<>(!(!isRouting[1].routing[WEST] || (!noc[1].channels[WEST].isEmpty && !noc[0].channels[EAST].isFull)))) == 0;
property router2RoutingSouthSynced = Pmax(<>(!(!isRouting[2].routing[NORTH] || (!noc[2].channels[NORTH].isEmpty && !noc[0].channels[SOUTH].isFull)))) == 0;
property router2RoutingEastSynced = Pmax(<>(!(!isRouting[2].routing[EAST] || (!noc[2].channels[EAST].isEmpty && !noc[3].channels[WEST].isFull)))) == 0;
property router3RoutingSouthSynced = Pmax(<>(!(!isRouting[3].routing[NORTH] || (!noc[3].channels[NORTH].isEmpty && !noc[1].channels[SOUTH].isFull)))) == 0;
property router3RoutingWestSynced = Pmax(<>(!(!isRouting[3].routing[WEST] || (!noc[3].channels[WEST].isEmpty && !noc[2].channels[EAST].isFull)))) == 0;

// A buffer can be full
property bufferCanFill = Pmax(<>(noc[0].channels[SOUTH].isFull)) > 0;



// -------------------------------------------------------- Actions ---------------------------------------------------------

// For keeping parallel processes synced
action tick;
action tack;
action tock;



// ------------------------------------------------------- Functions --------------------------------------------------------

// Calculate length of list
function int len(buffer option ls) = if ls == none then 0 else 1 + len(ls!.tl);

// Tell if the buffer is full
function bool isBufferFull(buffer option ls) = len(ls) >= BUFFER_LENGTH;

// Get the mirror direction
function int getDestinationChannel(int dir) =
	if dir == NORTH then SOUTH
	else if dir == WEST then EAST
	else if dir == EAST then WEST
	else if dir == SOUTH then NORTH
	else -1;

// Determine if the flits destination is in the same column as the current router
function int getColumnShift(int id, int dst) =
	(dst % ((int)sqrt(NOC_MAX_ID + 1))) - (id % ((int)sqrt(NOC_MAX_ID + 1)));

// Return the front of the queue
function int peekFront(buffer option ls) =
	if ls == none then -1
	else if ls!.tl == none then ls!.hd
	else peekFront(ls!.tl);

// Add a flit to the buffer
function buffer option enqueue(int n, buffer option ls) =
	if len(ls) == BUFFER_LENGTH then ls
	else some(buffer {
		hd: n,
		tl: ls
	});

// Remove a flit from the buffer
function buffer option dequeue(buffer option ls) =
	if ls == none then none
	else if ls!.tl == none then none
	else some(buffer {
		hd: ls!.hd,
		tl: dequeue(ls!.tl)
	});



// ------------------------------------------------------- Processes --------------------------------------------------------

process GenerateFlits(int id){
	int(0..NOC_MAX_ID) destination;
	if((clk % INJECTION_RATE_DENOMINATOR) < INJECTION_RATE_NUMERATOR){
		// Determine a destiantion
		palt{
			// #MODULARIZE by adding a probability for (NOC_MAX_ID - 1) destinations.
			:(1/3): {= destination = 0 =}
			:(1/3): {= destination = 1 =}
			:(1/3): {= destination = 2 =}
		};

		// Make sure it is not this router and add it to the local buffer.
		if(destination == id){
			{=
				noc[id].channels[LOCAL].buffer = enqueue(destination + 1, noc[id].channels[LOCAL].buffer)
			=}
		}
		else{
			{=
				noc[id].channels[LOCAL].buffer = enqueue(destination, noc[id].channels[LOCAL].buffer)
			=}
		}
	}
	else {
		tau
	}
}

process PrepChannel(int id, int ch){
	if(peekFront(noc[id].channels[ch].buffer) == -1){
		{=
			noc[id].channels[ch].isEmpty = true
		=}
	}
	else{
		{=
			noc[id].channels[ch].isEmpty = false
		=}
	};
	if(isBufferFull(noc[id].channels[ch].buffer)){
		{=
			noc[id].channels[ch].isFull = true
		=}
	}
	else{
		{=
			noc[id].channels[ch].isFull = false
		=}
	}
}

process PrepRouter(int id){
	PrepChannel(id, 0);
	PrepChannel(id, 1);
	PrepChannel(id, 2);
	PrepChannel(id, 3);
	PrepChannel(id, 4)
}

// Send flit to northern router. src and dst are channels (ie NORTH, WEST, EAST, SOUTH, LOCAL), NOT the actual router ids!
process Send(int id, int buf, int dir){
	// We want to chech the final destination buffer of the router we are headed into, to see if it is full
	int(-1..3) dst;
	{=
		// A flit going from router 0 to router 1 leaves 0 from the SOUTH and enters 1 from the NORTH.
		dst = getDestinationChannel(dir)
	=};

	if(!noc[noc[id].ids[dir]].channels[dst].isFull && !noc[id].used[dir]){
		{=
			// First set that a transaction is being made
			0: isRouting[id].routing[buf] = true,
			// First, add flit to destination buffer
			1: noc[noc[id].ids[dir]].channels[dst].buffer =
				enqueue(peekFront(noc[id].channels[buf].buffer), noc[noc[id].ids[dir]].channels[dst].buffer),
			// Then, remove it from the source buffer
			2: noc[id].channels[buf].buffer = dequeue(noc[id].channels[buf].buffer),
			// Mark that output as used and that channel as serviced
			3: noc[id].used[dir] = true,
			3: noc[id].channels[buf].serviced = true,
			// Remove the inditactor
			4: isRouting[id].routing[buf] = false
		=}
	}
	else{
		// Increment total unserviced buffers and set resistive noise to false
		{=
			noc[id].total_unserviced++,
			noc[id].isResistive = false
		=}
	}
}

// Advance flits to respective buffers
process AdvanceFlits(int id, int buf){
	// If flit needs to stay on this row
	if(getColumnShift(id, peekFront(noc[id].channels[buf].buffer)) == 0){
		// Send it north
		if(peekFront(noc[id].channels[buf].buffer) < id){
			Send(id, buf, NORTH)
		}
		// Or send it south
		else{
			Send(id, buf, SOUTH)
		}
	}
	// Else, if flit needs to go west
	else if(getColumnShift(id, peekFront(noc[id].channels[buf].buffer)) < 0){
		Send(id, buf, WEST)
	}
	// Else, flit needs to go east
	else{
		Send(id, buf, EAST)
	}
}

// Update a specific channel
process AdvanceChannel(int id, int buf){
	// If this channel was not assigned a neighbor...
	if(buf != 4 && noc[id].ids[buf] == -1){
		{=
			// Mark the channel as serviced
			noc[id].channels[buf].serviced = true
		=}
	}
	// If this channel was assigned a neighbor or is local, but it is empty...
	else if(noc[id].channels[buf].isEmpty == true){
		{=
			// Mark the channel as serviced
			noc[id].channels[buf].serviced = true,

			// A channel without a flit means no resistive noise for this cycle
			noc[id].isResistive = false
		=}
	}
	// If the flit at this channel has the same ID as this router...
	else if(peekFront(noc[id].channels[buf].buffer) == id){
		{=
			// Mark the channel as serviced
			noc[id].channels[buf].serviced = true,

			// Remove this flit. It has reached its destination
			noc[id].channels[buf].buffer = dequeue(noc[id].channels[buf].buffer),

			// A channel that has any amount of communication cannot be inductive
			noc[id].isInductive = false
		=}
	}
	// Otherwise, the flit must be for another router
	else{
		AdvanceFlits(id, buf);

		// A channel that has any amount of communication cannot be inductive
		{=
			noc[id].isInductive = false
		=}
	}
}

// Update the directions of the next flits in the buffers
process AdvanceRouter(int id){
	AdvanceChannel(id, noc[id].priority_list[0]);
	AdvanceChannel(id, noc[id].priority_list[1]);
	AdvanceChannel(id, noc[id].priority_list[2]);
	AdvanceChannel(id, noc[id].priority_list[3]);
	AdvanceChannel(id, noc[id].priority_list[4])
}

// Process for behavior
process RouterBehavior(int id, int id_north, int id_west, int id_east, int id_south){
	// Initialize the router
	{=
		noc[id] = router {
			channels: [
				channel {serviced: false, isEmpty: false},
				channel {serviced: false, isEmpty: false},
				channel {serviced: false, isEmpty: false},
				channel {serviced: false, isEmpty: false},
				channel {serviced: false, isEmpty: false}],
			ids: [id_north, id_west, id_east, id_south],
			priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
			total_unserviced: 0,
			used: [false, false, false, false],
			wasResistive: false,
			wasInductive: false,
			// These start true every cycle until proven false
			isResistive: true,
			isInductive: true
		}
	=};

	// Run
	do{
		tick;
		// Generate new flits
		GenerateFlits(id);
		// Determine what channels will send this cycle
		PrepRouter(id);

		tock;
		// Send the flits
		AdvanceRouter(id);

		if(clk > CLK_UPPER){
			stop
		}
		else{
			tau
		}
	}
}

// For syncing parallell processes
process Clock(){
	tick
	{=
		clk++
	=};
	if (clk <= CLK_UPPER) {
		Clock()
	}
	else {
		stop
	}
}



// ------------------------------------------------------- Execution --------------------------------------------------------

// These processes are run concurrently and kept in sync by tick and tock.
par{
	::	Clock()
	// #MODULARIZE by adding new arbiter processes for any additional routers.
	//	0 - 1
	//	|   |
	//	2 - 3
	:: RouterBehavior(0, -1, -1,  1,  2)
	:: RouterBehavior(1, -1,  0, -1,  3)
	:: RouterBehavior(2,  0, -1,  3, -1)
	:: RouterBehavior(3,  1,  2, -1, -1)
}
