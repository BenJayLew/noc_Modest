/*
 * This is a test for checking the functions that determine the western and eastern most ids in a row of routers.
 *
 * NoC router ID map:
 *	0 - 1 - 2 - 3 - 4
 *
 * Editors: Jonah Boe
 * Date: Jun 09, 2021
 */

 option "dtmc";



// ------------------------------------------------------- Datatypes -------------------------------------------------------

datatype buffer = {int(0..NOC_MAX_ID) hd, buffer option tl};
datatype channel = {buffer option buffer, int(0..4) priority};
datatype router = {channel[] channels, int(-1..NOC_MAX_ID)[] ids};



// --------------------------------------------------- Top level varables --------------------------------------------------

const int NOC_MAX_ID = 4;
router[] noc = [router {}, router {}, router {}, router {}, router {}];

const int BUFFER_LENGTH = 3;

const int NORTH = 0;
const int WEST = 1;
const int EAST = 2;
const int SOUTH = 3;

int (0..NOC_MAX_ID) leftMostId;
int (0..NOC_MAX_ID) rightMostId;



// ------------------------------------------------------- Properties ------------------------------------------------------

property Validated_left_ID = Pmax(<> (leftMostId == 0));
property Validated_right_ID = Pmax(<> (rightMostId == 4));



// ------------------------------------------------------- Functions -------------------------------------------------------

// Get the id of the first router in this row
function int firstInRow(int id) =
	if noc[id].ids[WEST] == -1 then id
	else firstInRow(noc[id].ids[WEST]);

// Get the id of the last router in this row
function int lastInRow(int id) =
	if noc[id].ids[EAST] == -1 then id
	else lastInRow(noc[id].ids[EAST]);



// ------------------------------------------------------- Processes -------------------------------------------------------

process Main(){
	// Initialize
	channel[] temp;
	{=
		noc[0] = router {channels: temp, ids: [-1, -1,  1, -1]},
		noc[1] = router {channels: temp, ids: [-1,  0,  2, -1]},
		noc[2] = router {channels: temp, ids: [-1,  1,  3, -1]},
		noc[3] = router {channels: temp, ids: [-1,  2,  4, -1]},
		noc[4] = router {channels: temp, ids: [-1,  3, -1, -1]}
	=};

	// Run
	do{
		// Assign test values
		{=
			leftMostId = firstInRow(2),
			rightMostId = lastInRow(2)
		=};

		// End program
		stop
	}
}



// ------------------------------------------------------- Execution -------------------------------------------------------

Main()
