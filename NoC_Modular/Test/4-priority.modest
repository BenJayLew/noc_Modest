/*
 * This is a test for the prioritizing of flits that arive at one router and are headed in the same direction. A flit will be
 *	placed on router 0 with the destination of router 4. Another flit will be placed on router 2 with the destination of
 *	router 7. These two flits will conflict at router 1. and one will be prioritized.
 *
 * NoC router ID map:
 *	0 - 1 - 2
 *	|   |   |
 *	3 - 4 - 5
 * |   |   |
 * 6 - 7 - 8
 *
 * Editors: Jonah Boe
 * Date: Jul 08, 2021
 */

option "dtmc";



// ------------------------------------------------------- Datatypes --------------------------------------------------------

datatype buffer =   {int(0..NOC_MAX_ID) hd,
							buffer option tl
};

datatype channel =  {buffer option buffer,
							bool serviced
};

datatype router =   {channel[] channels,
							int(-1..NOC_MAX_ID)[] ids,
							int(0..4)[] priority_list,
							bool[] used,
							int(0..5) total_unserviced,
							int(0..4)[] priority_list_temp,
							int(0..4) serviced_index,
							int(0..4) unserviced_index
};



// --------------------------------------------------- Top level varables ---------------------------------------------------

// #MODULARIZE by setting NOC_MAX_ID to 1 less than the total number of routers and allocating spaces for more routers
const int NOC_MAX_ID = 8;
router[] noc = [router {}, router {}, router {}, router {}, router {}, router {}, router {}, router {}, router {}];

const int BUFFER_LENGTH = 3;

const int NORTH = 0;
const int WEST = 1;
const int EAST = 2;
const int SOUTH = 3;
const int LOCAL = 4;

int (0..1) test_0_sent_4_to_1;
int (0..1) test_2_sent_7_to_1;
int (0..1) test_1_sent_7_to_4;
int (0..1) test_unserviced_at_1_is_1;
int (0..1) test_priority_ordering_at_1;
int (0..1) test_1_sent_4_to_4;



// ------------------------------------------------------- Properties -------------------------------------------------------

property Test_0_sent_4_to_1 = Pmax(<> (test_0_sent_4_to_1 == 1));
property Test_2_sent_7_to_1 = Pmax(<> (test_2_sent_7_to_1 == 1));
property Test_1_sent_7_to_4 = Pmax(<> (test_1_sent_7_to_4 == 1));
property Test_unserviced_at_1_is_1 = Pmax(<> (test_unserviced_at_1_is_1 == 1));
property Test_priority_ordering_at_1 = Pmax(<> (test_priority_ordering_at_1 == 1));
property Test_1_sent_4_to_4 = Pmax(<> (test_1_sent_4_to_4 == 1));



// ------------------------------------------------------- Functions --------------------------------------------------------

// Calculate length of list
function int len(buffer option ls) = if ls == none then 0 else 1 + len(ls!.tl);

// Get the mirror direction
function int getDestinationChannel(int dir) =
	if dir == NORTH then SOUTH
	else if dir == WEST then EAST
	else if dir == EAST then WEST
	else if dir == SOUTH then NORTH
	else -1;

// Determine if the flits destination is in the same column as the current router
function int getColumnShift(int id, int dst) =
   (dst % ((int)sqrt(NOC_MAX_ID + 1))) - (id % ((int)sqrt(NOC_MAX_ID + 1)));

// Tell if the buffer is full
function bool isBufferFull(int id, int dir) = len(noc[id].channels[dir].buffer) >= BUFFER_LENGTH;

// Return the front of the queue
function int peekFront(buffer option ls) =
	if ls == none then -1
	else if ls!.tl == none then ls!.hd
	else peekFront(ls!.tl);

// Add a flit to the buffer
function buffer option enqueue(int n, buffer option ls) =
	if len(ls) == BUFFER_LENGTH then ls
	else some(buffer {
		hd: n,
		tl: ls
	});

// Remove a flit from the buffer
function buffer option dequeue(buffer option ls) =
	if ls == none then none
	else if ls!.tl == none then none
	else some(buffer {
		hd: ls!.hd,
		tl: dequeue(ls!.tl)
	});



// ------------------------------------------------------- Processes --------------------------------------------------------

// Send flit to northern router. src and dst are channels (ie NORTH, WEST, EAST, SOUTH, LOCAL), NOT the actual router ids!
process Send(int id, int buf, int dir){
	// We want to chech the final destination buffer of the router we are headed into, to see if it is full
	int(-1..3) dst;
	{=
		// A flit going from router 0 to router 1 leaves 0 from the SOUTH and enters 1 from the NORTH.
		dst = getDestinationChannel(dir)
	=};

	if(!isBufferFull(noc[id].ids[dir], dst) && !noc[id].used[dir]){
		{=
			// First, add flit to destination buffer
			0: noc[noc[id].ids[dir]].channels[dst].buffer =
				enqueue(peekFront(noc[id].channels[buf].buffer), noc[noc[id].ids[dir]].channels[dst].buffer),
			// Then, remove it from the source buffer
			1: noc[id].channels[buf].buffer = dequeue(noc[id].channels[buf].buffer),
			// Mark that output as used and that channel as serviced
			2: noc[id].used[dir] = true,
			2: noc[id].channels[buf].serviced = true
		=}
	}
	else{
		// Incrament total unserviced buffers
		{=
			noc[id].total_unserviced = noc[id].total_unserviced + 1
		=}
	}
}

// Advance flits to respective buffers
process AdvanceFlits(int id, int buf){
	// If flit needs to stay on this row
	if(getColumnShift(id, peekFront(noc[id].channels[buf].buffer)) == 0){
		// Send it north
		if(peekFront(noc[id].channels[buf].buffer) < id){
			Send(id, buf, NORTH)
		}
		// Or send it south
		else{
			Send(id, buf, SOUTH)
		}
	}
	// Else, if flit needs to go west
	else if(getColumnShift(id, peekFront(noc[id].channels[buf].buffer)) < 0){
		Send(id, buf, WEST)
	}
	// Else, flit needs to go east
	else{
		Send(id, buf, EAST)
	}
}

// Update a specific channel
process AdvanceChannel(int id, int buf){
	if(peekFront(noc[id].channels[buf].buffer) == -1){
		{=
			// Mark the channel as serviced
			noc[id].channels[buf].serviced = true
		=}
	}
	else if(peekFront(noc[id].channels[buf].buffer) == id){
		{=
			// Mark the channel as serviced
			noc[id].channels[buf].serviced = true,
			// Remove this flit, because it has reached its destination
			noc[id].channels[buf].buffer = dequeue(noc[id].channels[buf].buffer)
		=}
	}
	else{
		AdvanceFlits(id, buf)
	}
}

// Update the directions of the next flits in the buffers
process AdvanceRouter(int id){
	AdvanceChannel(id, noc[id].priority_list[0]);
	AdvanceChannel(id, noc[id].priority_list[1]);
	AdvanceChannel(id, noc[id].priority_list[2]);
	AdvanceChannel(id, noc[id].priority_list[3]);
	AdvanceChannel(id, noc[id].priority_list[4])
}

process UpdatePriorityList(int id, int i){
	if(noc[id].channels[noc[id].priority_list[i]].serviced){
		{=
			0: noc[id].priority_list_temp[noc[id].total_unserviced + noc[id].serviced_index] = noc[id].priority_list[i],
			1: noc[id].serviced_index = noc[id].serviced_index + 1
		=}
	}
	else{
		{=
			0: noc[id].priority_list_temp[noc[id].unserviced_index] = noc[id].priority_list[i],
			1: noc[id].unserviced_index = noc[id].unserviced_index + 1
		=}
	}
}

// Update priority list
process UpdatePiority(int id){
	// Reset all of the temp values
	{=
		noc[id].priority_list_temp = [0, 0, 0, 0, 0],
		noc[id].serviced_index = 0,
		noc[id].unserviced_index = 0
	=};
	// Update the ordering of priorities in the lists
	UpdatePriorityList(id, 0);
	UpdatePriorityList(id, 1);
	UpdatePriorityList(id, 2);
	UpdatePriorityList(id, 3);
	UpdatePriorityList(id, 4);

	{=
		// Make our next priority list the current priority list
		noc[id].priority_list = noc[id].priority_list_temp,

		// Reset the used and serviced variables
		noc[id].total_unserviced = 0,
		noc[id].used = [false, false, false, false],
		noc[id].channels[0].serviced = false,
		noc[id].channels[1].serviced = false,
		noc[id].channels[2].serviced = false,
		noc[id].channels[3].serviced = false,
		noc[id].channels[4].serviced = false
	=}
}

// Process for Arbiter 1
process Arbiter(int id, int id_north, int id_west, int id_east, int id_south){

	int(0..4)[] priority_list_init;
	channel channel_temp;
	bool[] used_temp;

	// Initialize
	{=
		// Create a default priority ordering
		0: priority_list_init = [NORTH, EAST, WEST, SOUTH, LOCAL],
		0: channel_temp = channel {serviced: false},
		0: used_temp = [false, false, false, false],

		// Set ids
		1: noc[0] = router {ids: [-1, -1,  1,  3], priority_list: priority_list_init, used: used_temp, total_unserviced: 0},
		1: noc[1] = router {ids: [-1,  0,  2,  4], priority_list: priority_list_init, used: used_temp, total_unserviced: 0},
		1: noc[2] = router {ids: [-1,  1, -1,  5], priority_list: priority_list_init, used: used_temp, total_unserviced: 0},
		1: noc[3] = router {ids: [ 0, -1,  4,  6], priority_list: priority_list_init, used: used_temp, total_unserviced: 0},
		1: noc[4] = router {ids: [ 1,  3,  5,  7], priority_list: priority_list_init, used: used_temp, total_unserviced: 0},
		1: noc[5] = router {ids: [ 2,  4, -1,  8], priority_list: priority_list_init, used: used_temp, total_unserviced: 0},
		1: noc[6] = router {ids: [ 3, -1,  7, -1], priority_list: priority_list_init, used: used_temp, total_unserviced: 0},
		1: noc[7] = router {ids: [ 4,  6,  8, -1], priority_list: priority_list_init, used: used_temp, total_unserviced: 0},
		1: noc[8] = router {ids: [ 5,  7, -1, -1], priority_list: priority_list_init, used: used_temp, total_unserviced: 0},

		// Initialize the router channels
		2: noc[0].channels = [channel_temp, channel_temp, channel_temp, channel_temp, channel_temp],
		2: noc[1].channels = [channel_temp, channel_temp, channel_temp, channel_temp, channel_temp],
		2: noc[2].channels = [channel_temp, channel_temp, channel_temp, channel_temp, channel_temp],
		2: noc[3].channels = [channel_temp, channel_temp, channel_temp, channel_temp, channel_temp],
		2: noc[4].channels = [channel_temp, channel_temp, channel_temp, channel_temp, channel_temp],
		2: noc[5].channels = [channel_temp, channel_temp, channel_temp, channel_temp, channel_temp],
		2: noc[6].channels = [channel_temp, channel_temp, channel_temp, channel_temp, channel_temp],
		2: noc[7].channels = [channel_temp, channel_temp, channel_temp, channel_temp, channel_temp],
		2: noc[8].channels = [channel_temp, channel_temp, channel_temp, channel_temp, channel_temp],

		// Everything is going to pass through router 4.
		// Add a flit to 0 set to router 4.
		// Add a flit to 0 set to router 7.
		3: noc[0].channels[LOCAL].buffer = enqueue(4, none),
		3: noc[2].channels[LOCAL].buffer = enqueue(7, none)
	=};

	// Advance routers 0 and 2. Now router 1 will have flits in its west and east buffers.
	AdvanceRouter(0);
	AdvanceRouter(2);
	{=
		test_0_sent_4_to_1 = peekFront(noc[1].channels[WEST].buffer) == 4 ? 1 : 0,
		test_2_sent_7_to_1 = peekFront(noc[1].channels[EAST].buffer) == 7 ? 1 : 0
	=};
	// Advance router 1. East had priority, so router 1 should forward a 7 to router 4 and left west unserviced.
	AdvanceRouter(1);
	{=
		test_1_sent_7_to_4 = peekFront(noc[4].channels[NORTH].buffer) == 7 ? 1 : 0,
		test_unserviced_at_1_is_1 = (noc[1].total_unserviced == 1) ? 1 : 0
	=};
	// Updating 1s priority list should cause the following shift.
	UpdatePiority(1);
	{=
		test_priority_ordering_at_1 = (noc[1].priority_list[0] == WEST &&
												 noc[1].priority_list[1] == NORTH &&
											    noc[1].priority_list[2] == EAST &&
											    noc[1].priority_list[3] == SOUTH &&
											    noc[1].priority_list[4] == LOCAL) ? 1 : 0
	=};
	// Router 4 still has a 7 at the head of its north buffer, so we need to move that along.
	AdvanceRouter(1);
	// Now router 4 should have a 4 at the head of its north buffer.
	AdvanceRouter(4);
	{=
		test_1_sent_4_to_4 = peekFront(noc[4].channels[NORTH].buffer) == 4 ? 1 : 0
	=}
}



// ------------------------------------------------------- Execution --------------------------------------------------------

Arbiter(0, -1, -1, 1, 3)
