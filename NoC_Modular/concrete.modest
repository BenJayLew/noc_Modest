/****************************************************************************************************************************
 * This is a modularized version of the concrete model for NoC model verification.
 *
 * Current NoC router IDs
 *	0 - 1
 *	|   |
 *	2 - 3
 *
 * In order to add routers to the NoC visit all coments labled with #MODULARIZE
 *
 * Editors: Jonah Boe
 * Date: Apr 23, 2021
 ***************************************************************************************************************************/

option "dtmc";



// ------------------------------------------------------- Datatypes --------------------------------------------------------

datatype buffer = {int(0..NOC_MAX_ID) hd, buffer option tl};
datatype channel = {buffer option buffer, int(0..4) priority};
datatype router = {channel[] channels, int(-1..NOC_MAX_ID)[] ids};



// --------------------------------------------------- Top level varables ---------------------------------------------------

// #MODULARIZE by setting NOC_MAX_ID to 1 less than the total number of routers and allocating spaces for more routers
const int NOC_MAX_ID = 3;
router[] noc = [router {}, router {}, router {}, router {}];

const int NORTH = 0;
const int WEST = 1;
const int EAST = 2;
const int SOUTH = 3;
const int LOCAL = 4;

const int BUFFER_LENGTH = 3;
const int INJECTION_RATE_NUMERATOR = 2;
const int INJECTION_RATE_DENOMINATOR = 5;
const int TOTAL_CYCLES = 20;

const int DUR;
const int CLK_LOWER = 100;
const int CLK_UPPER = CLK_LOWER + DUR;
int(CLK_LOWER..CLK_UPPER) clk;



// -------------------------------------------------------- Actions ---------------------------------------------------------

// For keeping parallel processes synced
action tick;
action tock;



// ------------------------------------------------------- Functions --------------------------------------------------------

// Calculate length of list
function int len(buffer option ls) = if ls == none then 0 else 1 + len(ls!.tl);

// Get the mirror direction
function int getDestinationDirection(int dir) =
	if dir == NORTH then SOUTH
	else if dir == WEST then EAST
	else if dir == EAST then WEST
	else if dir == SOUTH then NORTH
	else -1;

// Get the id of the first router in this row
function int firstInRow(int id) =
	if noc[id].ids[WEST] == -1 then id
	else firstInRow(noc[id].ids[WEST]);

// Get the id of the last router in this row
function int lastInRow(int id) =
	if noc[id].ids[EAST] == -1 then id
	else lastInRow(noc[id].ids[EAST]);

// Tell if the buffer is full
function bool isBufferFull(int id, int dir) = len(noc[id].channels[dir].buffer) >= BUFFER_LENGTH;

// Return the front of the queue
function int peekFront(buffer option ls) =
	if ls == none then -1
	else if ls!.tl == none then ls!.hd
	else peekFront(ls!.tl);

// Add a flit to the buffer
function buffer option enqueue(int n, buffer option ls) =
	if len(ls) == BUFFER_LENGTH then ls
	else some(buffer {
		hd: n,
		tl: ls
	});

// Remove a flit from the buffer
function buffer option dequeue(buffer option ls) =
	if ls == none then none
	else if	ls!.tl == none then none
	else some(buffer {
		hd: ls!.hd,
		tl: dequeue(ls!.tl)
	});



// ------------------------------------------------------- Processes --------------------------------------------------------

// Send flit to northern router. src and dst are channels (ie NORTH, WEST, EAST, SOUTH, LOCAL), NOT the actual router ids!
process Send(int id, int src, int dir){
	// We want to chech the final destination buffer of the router we are headed into, to see if it is full
	int(-1..3) dst;
	{=
		// A flit going from router 0 to router 1 leaves 0 from the SOUTH and enters 1 from the NORTH.
		dst = getDestinationDirection(dir)
	=};

	if(!isBufferFull(noc[id].ids[dir], dst)){
		{=
			// Add flit to destination buffer
			noc[noc[id].ids[dir]].channels[dst].buffer =
				enqueue(peekFront(noc[id].channels[src].buffer), noc[noc[id].ids[dir]].channels[dst].buffer),
			// Remove it from the source buffer
			noc[id].channels[src].buffer = dequeue(noc[id].channels[src].buffer)
		=}
	}
	else{
		tau
	}
}

// Create new flits
process GenerateFlits(int id){
	// Only execute
	if((clk % INJECTION_RATE_DENOMINATOR) < INJECTION_RATE_NUMERATOR){
		// Index for destination router
		int(0..(NOC_MAX_ID - 1)) index;

		// #MODULARIZE by adding probabilities for additional routers
		// Note: index must always be 1 less than NOC_MAX_ID
		palt{
				:(1/NOC_MAX_ID): {= index = 0 =}
				:(1/NOC_MAX_ID): {= index = 1 =}
				:(1/NOC_MAX_ID): {= index = 2 =}
		};

		// Add the new flit to our local buffer so that the destination is never ourself
		if(index >= id){
			{=
				noc[id].channel_local.buffer = enqueue(some(buffer {hd: index + 1, tl: noc[id].channel_local.buffer}))
			=}
		}
		else{
			{=
				noc[id].channel_local.buffer = enqueue(some(buffer {hd: index, tl: noc[id].channel_local.buffer}))
			=}
		}
	}
	else {tau}
}

// Move the flit to the next queue in the destination chain
process AdvanceFlits(int id){
	// TODO: adjust for priority

	// If flit needs to stay on this row
	if(noc[id].flits[0].id_destination >= firstInRow(id) && noc[id].flits[0].id_destination <= lastInRow(id)){
		// Send it west
		if(noc[id].flits[0].id_destination < id){
			SendWest(id, 0);
		}
		// Or send it east
		else{
			SendEast(id, 0);
		}
	}
	// If flit needs to go north
	else if(noc[id].flits[0].id_destination < id){
		SendNorth(id, 0);
	}
	// Else flit needs to go south
	else{
		SendSouth(id, 0);
	}
}

// Remove flits who match this routers id
process ResolveFlits(){
	// TODO: add method
}

// For syncing parallell processes
process Clock(){}
	tick {=
		clk++
	=};
	if (clk <= CLK_UPPER) {
	   Clock()
	}
	else {
	   stop
	}
}

// Process for Arbiter 1
process Arbiter(int id, int id_north, int id_west, buffer id_east, buffer id_south){
	// Initialize
	{=
	channel temp = some(channel {priority: 0}),
	noc[id] = some(router[] {channel_local: temp, channel_north: temp, channel_west: temp, channel_east: temp, channel_south: temp,
		id_north: id_north, id_west: id_west, id_east: id_east, id_south: id_south})
	=}

	// Run
	do{
		tick;

		// Send the flits and update priorities
		AdvanceFlits(id);

		tock;

		// Remove flits that have reached their destinations
		ResolveFlits(id);

		// Generate new flits
		GenerateFlits(id);

		if(clk>=clkUpper){
			stop
		}
		else{
			tau
		}
	}
}



// ------------------------------------------------------- Execution --------------------------------------------------------

par{
::	Clock()
// #MODULARIZE by adding new arbiter processes for any additional routers
::  Arbiter(0, none, none, 1, 2)
::  Arbiter(1, none, 0, none, 3)
::  Arbiter(2, 0, none, 3, none)
::  Arbiter(3, 1, 2, none, none)
}
