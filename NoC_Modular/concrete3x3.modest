option "dtmc";

/***************************************************************************************************
 * This is a modularized version of the concrete model for NoC model verification.
 *
 * Current NoC router IDs
 *	0 - 1 - 2
 *	|   |   |
 *	3 - 4 - 5
 *  |   |   |
 *  6 - 7 - 8
 *
 * In order to add routers to the NoC visit all coments labled with #MODULARIZE
 *
 * Editors: Jonah Boe
 * Commentor: Nick Waddoups (nick.waddoups@usu.edu)
 * Date: July 21, 2023
 * Designed using: The Modest Toolset (www.modestchecker.net), version v3.1.182-g3d5d3ecdf.
 **************************************************************************************************/

//---Customizable Parameters/Variables-------------------------------------------------------------

/* NOC_MAX_ID:
sets the number of routers. To determine NOC_MAX_ID take the number of routers and subtract one.
Note that there must be a square number of routers, e.g. the NoC must be made up of n x n
routers. (NOC_MAX_ID = n^2 - 1) */
const int NOC_MAX_ID = 8;

/*	BUFFER_LENGTH:
sets the length of the buffer in each router. There are five total buffers in each router, one
for each cardinal direction and an internal buffer. */
const int BUFFER_LENGTH = 4;

/*	ACTIVITY_THRESH (activity threshold):
the number of buffers a router must service before noise will be incremented. For resistive
the ACTIVITY_THRESH represents the total number of routers serviced in a clock cycle while
for inductive noise it is the change in number of routers serviced from one clock cycle to the
next. This number is inclusive, meaning that if ACTIVITY_THRESH = 3, there must be an activity
of 4 to be over the threshold. */
const int ACTIVITY_THRESH = 3; // inclusive

/* FLIT INJECTION RATE:
The flit injection rate is determined by the injection rate fraction (numerator/demoninator). 
This rate currently means that for the first numerator of denominator clock cycles flits will
be injected. If the numerator = 3 and denominator = 10 this means that the first 3 clock cycles
out of 10 will have flits injected into them. */
const int INJECTION_RATE_NUMERATOR = 3;
const int INJECTION_RATE_DENOMINATOR = 10;

/* CLK_UPPER (upper clock limit):
This is the number of cycles that will run before quitting the simulation. */
const int CLK_UPPER = 3;


// #CUSTOMIZE this is the upper threshoold for noise detected in the system
const int RESISTIVE_NOISE_THRESH = 1;
const int INDUCTIVE_NOISE_THRESH = 1;

//---Internal Variables----------------------------------------------------------------------------

// MODEST language method for creating an array
// syntax: array(iterator, num_iterations, datatype)
// example: car[] lot = array(i, 100, car(id:i))
router[] noc = array(i, NOC_MAX_ID + 1, router{});

// keeps track of the clock cycles and is updated on every tick action
int clk = 0;

// These are for tracking resistive and inductive noise and must be initialized to 0.
int resistiveNoise = 0;
int inductiveNoise = 0;

// These values are enumerations and are NOT to be changed
const int NORTH = 0;
const int WEST = 1;
const int EAST = 2;
const int SOUTH = 3;
const int LOCAL = 4;



//---Datatypes-------------------------------------------------------------------------------------

/* buffer:
Represents an N-dimensional buffer, essentially implemented as a linked list because of the
functional nature of modest. */
datatype buffer = {
	int(0..NOC_MAX_ID) hd,
	buffer option tl
};

/* channel:
A channel is a buffer with extra flags, the flags are as follows:
	1. serviced: marks if the buffer has been serviced this cycle.
	2. isEmpty: the buffer is empty
	3. isFull: the buffer is full
A router will have 5 channels, one for each direction and an internal channel.*/
datatype channel = {
	buffer option buffer,
	bool serviced,
	bool isEmpty,
	bool isFull
};

/* router:
A router contains 5 channels and several flags. */
datatype router = {
	channel[] channels,
	int(-1..NOC_MAX_ID)[] ids,
	int(0..4)[] priority_list,
	int(0..4)[] priority_list_temp,
	int(0..4) serviced_index,
	int(0..4) unserviced_index,
	int(0..5) total_unserviced,
	int thisActivity,
	int lastActivity,
	bool[] used // NOTE: Determines which channels are used. Could be moved to be a propertie of each individual channel
};



//---Properties------------------------------------------------------------------------------------

// MODEST NOTE: Modest will model check this and produce a probability

property resistiveNoiseProbability = Pmax(<> (resistiveNoise >= RESISTIVE_NOISE_THRESH));
property inductiveNoiseProbability = Pmax(<> (inductiveNoise >= INDUCTIVE_NOISE_THRESH));



//---Actions---------------------------------------------------------------------------------------

// For keeping parallel processes synced
action tick;
action tock;



//---Functions-------------------------------------------------------------------------------------

/* len:
Calculates the length of a buffer. Since buffers do not have a set, static size length checks
must be performed recursively. Calculates the length by recursively checking if there is a
following value or not after the currently value. */
function int len(buffer option ls) = if ls == none then 0 else 1 + len(ls!.tl);

/* isBufferFull:
Returns true if the buffer is full. Length of buffer ls is checked against the max buffer
length, BUFFER_LENGTH. */
function bool isBufferFull(buffer option ls) = len(ls) >= BUFFER_LENGTH;

/* getDestinationChannel:
Takes the channel that the flit is leaving through and gets the channel that the flit will be
arriving in. For example, if a flit leaves to the north of a router, it will arrive at the south
of the receiving router. */
function int getDestinationChannel(int dir) =
	if dir == NORTH then SOUTH
	else if dir == WEST then EAST
	else if dir == EAST then WEST
	else if dir == SOUTH then NORTH
	else -1;

/* getColumnShift:
given the current router, id, and the destination router, dst, determines the difference in
the x-position of the two routers. Returns negative if flit needs to move to the west, positive
if the flit needs to move to the east, and zero if the flits are in the same x-column. */
function int getColumnShift(int id, int dst) =
(dst % ((int)sqrt(NOC_MAX_ID + 1))) - (id % ((int)sqrt(NOC_MAX_ID + 1))); // NOTE: difference between current router x loc and destination router x loc

// Return the front of the queue
function int peekFront(buffer option ls) =
	if ls == none then -1
	else if ls!.tl == none then ls!.hd
	else peekFront(ls!.tl);

// Add a flit to the buffer
function buffer option enqueue(int n, buffer option ls) =
	if len(ls) == BUFFER_LENGTH then ls
	else some(buffer {
		hd: n,
		tl: ls
	});

// Remove a flit from the buffer
function buffer option dequeue(buffer option ls) =
	if ls == none then none
	else if ls!.tl == none then none
	else some(buffer {
		hd: ls!.hd,
		tl: dequeue(ls!.tl)
	});



// ------------------------------------------------------- Processes --------------------------------------------------------

process GenerateFlits(int id){
	int(0..NOC_MAX_ID) destination;
	if((clk % INJECTION_RATE_DENOMINATOR) < INJECTION_RATE_NUMERATOR){
		// Determine a destiantion
		//palt{
			// #MODULARIZE by adding a probability for (NOC_MAX_ID - 1) destinations.
			// #CUSTOMIZE by changing the flit injection pattern. Check router IDs with if-else blocks to make more router specific changes.
		//	:(1/8): {= destination = 0 =}
		//	:(1/8): {= destination = 1 =}
		//	:(1/8): {= destination = 2 =}
		//	:(1/8): {= destination = 3 =}
		//	:(1/8): {= destination = 4 =}
		//	:(1/8): {= destination = 5 =}
		//	:(1/8): {= destination = 6 =}
		//	:(1/8): {= destination = 7 =}
		//};
		{= 
			destination = DiscreteUniform(0, NOC_MAX_ID - 1) 
		=};

		// Make sure it is not this router and add it to the local buffer.
		if(destination >= id){
			{=
				noc[id].channels[LOCAL].buffer = enqueue(destination + 1, noc[id].channels[LOCAL].buffer)
			=}
		}
		else{
			{=
				noc[id].channels[LOCAL].buffer = enqueue(destination, noc[id].channels[LOCAL].buffer)
			=}
		}
	}
	else {
		tau
	}
}

process PrepChannel(int id, int ch){
	if(len(noc[id].channels[ch].buffer) == 0){
		{=
			noc[id].channels[ch].isEmpty = true
		=}
	}
	else{
		{=
			noc[id].channels[ch].isEmpty = false
		=}
	};
	if(isBufferFull(noc[id].channels[ch].buffer)){
		{=
			noc[id].channels[ch].isFull = true
		=}
	}
	else{
		{=
			noc[id].channels[ch].isFull = false
		=}
	}
}

process PrepRouter(int id){
	PrepChannel(id, 0);
	PrepChannel(id, 1);
	PrepChannel(id, 2);
	PrepChannel(id, 3);
	PrepChannel(id, 4)
}

// Send flit to northern router. src and dst are channels (ie NORTH, WEST, EAST, SOUTH, LOCAL), NOT the actual router ids!
process Send(int id, int ch, int dir){
	// We want to chech the final destination buffer of the router we are headed into, to see if it is full
	int(-1..3) dst;
	{=
		// A flit going from router 0 to router 1 leaves 0 from the SOUTH and enters 1 from the NORTH.
		dst = getDestinationChannel(dir)
	=};

	// If the destination is not full, and the channel has not been used in this cycle, then service the buffer
	if(!noc[noc[id].ids[dir]].channels[dst].isFull && !noc[id].used[dir]){
		{=
			// First, add flit to destination buffer
			0: noc[noc[id].ids[dir]].channels[dst].buffer =
				enqueue(peekFront(noc[id].channels[ch].buffer), noc[noc[id].ids[dir]].channels[dst].buffer),
			
			// Then, remove it from the source buffer
			1: noc[id].channels[ch].buffer = dequeue(noc[id].channels[ch].buffer),
			
			// Mark that output as used and that channel as serviced
			1: noc[id].used[dir] = true,
			1: noc[id].channels[ch].serviced = true,
			
			// Incrament the count for buffers serviced in this cycle
			1: noc[id].thisActivity++
		=}
	}
	// Otherwise, increment total unserviced buffers and set resistive noise to false
	else{
		{=
			noc[id].total_unserviced++
		=}
	}
}

// Advance flits to respective buffers
process AdvanceFlits(int id, int ch){
	// If flit needs to stay on this row
	if(getColumnShift(id, peekFront(noc[id].channels[ch].buffer)) == 0){
		// Send it north
		if(peekFront(noc[id].channels[ch].buffer) < id){
			Send(id, ch, NORTH)
		}
		// Or send it south
		else{
			Send(id, ch, SOUTH)
		}
	}
	// Else, if flit needs to go west
	else if(getColumnShift(id, peekFront(noc[id].channels[ch].buffer)) < 0){
		Send(id, ch, WEST)
	}
	// Else, flit needs to go east
	else{
		Send(id, ch, EAST)
	}
}

// Update a specific channel
process AdvanceChannel(int id, int ch){
	// If this channel was not assigned a neighbor...
	if(ch != 4 && noc[id].ids[ch] == -1){
		{=
			// Mark the channel as serviced
			noc[id].channels[ch].serviced = true
		=}
	}
	// If this channel was assigned a neighbor or is local, but it is empty...
	else if(noc[id].channels[ch].isEmpty == true){
		{=
			// Mark the channel as serviced
			noc[id].channels[ch].serviced = true
		=}
	}
	// If the flit at this channel has the same ID as this router...
	else if(peekFront(noc[id].channels[ch].buffer) == id){
		{=
			// Mark the channel as serviced
			noc[id].channels[ch].serviced = true,

			// Incrament the count for buffers serviced in this cycle
			noc[id].thisActivity++,

			// Remove this flit. It has reached its destination
			noc[id].channels[ch].buffer = dequeue(noc[id].channels[ch].buffer)
		=}
	}

	// Otherwise, the flit must be for another router
	else{
		AdvanceFlits(id, ch)
	}
}

// Update the directions of the next flits in the buffers
process AdvanceRouter(int id){
	AdvanceChannel(id, noc[id].priority_list[0]);
	AdvanceChannel(id, noc[id].priority_list[1]);
	AdvanceChannel(id, noc[id].priority_list[2]);
	AdvanceChannel(id, noc[id].priority_list[3]);
	AdvanceChannel(id, noc[id].priority_list[4])
}

process UpdatePriorityList(int id, int i){
	if(noc[id].channels[noc[id].priority_list[i]].serviced){
		{=
			0: noc[id].priority_list_temp[noc[id].total_unserviced + noc[id].serviced_index] = noc[id].priority_list[i],
			1: noc[id].serviced_index++
		=}
	}
	else{
		{=
			0: noc[id].priority_list_temp[noc[id].unserviced_index] = noc[id].priority_list[i],
			1: noc[id].unserviced_index++
		=}
	}
}

// Update priority list
process UpdatePiority(int id){
	// Reset all of the temp values
	{=
		noc[id].priority_list_temp = [0, 0, 0, 0, 0],
		noc[id].serviced_index = 0,
		noc[id].unserviced_index = 0
	=};
	// Update the ordering of priorities in the lists
	UpdatePriorityList(id, 0);
	UpdatePriorityList(id, 1);
	UpdatePriorityList(id, 2);
	UpdatePriorityList(id, 3);
	UpdatePriorityList(id, 4);

	{=
		// Make our next priority list the current priority list
		noc[id].priority_list = noc[id].priority_list_temp,

		// Reset the used and serviced variables
		noc[id].channels[0].serviced = false,
		noc[id].channels[1].serviced = false,
		noc[id].channels[2].serviced = false,
		noc[id].channels[3].serviced = false,
		noc[id].channels[4].serviced = false,
		noc[id].total_unserviced = 0,
		noc[id].used = [false, false, false, false]
	=}
}

// Update the noise tracking variables for this router.
process UpdateNoiseTracking(int id){
	// Update inductive noise
	if (abs(noc[id].lastActivity - noc[id].thisActivity) >= ACTIVITY_THRESH) {
		{=
			inductiveNoise++
		=}
	}
	else{
		tau
	};
	// Update resistive noise
	if(noc[id].thisActivity >= ACTIVITY_THRESH){
		{=
			resistiveNoise++
		=}
	}
	else{
		tau
	};

	// Update trackers for next round
	{=
		0: noc[id].lastActivity = noc[id].thisActivity,
		1: noc[id].thisActivity = 0
	=}
}

// Process for behavior
process RouterBehavior(int id, int id_north, int id_west, int id_east, int id_south){
	// Initialize the router
	{=
		noc[id] = router {
			channels: [
				channel {serviced: false, isEmpty: false},
				channel {serviced: false, isEmpty: false},
				channel {serviced: false, isEmpty: false},
				channel {serviced: false, isEmpty: false},
				channel {serviced: false, isEmpty: false}],
			ids: [id_north, id_west, id_east, id_south],
			priority_list: [NORTH, EAST, SOUTH, WEST, LOCAL],
			total_unserviced: 0,
			used: [false, false, false, false],
			thisActivity: 0,
			lastActivity: 0
		}
	=};

	// Run
	do{
		tick;
		// Generate new flits
		GenerateFlits(id);
		// Determine what channels will send this cycle
		PrepRouter(id);

		tock;
		// Send the flits
		AdvanceRouter(id);
		// Update the priority list
		UpdatePiority(id);
		// Update resistive and inductive values
		UpdateNoiseTracking(id);

		if(clk >= CLK_UPPER){ // NOTE: Does not match Clock() process which contains clk <= CLK_UPPER
			stop
		}
		else{
			tau
		}
	}
}

// For syncing parallell processes
process Clock(){
	tick {= clk++ =};
	if (clk <= CLK_UPPER) { // NOTE: Does not match RouterBehavior(), but it's okay because of placement
	Clock()
	}
	else {
	stop
	}
}



// ------------------------------------------------------- Execution --------------------------------------------------------

// These processes are run concurrently and kept in sync by tick and tock.
par{
	::	Clock()
	// #MODULARIZE by adding new arbiter processes for any additional routers.
	//	0 - 1 - 2
	//	|   |   |
	//	3 - 4 - 5
	//  |   |   |
	//  6 - 7 - 8
	:: RouterBehavior(0, -1, -1,  1,  3)
	:: RouterBehavior(1, -1,  0,  2,  4)
	:: RouterBehavior(2, -1,  1, -1,  5)
	:: RouterBehavior(3,  0, -1,  4,  6)
	:: RouterBehavior(4,  1,  3,  5,  7)
	:: RouterBehavior(5,  2,  4, -1,  8)
	:: RouterBehavior(6,  3, -1,  7, -1)
	:: RouterBehavior(7,  4,  6,  8, -1)
	:: RouterBehavior(8,  5,  7, -1, -1)
}
