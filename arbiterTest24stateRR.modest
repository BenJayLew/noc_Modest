datatype buffer = {int(-1..3) val, int(0..3) id, bool serviced, int(0..3) priority, int timesServiced};		//Datatype for a buffer with the next buffer value, id of the buffer, whether the buffer was serviced last clock cycle or not, and the priority number of the buffer
int(0..2) unserviced;		//Number of unserviced buffers, iterates down when unserviced buffer's priority is set
int(0..2) totalUnserviced;	//Total number of unserviced buffers in a clock cycle
int(0..(clkUpper-clkLower)*4) totalServiced = 0;
int(0..(clkUpper-clkLower)) optimalRuns = 0;
const int clkLower = 100; 
const int clkUpper = 104;
int(clkLower..clkUpper) clk;

int(0..3) RRset = 3;

int(0..24) state = 0; 		//0-0, 1-1a, 2-1b, 3-1c, 4-3a, 5-3b, 6-2a, 7-2b, 8-2c, 9-2d, 10-2e, 11-2f, 12-2g
int(0..24) pstate = 0;

buffer north, east, south, west;

buffer[] a; // = [north, east, south, west]; 	//Array of the four buffers. a[0] is the highest priority
buffer[] temp;		//Temporary buffer used to update buffer a

action tick;

// ------ Begin: properties ---------
//property Pr1 = Pmax(<> (clk >= clkUpper));

property TotalServiced = Pmax(<> (totalServiced >= ((clkUpper-clkLower)*3)));		//Probablility that the arbiter servieces at least 15 buffers out of a possible 20. probablity the arbiter is at least 75% efficient

//1 clock cycle

//from state 0
/*
property State0 = Pmax(<> ((clk >= clkUpper) && (state == 0)));
property State1a = Pmax(<> ((clk >= clkUpper) && (state == 1)));
property State1b = Pmax(<> ((clk >= clkUpper) && (state == 2)));
property State1c = Pmax(<> ((clk >= clkUpper) && (state == 3)));
property State3a = Pmax(<> ((clk >= clkUpper) && (state == 4)));
property State3b = Pmax(<> ((clk >= clkUpper) && (state == 5)));
property State2a = Pmax(<> ((clk >= clkUpper) && (state == 6)));
property State2b = Pmax(<> ((clk >= clkUpper) && (state == 7)));
property State2c = Pmax(<> ((clk >= clkUpper) && (state == 8)));
property State2d = Pmax(<> ((clk >= clkUpper) && (state == 9)));
property State2e = Pmax(<> ((clk >= clkUpper) && (state == 10)));
property State2f = Pmax(<> ((clk >= clkUpper) && (state == 11)));
property State2g = Pmax(<> ((clk >= clkUpper) && (state == 12)));
property State03 = Pmax(<> ((clk >= clkUpper) && (state == 13)));
property State1a3 = Pmax(<> ((clk >= clkUpper) && (state == 14)));
property State1b3 = Pmax(<> ((clk >= clkUpper) && (state == 15)));
property State1c3 = Pmax(<> ((clk >= clkUpper) && (state == 16)));
property State3a3 = Pmax(<> ((clk >= clkUpper) && (state == 17)));
property State3b3 = Pmax(<> ((clk >= clkUpper) && (state == 18)));
property State02 = Pmax(<> ((clk >= clkUpper) && (state == 19)));
property State1a2 = Pmax(<> ((clk >= clkUpper) && (state == 20)));
property State1b2 = Pmax(<> ((clk >= clkUpper) && (state == 21)));
property State1c2 = Pmax(<> ((clk >= clkUpper) && (state == 22)));
property State01 = Pmax(<> ((clk >= clkUpper) && (state == 23)));
property State00 = Pmax(<> ((clk >= clkUpper) && (state == 24)));
*/
//2 clock cycles

// from state 1a 


property State1a_0 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 0)));
property State1a_1a = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 1)));
property State1a_1b = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 2)));
property State1a_1c = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 3)));
property State1a_3a = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 4)));
property State1a_3b = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 5)));
property State1a_2a = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 6)));
property State1a_2b = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 7)));
property State1a_2c = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 8)));
property State1a_2d = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 9)));
property State1a_2e = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 10)));
property State1a_2f = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 11)));
property State1a_2g = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 12)));
property State1a_03 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 13)));
property State1a_1a3 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 14)));
property State1a_1b3 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 15)));
property State1a_1c3 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 16)));
property State1a_3a3 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 17)));
property State1a_3b3 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 18)));
property State1a_02 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 19)));
property State1a_1a2 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 20)));
property State1a_1b2 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 21)));
property State1a_1c2 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 22)));
property State1a_01 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 23)));
property State1a_00 = Pmax(<> ((clk >= clkUpper) && (pstate == 0) && (state == 24)));


// ------ End: properties ---------

process Clock(){	
	/*
	do {
	tick
	}
	*/
	tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	}   
	
}


//Main process for the arbiter -------------------------------------------------------------------------------------------------------------------------------------------------
process Arbiter(){
	initialize();
	
	//runtime loop
	do {
		
		//Service buffers-------------------------------------------------------------------------------------------------------
		
		//Buffer priority 0
		//<Service Buffer a[0]>--------------------------------------------------------
		{= 
		a[0].timesServiced++,
		a[0].serviced = true 
		=};
		
		//<Service buffer <a[1]> ------------------------------------------------------
		if(a[1].val != -1 && a[1].val == a[0].val) {			//If buffer a[1] conflicts with a[0]
			{= 
			a[1].serviced = false,
			unserviced++ 		//Increment unserviced
			=}
		}
		else {
			{= 
			a[1].timesServiced++,		//Service Buffer
			a[1].serviced = true 
			=}
		};
		
		//<Service buffer a[2]> --------------------------------------------------------
		//If buffer a[2] conflicts with a[1] or a[0]
		if(a[2].val != -1 && (a[2].val == a[1].val || a[2].val == a[0].val)){	
			{= 
			a[2].serviced = false, 
			unserviced++			//Increment unserviced
			=}
		}
		else {
			{= 
			a[2].timesServiced++,		//Service Buffer
			a[2].serviced = true 
			=}
		};
		
		//<Service buffer a[3]> ---------------------------------------------------------
		//If buffer a[3] conflicts with a[2], a[1], or a[0]
		if(a[3].val != -1 &&  (a[3].val == a[2].val || a[3].val == a[1].val || a[3].val == a[0].val)){	
			{= 
			a[3].serviced = false,
			unserviced++ 			//Increment unserviced
			=}
		}
		else {
			{= 
			a[3].timesServiced++,		//Service Buffer
			a[3].serviced = true 
			=}
		};
		
		/*
		{= 
		totalUnserviced = unserviced,
		totalServiced = totalServiced + 4 - unserviced
		=};
		*/
		{= pstate = state =};
		
		//Increment optimal runs if there were no conflitcs -------------------------------------------------------------------
		
		if(unserviced == 0) {
			{= 
			optimalRuns++,
			totalUnserviced = unserviced,
			totalServiced = totalServiced + 4 - unserviced
			=}
		}
		else{
			{= 
			totalUnserviced = unserviced,
			totalServiced = totalServiced + 4 - unserviced
			=}
		};
		
		
		
		//Set priority values for the next run and update the value of the buffers----------------------------------------------
		setPriority(0);
		setPriority(1);
		setPriority(2);
		setPriority(3);
		
		
		if(a[0].id == clk % 4){
			{= RRset = a[0].priority =}
		}
		else if(a[1].id == clk % 4){
			{= RRset = a[1].priority =}
		}
		else if(a[2].id == clk % 4){
			{= RRset = a[2].priority =}
		}
		else{
			{= RRset = a[3].priority =}
		};
		
		resetPriority(0);
		resetPriority(1);
		resetPriority(2);
		resetPriority(3);
		
		
		//Rewrite buffer array with new priority values-------------------------------------------------------------------------
		{= 
		temp[a[0].priority] = a[0],
		temp[a[1].priority] = a[1],
		temp[a[2].priority] = a[2],
		temp[a[3].priority] = a[3]
		=};
		
		{= a = temp =};
		
		
		//set state variable
		if(a[0].val != -1 && a[1].val != -1 && a[2].val != -1 && a[3].val != -1){
			if(totalUnserviced == 0){			//0
				{= state = 0 =}
			}
			else if(totalUnserviced == 1){
				if(a[0].val == a[1].id){		//1a
					{= state = 1 =}
				}
				else if(a[0].val == a[2].id){	//1b
					{= state = 2 =}
				}
				else if(a[0].val == a[3].id){	//1c
					{= state = 3 =}
				}
				else { tau }
			}
			else if (totalUnserviced == 2){ 
				if(a[0].val == a[1].val){		//3
					if(a[0].val == a[2].id){	//3a
						{= state = 4 =}
					}
					else {						//3b
						{= state = 5 =}
					}
				}
				else{													//2
					if(a[0].val == a[1].id && a[1].val == a[0].id){		//2a
						{= state = 6 =}		
					}
					else if(a[0].val == a[2].id && a[1].val == a[3].id){	//2b
						{= state = 7 =} 
					}
					else if(a[0].val == a[3].id && a[1].val == a[2].id){	//2c
						{= state = 8 =}
					}
					else if (a[0].val == a[1].id && a[1].val == a[2].id){		//2d
						{= state = 9 =}
					}
					else if(a[0].val == a[1].id && a[1].val == a[3].id){		//2e
						{= state = 10 =}
					}
					else if(a[0].val == a[2].id && a[1].val == a[0].id){		//2f
						{= state = 11 =}
					}
					else {													//2g
						{= state = 12 =}
					}
				}
			}
			else { tau }
		}
		else if((a[0].val == -1 && a[1].val != -1 && a[2].val != -1 && a[3].val != -1) || 
				(a[0].val != -1 && a[1].val == -1 && a[2].val != -1 && a[3].val != -1) || 
				(a[0].val != -1 && a[1].val != -1 && a[2].val == -1 && a[3].val != -1) || 
				(a[0].val != -1 && a[1].val != -1 && a[2].val != -1 && a[3].val == -1)){
			if(totalUnserviced == 0){
				{= state = 13 =}	//03
			}
			else if(totalUnserviced == 1){
				if(a[0].val == a[1].id){		//1a3
					{= state = 14 =}
				}
				else if(a[0].val == a[2].id){	//1b3
					{= state = 15 =}
				}
				else if(a[0].val == a[3].id){	//1c3
					{= state = 16 =}
				}
				else { tau }
			}
			else if (totalUnserviced == 2){ 	//3
					if(a[0].val == a[2].id){	//3a3
						{= state = 17 =}
					}
					else {						//3b3
						{= state = 18 =}
					}
			}
			else {tau}
		}
		else if((a[0].val == -1 && a[1].val == -1 && a[2].val != -1 && a[3].val != -1) || 
				(a[0].val == -1 && a[1].val != -1 && a[2].val == -1 && a[3].val != -1) || 
				(a[0].val == -1 && a[1].val != -1 && a[2].val != -1 && a[3].val == -1) || 
				(a[0].val != -1 && a[1].val == -1 && a[2].val == -1 && a[3].val != -1) || 
				(a[0].val != -1 && a[1].val == -1 && a[2].val != -1 && a[3].val == -1) || 
				(a[0].val != -1 && a[1].val != -1 && a[2].val == -1 && a[3].val == -1)){
			if(totalUnserviced == 0){
				{= state = 19 =}	//02
			}
			else if(totalUnserviced == 1){
				if(a[0].val == a[1].id){		//1a2
					{= state = 20 =}
				}
				else if(a[0].val == a[2].id){	//1b2
					{= state = 21 =}
				}
				else if(a[0].val == a[3].id){	//1c2
					{= state = 22 =}
				}
				else { tau }
			}
			else{tau}
		}
		else if((a[0].val == -1 && a[1].val == -1 && a[2].val == -1 && a[3].val != -1) || 
				(a[0].val == -1 && a[1].val == -1 && a[2].val != -1 && a[3].val == -1) || 
				(a[0].val == -1 && a[1].val != -1 && a[2].val == -1 && a[3].val == -1) || 
				(a[0].val != -1 && a[1].val == -1 && a[2].val == -1 && a[3].val == -1)){
					
					{= state = 23 =}		//01
		}
		else {
			{= state = 24 =}		//00
		};
		
		
		updateValue(0);
		updateValue(1);
		updateValue(2);
		updateValue(3);
		
		tick;
		
		if (clk >= clkUpper) {
			stop
		}
		else {
			tau
		}
		
		
	}
}

//initialize values -------------------------------------------------------------------------------------------------------------------------------------------------------------
process initialize(){
	{= 
	a = [north, east, south, west],
	temp = [north, east, south, west], 
	
	a[0].id = 0, 
	a[1].id = 1, 
	a[2].id = 2, 
	a[3].id = 3,  
	
	
	a[0].val = (DiscreteUniform(2, 5) % 5) - 1,
	a[1].val = ((DiscreteUniform(2, 5) + 1) % 5) - 1,
	a[2].val = ((DiscreteUniform(2, 5) + 2) % 5) - 1,
	a[3].val = DiscreteUniform(-1, 2),
	
	/*
	a[0].val = 1,
	a[1].val = 2,
	a[2].val = 1,
	a[3].val = 0,
	*/
	
	unserviced = 0
	=}

	
}

//Sets the new priority value of buffer a[i] and updates the value if the buffer was serviced ------------------------------------------------------------------------------------
process setPriority(int i){
	if (a[i].serviced == true){
		//{= a[i].val = ((DiscreteUniform(2, 5) + a[i].id) % 5) - 1 =}	
		//Update value	
	
		{=
		a[i].priority = i + unserviced 						//Set new priority
		=}
		//<update buffer value and dequeue buffer>
	}
	else {
		{= 
		a[i].priority = totalUnserviced - unserviced ,		//Set new priority
		unserviced-- 						//decrement unserviced
		=}
	}
}

process updateValue(int i){
	if (a[i].serviced == true){
		{= a[i].val = ((DiscreteUniform(2, 5) + a[i].id) % 5) - 1 =}
	}
	else {tau}
}
process resetPriority(int i){
	if(a[i].priority == RRset){
		{= 
		a[i].priority = 0 
		=}
	}
	else if(a[i].priority < RRset){
		{=
		a[i].priority ++
		=}
	}
	else{tau}
}


par{
::	Clock()
::	Arbiter()
}