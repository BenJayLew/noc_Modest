const int BUFFERLENGTH = 4;
const int clkLower = 100; 
const int clkUpper = 104;
int(clkLower..clkUpper) clk;

datatype intlist = { int hd, intlist option tl };

datatype buffer = {int(-1..3) val, int(0..3) id, bool serviced, int(0..3) priority, int(0..(clkUpper-clkLower)) timesServiced};		//Datatype for a buffer with the next buffer value, id of the buffer, whether the buffer was serviced last clock cycle or not, and the priority number of the buffer
int(0..3) unserviced;		//Number of unserviced buffers, iterates down when unserviced buffer's priority is set
int(0..3) totalUnserviced;	//Total number of unserviced buffers in a clock cycle
int(0..((clkUpper-clkLower)*4)) totalServiced = 0;
int(0..(clkUpper-clkLower)) optimalRuns = 0;

int(-1..3) v;

/*
intlist option northB = some(intlist { hd: 1, tl: none });
intlist option eastB = some(intlist { hd: 2, tl: none });
intlist option southB = some(intlist { hd: 3, tl: none });
intlist option westB = some(intlist { hd: 0, tl: none });
*/

intlist option northB = none;
intlist option eastB = none;
intlist option southB = none;
intlist option westB = none;


buffer north, east, south, west;

buffer[] a; 	//Array of the four buffers. a[0] is the highest priority
buffer[] temp;		//Temporary buffer used to update buffer a


action tick;

// ------ Begin: properties ---------
property Pr1 = Pmax(<> (clk >= clkUpper));

property TotalServiced = Pmax(<> (totalServiced >= ((clkUpper-clkLower)*3)));		//Probablility that the arbiter servieces at a 75% efficiency

/*
property northServiced = Pmax(<> (north.timesServiced >= 3));
property eastServiced = Pmax(<> (east.timesServiced >= 3));
property southServiced = Pmax(<> (south.timesServiced >= 3));
property westServiced = Pmax(<> (west.timesServiced >= 3));
*/

property Runs1 = Pmax(<> (optimalRuns == 1));		//Probablility that there was at least 1 cycle where all buffers were serviced
property Runs2 = Pmax(<> (optimalRuns == 2));		//Probablility that there was at least 2 cycles where all buffers were serviced
property Runs3 = Pmax(<> (optimalRuns == 3));		//Probablility that there was at least 3 cycles where all buffers were serviced
property Runs4 = Pmax(<> (optimalRuns == 4));		//Probablility that there was at least 4 cycles where all buffers were serviced
property Runs5 = Pmax(<> (optimalRuns == 5));		//Probablility that there was at least 5 cycles where all buffers were serviced
// ------ End: properties ---------



// ------ Begin: function definitions ------- 
// Calculate length of list:
function int len(intlist option ls) = if ls == none then 0 else 1 + len(ls!.tl); // "!" accesses the value of a non-empty option (causes an error if the option is empty)

// Return the front of the queue, i.e., the last element of the given integer list. No changes are made to the list.
function int peekFront(intlist option ls) =
	 if ls == none then -1
	 else if ls!.tl == none then ls!.hd
	      else peekFront(ls!.tl);

//Remove the front of the queue, i.e., the last element of the given integer list. Return the modified list. 
function intlist option dequeue(intlist option ls) = 
	if ls == none then none
	else if	ls!.tl == none then none 
		 else some(intlist { hd: ls!.hd, tl: dequeue(ls!.tl) });	

//Insert a new entry n as the head of the list ls. If ls has already reached its capacity before adding n, return ls; otherwise, return modified ls with n as its head. 
function intlist option enqueue(int n, intlist option ls) = 
	if len(ls) == BUFFERLENGTH then ls
	else some(intlist { hd: n, tl: ls });		 
		  
// ------ End: function definitions ------- 



	

process Clock()
{	
	tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	}   
	
}

// -------------------------------------------------------------------- Buffer ------------------------------------------------------------------------------------------------------

//Adds a new random value between 8 and 11 to the buffer
process addBuffer()
{  
	do {
		tick{=
		northB = enqueue(DiscreteUniform(1, 3) , northB),
		eastB = enqueue((DiscreteUniform(1, 3) + 1) % 4, eastB),
		southB = enqueue((DiscreteUniform(1, 3) + 2) % 4, southB),
		westB = enqueue(DiscreteUniform(0, 2), westB)
		=};
		
		if (clk >= clkUpper) {
			stop
		}
		else {
			tau
		}
	}
}

//assigns the tail of the buffer to v and removes the tail of the buffer
process getBuffer(int selection)
{
	if (selection == 0) {
		{= v = peekFront(northB) =};						//See if the states can be reduced!
		{= northB = dequeue(northB) =}
	}
	else if (selection == 1){
		{= v = peekFront(eastB) =};						//See if the states can be reduced!
		{= eastB = dequeue(eastB) =}
	}
	else if (selection == 2){
		{= v = peekFront(southB) =};						//See if the states can be reduced!
		{= southB = dequeue(southB) =}
	}
	else {
		{= v = peekFront(westB) =};						//See if the states can be reduced!
		{= westB = dequeue(westB) =}
	}
}


// ------------------------------------------------------------------- Arbiter ------------------------------------------------------------------------------------------------------

//Main process for the arbiter ---------------------------------------------------------------------------------------------------------------------------------
process Arbiter(){
	initialize();
	
	//runtime loop
	do {
		//Service buffers-------------------------------------------------------------------------------------------------------
		
		//Buffer priority 0
		//<Service Buffer a[0]>--------------------------------------------------------
		{= 
		a[0].timesServiced++,
		a[0].serviced = true 
		=};
		
		//<Service buffer <a[1]> ------------------------------------------------------
		if((a[1].val != -1) && (a[1].val == a[0].val)) {			//If buffer a[1] conflicts with a[0]
			{= 
			a[1].serviced = false,
			unserviced++ 		//Increment unserviced
			=}
		}
		else {
			{= 
			a[1].timesServiced++,		//Service Buffer
			a[1].serviced = true 
			=}
		};
		
		//<Service buffer a[2]> --------------------------------------------------------
		//If buffer a[2] conflicts with a[1] or a[0]
		if((a[1].val != -1) && (a[2].val == a[1].val || a[2].val == a[0].val)){	
			{= 
			a[2].serviced = false, 
			unserviced++			//Increment unserviced
			=}
		}
		else {
			{= 
			a[2].timesServiced++,		//Service Buffer
			a[2].serviced = true 
			=}
		};
		
		//<Service buffer a[3]> ---------------------------------------------------------
		//If buffer a[3] conflicts with a[2], a[1], or a[0]
		if((a[1].val != -1) && (a[3].val == a[2].val || a[3].val == a[1].val || a[3].val == a[0].val)){	
			{= 
			a[3].serviced = false,
			unserviced++ 			//Increment unserviced
			=}
		}
		else {
			{= 
			a[3].timesServiced++,		//Service Buffer
			a[3].serviced = true 
			=}
		};
		
		
		//Increment optimal runs if there were no conflitcs -------------------------------------------------------------------
		if (unserviced == 0){
			{= 
			optimalRuns++,
			totalUnserviced = unserviced,
			totalServiced = totalServiced + 4 - unserviced 
			=}
		}
		else {
			{= 
			totalUnserviced = unserviced,
			totalServiced = totalServiced + 4 - unserviced
			=}
		};
		
		//Set priority values for the next run and update the value of the buffers----------------------------------------------
		setPriority(0);
		setPriority(1);
		setPriority(2);
		setPriority(3);
		
		
		//Rewrite buffer array with new priority values-------------------------------------------------------------------------
		{= 
		temp[a[0].priority] = a[0],
		temp[a[1].priority] = a[1],
		temp[a[2].priority] = a[2],
		temp[a[3].priority] = a[3]
		=};
		
		tick {= a = temp =};
		
		
		if (clk >= clkUpper) {
			stop
		}
		else {
			tau
		}
		
		
	}
}

//initialize values --------------------------------------------------------------------------------------------------------------------------------------------
process initialize(){
	{= 
	a = [north, east, south, west],
	temp = [north, east, south, west], 
	
	a[0].id = 0, 
	a[1].id = 1, 
	a[2].id = 2, 
	a[3].id = 3,  
	
	a[0].val = DiscreteUniform(1, 3),
	a[1].val = (DiscreteUniform(1, 3) + 1) % 4,
	a[2].val = (DiscreteUniform(1, 3) + 2) % 4,
	a[3].val = DiscreteUniform(0, 2),
	
	unserviced = 0
	=}

	
}

//Sets the new priority value of buffer a[i] and updates the value if the buffer was serviced ------------------------------------------------------------------
process setPriority(int i){
	if (a[i].serviced == true){
		getBuffer(i);
		{= 
		a[i].val = v,		//deque buffer
		a[i].priority = i + unserviced 				//Set new priority
		=}
	}
	else {
		{= 
		a[i].priority = totalUnserviced - unserviced,		//Set new priority
		unserviced-- 						//decrement unserviced
		=}
	}
}



par{
::	Clock()
::	Arbiter()
:: 	addBuffer()
}