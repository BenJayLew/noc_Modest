/*
NoC router IDs
	0 - 1 - 2
	|   |   |
	3 - 4 - 5
	|   |   |
	6 - 7 - 8
*/

option "dtmc";

// ------- Begin: Global varables ---------
const int BUFFERLENGTH = 4;
const int NOCSIZE = 3;
const int OPTIMALRUNSMEASURE = 4;
const int INJECTIONRATENUMERATOR = 1;
const int INJECTIONRATEDENOMINATOR = 2;

const int clkLower = 100; 
const int clkUpper = 103;
int(clkLower..clkUpper) clk;
//transient int(0..1) clk;

datatype intlist = { int(0.. ((NOCSIZE*NOCSIZE)-1)) hd, intlist option tl };

datatype buffer = {int(-1..3) dest, int(-1..4) val, int(0..4) id, bool serviced, int(0..4) priority, intlist option buff};		//Datatype for a buffer with the next buffer value, id of the buffer, whether the buffer was serviced last clock cycle or not, and the priority number of the buffer

datatype router = {int(0..3) unserviced, int(0..3) totalUnserviced, buffer[] bufferArray, buffer[] temp, int[]bufferID};	//Datatype for a router, includes router-specific variables and an array of buffers

router r0, r1, r2, r3;

int test = 0;

int(0..5/*(clkUpper - clkLower)*/) optimalRuns0, optimalRuns1, optimalRuns2, optimalRuns3;

router[] noc;

action tick;


// ------ Begin: properties ---------
property Pr1 = Pmax(<> (clk >= clkUpper));
property p1 = Pmax(<>[S(clk)<=(clkUpper-clkLower)] (optimalRuns0 >= 1));
//property optimalRuns0 = Pmax(<> (optimalRuns0 >= OPTIMALRUNSMEASURE));
//property optimalRuns1 = Pmax(<> (optimalRuns1 >= OPTIMALRUNSMEASURE));
//property optimalRuns2 = Pmax(<> (optimalRuns2 >= OPTIMALRUNSMEASURE));
//property optimalRuns3 = Pmax(<> (optimalRuns3 >= OPTIMALRUNSMEASURE));
// ------ End: properties ---------



// ------ Begin: function definitions ------- 
// Calculate length of list:
function int len(intlist option ls) = if ls == none then 0 else 1 + len(ls!.tl); // "!" accesses the value of a non-empty option (causes an error if the option is empty)

// Return the front of the queue, i.e., the last element of the given integer list. No changes are made to the list.
function int peekFront(intlist option ls) =
	 if ls == none then -1
	 else if ls!.tl == none then ls!.hd
	      else peekFront(ls!.tl);

//Remove the front of the queue, i.e., the last element of the given integer list. Return the modified list. 
function intlist option dequeue(intlist option ls) = 
	if ls == none then none
	else if	ls!.tl == none then none 
		 else some(intlist { hd: ls!.hd, tl: dequeue(ls!.tl) });	

//Insert a new entry n as the head of the list ls. If ls has already reached its capacity before adding n, return ls; otherwise, return modified ls with n as its head. 
function intlist option enqueue(int n, intlist option ls) = 
	if len(ls) == BUFFERLENGTH then ls
	else some(intlist { hd: n, tl: ls });		 

//Routing function	(x-y routing)
function int route(int dest, int routerID) =
	if dest == -1 then -1/*no flit*/
	else if (dest % NOCSIZE) > (routerID % NOCSIZE) then 1/*east*/
	else if (dest % NOCSIZE) < (routerID % NOCSIZE) then 3/*west*/
	else if (dest / NOCSIZE) > (routerID / NOCSIZE) then 2/*south*/
	else if (dest / NOCSIZE) < (routerID / NOCSIZE) then 0/*north*/
	else 4/*local*/
	;
// ------ End: function definitions ------- 


// ------ Begin: process definitions ------
//---- Paralell Processes ----
process Clock(){	
	
	tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	} 
		
}

process Top(){
	//initialization code goes here
	do{
		
	}
}

process Populate(){

}


//---- Sub processes ----
process Arbiter_corner(int routerID){
}
	
// ------- End: process definitions -------

par{
::	Clock()
:: 	Top()
}
