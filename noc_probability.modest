option "dtmc";

//Top level varables
const int BUFFERLENGTH = 4;
const int NOCSIZE = 2;
const int INJECTIONRATENUMERATOR = 1;
const int INJECTIONRATEDENOMINATOR = 2;

const int clkLower = 100; 
const int clkUpper = 106;
int(clkLower..clkUpper) clk;
//transient int(0..1) clk;

action tick;

int totalFlitsDelivered = 0;
int totalLatency = 0;

datatype node = {bool local, bool localB1, bool localB2, bool localB3, bool localB4, bool localLocked, int(-1..2) localVal, bool ew, bool ewB1, bool ewB2, bool ewB3, bool ewB4, bool ewLocked, int(-1..2) ewVal, bool ns, bool nsB1, bool nsB2, bool nsB3, bool nsB4, bool nsLocked, int(-1..2) nsVal, bool a1, bool a2, bool a3};

//int localVal, nsVal, ewVal: -1 no flit, 0 destined to ns channel, 1 destined to ew channel, 2 destined to local channel

node r0, r1, r2, r3;

node[] noc;

// ------ Begin: properties ---------
property Pr1 = Pmax(<> (clk >= clkUpper));
//property p1 = Pmax(<>[S(clk)<=(clkUpper-clkLower)] (totalFlitsDelivered >= 3));
// ------ End: properties ---------

process Clock(){	
	
	tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	}   
	
	//tick {= clk = 1 =};
	//Clock()
}

process Top(){
	initialize();
	do{
		populate();
		arbiter(0);
		arbiter(1);
		arbiter(2);
		arbiter(3);
		
		tick;
		
		if(clk>=clkUpper){
			stop
		}
		else{
			tau

		} 	
		
	}
}

process initialize(){
	{=
	noc = [r0, r1, r2, r3],
	noc[0].localVal = -1,
	noc[0].ewVal = -1,
	noc[0].nsVal = -1,
	noc[1].localVal = -1,
	noc[1].ewVal = -1,
	noc[1].nsVal = -1,
	noc[2].localVal = -1,
	noc[2].ewVal = -1,
	noc[2].nsVal = -1,
	noc[3].localVal = -1,
	noc[3].ewVal = -1,
	noc[3].nsVal = -1
	
	//, noc[0].localB4 = true
	=}
}

process populate(){
	
	if((clk % INJECTIONRATEDENOMINATOR) < INJECTIONRATENUMERATOR){
		{=
		noc[0].localB4 = true,
		noc[1].localB4 = true,
		noc[2].localB4 = true,
		noc[3].localB4 = true
		=}
	}
	else {tau};
	
	
	if(noc[0].localB3 == false && noc[0].localB2 == false && noc[0].localB1 == false){
		{=
		noc[0].local = noc[0].localB4,
		noc[0].localB4 = false
		=}
	}
	else if(noc[0].localB3 == false && noc[0].localB2 == false && noc[0].localB1 == true){
		{=
		noc[0].local = noc[0].localB1,
		noc[0].localB1 = noc[0].localB4,
		noc[0].localB4 = false
		=}
	}
	else if(noc[0].localB3 == true && noc[0].localB2 == true && noc[0].localB1 == true){
		{=
		noc[0].local = noc[0].localB1,
		noc[0].localB1 = noc[0].localB2,
		noc[0].localB2 = noc[0].localB4,
		noc[0].localB4 = false
		=}
	}
	else{
		{=
		noc[0].local = noc[0].localB1,
		noc[0].localB1 = noc[0].localB2,
		noc[0].localB2 = noc[0].localB3,
		noc[0].localB3 = noc[0].localB4,
		noc[0].localB4 = false
		=}
	};
	
	if(noc[1].localB3 == false && noc[1].localB2 == false && noc[1].localB1 == false){
		{=
		noc[1].local = noc[1].localB4,
		noc[1].localB4 = false
		=}
	}
	else if(noc[1].localB3 == false && noc[1].localB2 == false && noc[1].localB1 == true){
		{=
		noc[1].local = noc[1].localB1,
		noc[1].localB1 = noc[1].localB4,
		noc[1].localB4 = false
		=}
	}
	else if(noc[1].localB3 == true && noc[1].localB2 == true && noc[1].localB1 == true){
		{=
		noc[1].local = noc[1].localB1,
		noc[1].localB1 = noc[1].localB2,
		noc[1].localB2 = noc[1].localB4,
		noc[1].localB4 = false
		=}
	}
	else{
		{=
		noc[1].local = noc[1].localB1,
		noc[1].localB1 = noc[1].localB2,
		noc[1].localB2 = noc[1].localB3,
		noc[1].localB3 = noc[1].localB4,
		noc[1].localB4 = false
		=}
	};
	
	if(noc[2].localB3 == false && noc[2].localB2 == false && noc[2].localB1 == false){
		{=
		noc[2].local = noc[2].localB4,
		noc[2].localB4 = false
		=}
	}
	else if(noc[2].localB3 == false && noc[2].localB2 == false && noc[2].localB1 == true){
		{=
		noc[2].local = noc[2].localB1,
		noc[2].localB1 = noc[2].localB4,
		noc[2].localB4 = false
		=}
	}
	else if(noc[2].localB3 == true && noc[2].localB2 == true && noc[2].localB1 == true){
		{=
		noc[2].local = noc[2].localB1,
		noc[2].localB1 = noc[2].localB2,
		noc[2].localB2 = noc[2].localB4,
		noc[2].localB4 = false
		=}
	}
	else{
		{=
		noc[2].local = noc[2].localB1,
		noc[2].localB1 = noc[2].localB2,
		noc[2].localB2 = noc[2].localB3,
		noc[2].localB3 = noc[2].localB4,
		noc[2].localB4 = false
		=}
	};
	
	if(noc[3].localB3 == false && noc[3].localB2 == false && noc[3].localB1 == false){
		{=
		noc[3].local = noc[3].localB4,
		noc[3].localB4 = false
		=}
	}
	else if(noc[3].localB3 == false && noc[3].localB2 == false && noc[3].localB1 == true){
		{=
		noc[3].local = noc[3].localB1,
		noc[3].localB1 = noc[3].localB4,
		noc[3].localB4 = false
		=}
	}
	else if(noc[3].localB3 == true && noc[3].localB2 == true && noc[3].localB1 == true){
		{=
		noc[3].local = noc[3].localB1,
		noc[3].localB1 = noc[3].localB2,
		noc[3].localB2 = noc[3].localB4,
		noc[3].localB4 = false
		=}
	}
	else{
		{=
		noc[3].local = noc[3].localB1,
		noc[3].localB1 = noc[3].localB2,
		noc[3].localB2 = noc[3].localB3,
		noc[3].localB3 = noc[3].localB4,
		noc[3].localB4 = false
		=}
	};
	
	
	if(noc[0].ewB3 == false && noc[0].ewB2 == false && noc[0].ewB1 == false){
		{=
		noc[0].ew = noc[0].ewB4,
		noc[0].ewB4 = false
		=}
	}
	else if(noc[0].ewB3 == false && noc[0].ewB2 == false && noc[0].ewB1 == true){
		{=
		noc[0].ew = noc[0].ewB1,
		noc[0].ewB1 = noc[0].ewB4,
		noc[0].ewB4 = false
		=}
	}
	else if(noc[0].ewB3 == true && noc[0].ewB2 == true && noc[0].ewB1 == true){
		{=
		noc[0].ew = noc[0].ewB1,
		noc[0].ewB1 = noc[0].ewB2,
		noc[0].ewB2 = noc[0].ewB4,
		noc[0].ewB4 = false
		=}
	}
	else{
		{=
		noc[0].ew = noc[0].ewB1,
		noc[0].ewB1 = noc[0].ewB2,
		noc[0].ewB2 = noc[0].ewB3,
		noc[0].ewB3 = noc[0].ewB4,
		noc[0].ewB4 = false
		=}
	};
	
	if(noc[1].ewB3 == false && noc[1].ewB2 == false && noc[1].ewB1 == false){
		{=
		noc[1].ew = noc[1].ewB4,
		noc[1].ewB4 = false
		=}
	}
	else if(noc[1].ewB3 == false && noc[1].ewB2 == false && noc[1].ewB1 == true){
		{=
		noc[1].ew = noc[1].ewB1,
		noc[1].ewB1 = noc[1].ewB4,
		noc[1].ewB4 = false
		=}
	}
	else if(noc[1].ewB3 == true && noc[1].ewB2 == true && noc[1].ewB1 == true){
		{=
		noc[1].ew = noc[1].ewB1,
		noc[1].ewB1 = noc[1].ewB2,
		noc[1].ewB2 = noc[1].ewB4,
		noc[1].ewB4 = false
		=}
	}
	else{
		{=
		noc[1].ew = noc[1].ewB1,
		noc[1].ewB1 = noc[1].ewB2,
		noc[1].ewB2 = noc[1].ewB3,
		noc[1].ewB3 = noc[1].ewB4,
		noc[1].ewB4 = false
		=}
	};
	
	if(noc[2].ewB3 == false && noc[2].ewB2 == false && noc[2].ewB1 == false){
		{=
		noc[2].ew = noc[2].ewB4,
		noc[2].ewB4 = false
		=}
	}
	else if(noc[2].ewB3 == false && noc[2].ewB2 == false && noc[2].ewB1 == true){
		{=
		noc[2].ew = noc[2].ewB1,
		noc[2].ewB1 = noc[2].ewB4,
		noc[2].ewB4 = false
		=}
	}
	else if(noc[2].ewB3 == true && noc[2].ewB2 == true && noc[2].ewB1 == true){
		{=
		noc[2].ew = noc[2].ewB1,
		noc[2].ewB1 = noc[2].ewB2,
		noc[2].ewB2 = noc[2].ewB4,
		noc[2].ewB4 = false
		=}
	}
	else{
		{=
		noc[2].ew = noc[2].ewB1,
		noc[2].ewB1 = noc[2].ewB2,
		noc[2].ewB2 = noc[2].ewB3,
		noc[2].ewB3 = noc[2].ewB4,
		noc[2].ewB4 = false
		=}
	};
	
	if(noc[3].ewB3 == false && noc[3].ewB2 == false && noc[3].ewB1 == false){
		{=
		noc[3].ew = noc[3].ewB4,
		noc[3].ewB4 = false
		=}
	}
	else if(noc[3].ewB3 == false && noc[3].ewB2 == false && noc[3].ewB1 == true){
		{=
		noc[3].ew = noc[3].ewB1,
		noc[3].ewB1 = noc[3].ewB4,
		noc[3].ewB4 = false
		=}
	}
	else if(noc[3].ewB3 == true && noc[3].ewB2 == true && noc[3].ewB1 == true){
		{=
		noc[3].ew = noc[3].ewB1,
		noc[3].ewB1 = noc[3].ewB2,
		noc[3].ewB2 = noc[3].ewB4,
		noc[3].ewB4 = false
		=}
	}
	else{
		{=
		noc[3].ew = noc[3].ewB1,
		noc[3].ewB1 = noc[3].ewB2,
		noc[3].ewB2 = noc[3].ewB3,
		noc[3].ewB3 = noc[3].ewB4,
		noc[3].ewB4 = false
		=}
	};

if(noc[0].nsB3 == false && noc[0].nsB2 == false && noc[0].nsB1 == false){
		{=
		noc[0].ns = noc[0].nsB4,
		noc[0].nsB4 = false
		=}
	}
	else if(noc[0].nsB3 == false && noc[0].nsB2 == false && noc[0].nsB1 == true){
		{=
		noc[0].ns = noc[0].nsB1,
		noc[0].nsB1 = noc[0].nsB4,
		noc[0].nsB4 = false
		=}
	}
	else if(noc[0].nsB3 == true && noc[0].nsB2 == true && noc[0].nsB1 == true){
		{=
		noc[0].ns = noc[0].nsB1,
		noc[0].nsB1 = noc[0].nsB2,
		noc[0].nsB2 = noc[0].nsB4,
		noc[0].nsB4 = false
		=}
	}
	else{
		{=
		noc[0].ns = noc[0].nsB1,
		noc[0].nsB1 = noc[0].nsB2,
		noc[0].nsB2 = noc[0].nsB3,
		noc[0].nsB3 = noc[0].nsB4,
		noc[0].nsB4 = false
		=}
	};
	
	if(noc[1].nsB3 == false && noc[1].nsB2 == false && noc[1].nsB1 == false){
		{=
		noc[1].ns = noc[1].nsB4,
		noc[1].nsB4 = false
		=}
	}
	else if(noc[1].nsB3 == false && noc[1].nsB2 == false && noc[1].nsB1 == true){
		{=
		noc[1].ns = noc[1].nsB1,
		noc[1].nsB1 = noc[1].nsB4,
		noc[1].nsB4 = false
		=}
	}
	else if(noc[1].nsB3 == true && noc[1].nsB2 == true && noc[1].nsB1 == true){
		{=
		noc[1].ns = noc[1].nsB1,
		noc[1].nsB1 = noc[1].nsB2,
		noc[1].nsB2 = noc[1].nsB4,
		noc[1].nsB4 = false
		=}
	}
	else{
		{=
		noc[1].ns = noc[1].nsB1,
		noc[1].nsB1 = noc[1].nsB2,
		noc[1].nsB2 = noc[1].nsB3,
		noc[1].nsB3 = noc[1].nsB4,
		noc[1].nsB4 = false
		=}
	};
	
	if(noc[2].nsB3 == false && noc[2].nsB2 == false && noc[2].nsB1 == false){
		{=
		noc[2].ns = noc[2].nsB4,
		noc[2].nsB4 = false
		=}
	}
	else if(noc[2].nsB3 == false && noc[2].nsB2 == false && noc[2].nsB1 == true){
		{=
		noc[2].ns = noc[2].nsB1,
		noc[2].nsB1 = noc[2].nsB4,
		noc[2].nsB4 = false
		=}
	}
	else if(noc[2].nsB3 == true && noc[2].nsB2 == true && noc[2].nsB1 == true){
		{=
		noc[2].ns = noc[2].nsB1,
		noc[2].nsB1 = noc[2].nsB2,
		noc[2].nsB2 = noc[2].nsB4,
		noc[2].nsB4 = false
		=}
	}
	else{
		{=
		noc[2].ns = noc[2].nsB1,
		noc[2].nsB1 = noc[2].nsB2,
		noc[2].nsB2 = noc[2].nsB3,
		noc[2].nsB3 = noc[2].nsB4,
		noc[2].nsB4 = false
		=}
	};
	
	if(noc[3].nsB3 == false && noc[3].nsB2 == false && noc[3].nsB1 == false){
		{=
		noc[3].ns = noc[3].nsB4,
		noc[3].nsB4 = false
		=}
	}
	else if(noc[3].nsB3 == false && noc[3].nsB2 == false && noc[3].nsB1 == true){
		{=
		noc[3].ns = noc[3].nsB1,
		noc[3].nsB1 = noc[3].nsB4,
		noc[3].nsB4 = false
		=}
	}
	else if(noc[3].nsB3 == true && noc[3].nsB2 == true && noc[3].nsB1 == true){
		{=
		noc[3].ns = noc[3].nsB1,
		noc[3].nsB1 = noc[3].nsB2,
		noc[3].nsB2 = noc[3].nsB4,
		noc[3].nsB4 = false
		=}
	}
	else{
		{=
		noc[3].ns = noc[3].nsB1,
		noc[3].nsB1 = noc[3].nsB2,
		noc[3].nsB2 = noc[3].nsB3,
		noc[3].nsB3 = noc[3].nsB4,
		noc[3].nsB4 = false
		=}
	}

}

process arbiter(int n){
	//assign values to the buffers according to the probabilities
	if(noc[n].local == true && noc[n].localLocked == false){
		palt{
			:(2/3): {= noc[n].localVal = 1 =}  
			:(1/3): {= noc[n].localVal = 0 =}  
		}
	}
	else{tau};
	
	if(noc[n].ew == true && noc[n].ewLocked == false){
		palt{
			:(1/2): {= noc[n].ewVal = 0 =}  
			:(1/2): {= noc[n].ewVal = 2 =}  
		}
	}
	else{tau};
	
	if(noc[n].ns == true && noc[n].nsLocked == false){
		{= noc[n].nsVal = 2 =}
	}
	else{tau};
	
	if(noc[n].localVal != -1 && noc[n].localVal == noc[n].ewVal){	//local and ew conflict
		if(!(noc[n].a1 || (noc[n].a2 && noc[n].a3))){		//local and south are serviced, east unserviced, encodes the priority buffer into three predicates and uses a truth table
			{= 
			noc[((int)(n/2))*(n - 2) + (-((int)(n/2)) + 1)*(n + 2)].nsB4 = true, noc[n].local = false, noc[n].localVal = -1, noc[n].localLocked = false,
			noc[n].ewLocked = true
			=}		//forward ns direction
		}
		else{		//east and south are serviced, local unserviced
			{= 
			noc[((int)(n/2))*(n - 2) + (-((int)(n/2)) + 1)*(n + 2)].nsB4 = true, noc[n].ew = false, noc[n].ewVal = -1, noc[n].ewLocked = false,
			noc[n].localLocked = true
			=}		//forward ns direction
		};
		
		
		//service ns buffer
		alt{
			::when(noc[n].nsVal == -1)
				tau
			::when(noc[n].nsVal == 2)
				{= totalFlitsDelivered++, noc[n].nsVal = -1, noc[n].nsLocked = false =}		//flit delivered
		};
		
		//Update priorities using boolean algebra
		{=
		noc[n].a1 = !(noc[n].a1 || (noc[n].a2 && noc[n].a3)),
		noc[n].a2 =  noc[n].a1,
		noc[n].a3 = !noc[n].a1 && !noc[n].a2 && noc[n].a3
		=}
		
	}
	else if(noc[n].ewVal != -1 && noc[n].ewVal == noc[n].nsVal){	//ew and ns conflict
		if(noc[n].a3){		//south and local are serviced, east is not
			{=
			totalFlitsDelivered++, noc[n].nsVal = -1, noc[n].nsLocked = false,
			noc[n].ewLocked = true
			=}
		}
		else{		//east and local are serviced, south is not
			{= 
			totalFlitsDelivered++, noc[n].ewVal = -1, noc[n].ewLocked = false,
			noc[n].nsLocked = true
			=}
		};
		
		//service local buffer
		alt{
			::when(noc[n].localVal == -1)
				tau
			::when(noc[n].localVal == 0)
				{= noc[((int)(n/2))*(n - 2) + (-((int)(n/2)) + 1)*(n + 2)].nsB4 = true, noc[n].local = false, noc[n].localVal = -1, noc[n].localLocked = false =}		//forward ns direction
			::when(noc[n].localVal == 1)
				{= noc[(n % 2)*(n - 1) + (-(n % 2) + 1)*(n + 1)].ewB4 = true, noc[n].local = false, noc[n].localVal = -1, noc[n].localLocked = false =}		//forward ew direction
		};
		
		{=
		noc[n].a1 = false,
		noc[n].a2 = noc[n].a1,
		noc[n].a3 = !noc[n].a3
		=}
	}
	else{
		//service local buffer
		alt{
			::when(noc[n].localVal == -1)
				tau
			::when(noc[n].localVal == 0)
				{= noc[((int)(n/2))*(n - 2) + (-((int)(n/2)) + 1)*(n + 2)].nsB4 = true, noc[n].local = false, noc[n].localVal = -1, noc[n].localLocked = false =}		//forward ns direction
			::when(noc[n].localVal == 1)
				{= noc[(n % 2)*(n - 1) + (-(n % 2) + 1)*(n + 1)].ewB4 = true, noc[n].local = false, noc[n].localVal = -1, noc[n].localLocked = false =}		//forward ew direction
		};
		
		//service ew buffer
		alt{
			::when(noc[n].ewVal == -1)
				tau
			::when(noc[n].ewVal == 0)
				{= noc[((int)(n/2))*(n - 2) + (-((int)(n/2)) + 1)*(n + 2)].nsB4 = true, noc[n].local = false, noc[n].ewVal = -1, noc[n].ewLocked = false =}		//forward ns direction
			::when(noc[n].ewVal == 2)
				{= totalFlitsDelivered++, noc[n].ewVal = -1, noc[n].ewLocked = false =}		//flit delivered
		};
		
		//service ns buffer
		alt{
			::when(noc[n].nsVal == -1)
				tau
			::when(noc[n].nsVal == 2)
				{= totalFlitsDelivered++, noc[n].nsVal = -1, noc[n].nsLocked = false =}		//flit delivered
		}
		
	}
}

par{
::	Clock()
:: 	Top()
}