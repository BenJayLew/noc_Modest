datatype buffer = {int(0..3) val, int(0..3) id, bool serviced, int(0..3) priority, int timesServiced};		//Datatype for a buffer with the next buffer value, id of the buffer, whether the buffer was serviced last clock cycle or not, and the priority number of the buffer
int unserviced;		//Number of unserviced buffers, iterates down when unserviced buffer's priority is set
int totalUnserviced;	//Total number of unserviced buffers in a clock cycle
int totalServiced = 0;
int optimalRuns = 0;
const int clkLower = 100; 
const int clkUpper = 105;
int(clkLower..clkUpper) clk;

buffer north, east, south, west;

buffer[] a; 	//Array of the four buffers. a[0] is the highest priority
buffer[] temp;		//Temporary buffer used to update buffer a

action tick;

// ------ Begin: properties ---------
property Pr1 = Pmax(<> (clk >= clkUpper));

property TotalServiced = Pmax(<> (totalServiced >= 15));		//Probablility that the arbiter servieces at least 15 buffers out of a possible 20. probablity the arbiter is at least 75% efficient

/*
property northServiced = Pmax(<> (north.timesServiced >= 3));
property eastServiced = Pmax(<> (east.timesServiced >= 3));
property southServiced = Pmax(<> (south.timesServiced >= 3));
property westServiced = Pmax(<> (west.timesServiced >= 3));
*/

property Runs1 = Pmax(<> (optimalRuns >= 1));		//Probablilitythat there was at least 1 cycle where all buffers were serviced
property Runs2 = Pmax(<> (optimalRuns >= 2));		//Probablilitythat there was at least 2 cycles where all buffers were serviced
property Runs3 = Pmax(<> (optimalRuns >= 3));		//Probablilitythat there was at least 3 cycles where all buffers were serviced
property Runs4 = Pmax(<> (optimalRuns >= 4));		//Probablilitythat there was at least 4 cycles where all buffers were serviced
property Runs5 = Pmax(<> (optimalRuns >= 5));		//Probablilitythat there was at least 5 cycles where all buffers were serviced
// ------ End: properties ---------

process Clock()
{
	tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	}   
}


//Main process for the arbiter
process Arbiter(){
	initialize();
	
	//runtime loop
	do {
		//Service buffers
		
		//Buffer priority 0
		//<Service Buffer a[0]>
		{= 
		a[0].timesServiced++,
		a[0].serviced = true 
		=};
		
		service1();
		
		service2();
		
		service3();
		
		{= 
		totalUnserviced = unserviced,
		totalServiced = totalServiced + 4 - unserviced
		=};
		
		if (unserviced == 0){
			{= optimalRuns++ =}
		}
		else {
			tau
		};
		
		//Set priority values for the next run and update the value of the buffers
		setPriority(0);
		setPriority(1);
		setPriority(2);
		setPriority(3);
		
		
		//Rewrite buffer array with new priority values
		{= 
		temp[a[0].priority] = a[0],
		temp[a[1].priority] = a[1],
		temp[a[2].priority] = a[2],
		temp[a[3].priority] = a[3] 
		=};
		
		{= a = temp =};
		
		tick;
		
		if (clk >= clkUpper) {
			stop
		}
		else {
			tau
		}
		
	}
}

//initialize values 
process initialize(){
	{= 
	a = [north, east, south, west],
	temp = [north, east, south, west], 
	
	a[0].id = 0, 
	a[1].id = 1, 
	a[2].id = 2, 
	a[3].id = 3,  
	
	a[0].val = DiscreteUniform(1, 3),
	a[1].val = (DiscreteUniform(1, 3) + 1) % 4,
	a[2].val = (DiscreteUniform(1, 3) + 2) % 4,
	a[3].val = DiscreteUniform(0, 2),
	
	unserviced = 0
	=}

	
}

//Sets the new priority value of buffer a[i] and updates the value if the buffer was serviced
process setPriority(int i){
	if (a[i].serviced == true){
		{= 
		a[i].val = (DiscreteUniform(1, 3) + a[i].id) % 4,	//Update value	
		a[i].priority = i + unserviced 						//Set new priority
		=}
		//<update buffer value and dequeue buffer>
	}
	else {
		{= 
		a[i].priority = totalUnserviced - unserviced,		//Set new priority
		unserviced-- 						//decrement unserviced
		=}
	}
}

//Determines if buffer a[1] can be serviced and services it
process service1(){
	//Buffer priority 1
		if( a[1].val == a[0].val) {			//If buffer a[1] conflicts with a[0]
			{= 
			a[1].serviced = false,
			unserviced++ 		//Increment unserviced
			=}
		}
		else {
			//<Service buffer a[1]>
			{= 
			a[1].timesServiced++,
			a[1].serviced = true 
			=}
		}
}

//Determines if buffer a[2] can be serviced and services it
process service2(){
	//Buffer priority 2
		if(a[2].val == a[1].val || a[2].val == a[0].val){	//If buffer a[2] conflicts with a[1] or a[0]
			{= 
			a[2].serviced = false, 
			unserviced++			//Increment unserviced
			=}
		}
		else {
			//<Service buffer a[2]>
			{= 
			a[2].timesServiced++,
			a[2].serviced = true 
			=}
		}
}

//Determines if buffer a[3] can be serviced and services it
process service3(){
	//Buffer priority 3
		if( a[3].val == a[2].val || a[3].val == a[1].val || a[3].val == a[0].val){	//If buffer a[3] conflicts with a[2], a[1], or a[0]
			{= 
			a[3].serviced = false,
			unserviced++ 			//Increment unserviced
			=}
		}
		else {
			//<Service buffer a[3]>
			{= 
			a[3].timesServiced++,
			a[3].serviced = true 
			=}
		}
}

par{
::	Clock()
::	Arbiter()
}