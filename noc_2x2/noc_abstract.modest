/*
NoC router IDs
	0 - 1
	|   |
	2 - 3
*/
option "dtmc";

// ---- Begin Varialbes ----
const int clkLower = 100; 
const int clkUpper = 105;
//int(clkLower..clkUpper) clk;
transient int(0..1) clk;

const int INJECTIONRATENUMERATOR = 1;
const int INJECTIONRATEDENOMINATOR = 2;

int totalFlitsDelivered = 0;
int totalFlits = 0;
int totalLatency = 0;

action tick;
// ---- End varialbes

// ---- Predicates ----
bool r0l1;	//noc[0].bufferArray[local].dest == 1
bool r0l2;	//noc[0].bufferArray[local].dest == 2
bool r0l3;	//noc[0].bufferArray[local].dest == 3
bool r0lb1, r0lb2, r0lb3, r0lb4 = false; //Length of the local buffer
bool r0lbv11, r0lbv12, r0lbv13, r0lbv14 = false; //Value of the local buffer at each position, true if dest = 1
bool r0lbv21, r0lbv22, r0lbv23, r0lbv24 = false; //Value of the local buffer at each position, true if dest = 2
											//If both are true, dest = 3

bool r0e0;	//noc[0].bufferArray[east].dest == 0
bool r0e2;	//noc[0].bufferArray[east].dest == 2
bool r0eb1, r0eb2, r0eb3, r0eb4 = false; //Length of the east buffer
bool r0ebv1, r0ebv2, r0ebv3, r0ebv4 = false; //Value of the east buffer at each position, true if dest = 2, false if dest = 0

bool r0s0;	//noc[0].bufferArray[south].dest == 0
bool r0sb1, r0sb2, r0sb3, r0sb4 = false; //Length of the south buffer

bool r0a1, r0a2, r0a3 = false; //priority positions of the arbiter  noc[0].bufferArray[0] == local, noc[0].bufferArray[1] == local, noc[0].bufferArray[0] == south || (noc[0].bufferArray[1] == south && r0a1)


bool r1l0;	//noc[1].bufferArray[local].dest == 0
bool r1l2;	//noc[1].bufferArray[local].dest == 2
bool r1l3;	//noc[1].bufferArray[local].dest == 3
bool r1lb1, r1lb2, r1lb3, r1lb4 = false; //Length of the local buffer
bool r1lbv11, r1lbv12, r1lbv13, r1lbv14 = false; //Value of the local buffer at each position, true if dest = 0
bool r1lbv21, r1lbv22, r1lbv23, r1lbv24 = false; //Value of the local buffer at each position, true if dest = 2

bool r1s1;	//noc[1].bufferArray[south].dest == 1
bool r1sb1, r1sb2, r1sb3, r1sb4 = false; //Length of the south buffer

bool r1w1;	//noc[1].bufferArray[west].dest == 1
bool r1w3;	//noc[1].bufferArray[west].dest == 3
bool r1wb1, r1wb2, r1wb3, r1wb4 = false; //Length of the east buffer
bool r1wbv1, r1wbv2, r1wbv3, r1wbv4 = false; //Value of the east buffer at each position, true if dest = 3, false if dest = 1

bool r1a1, r1a2, r1a3 = false; //priority positions of the arbiter  noc[1].bufferArray[0] == local, noc[1].bufferArray[1] == local, (noc[1].bufferArray[0] == south || (noc[1].bufferArray[1] = south && r1a1))


bool r2l0;	//noc[2].bufferArray[local].dest == 0
bool r2l1;	//noc[2].bufferArray[local].dest == 1
bool r2l3;	//noc[2].bufferArray[local].dest == 3
bool r2lb1, r2lb2, r2lb3, r2lb4 = false; //Length of the local buffer
bool r2lbv11, r2lbv12, r2lbv13, r2lbv14 = false; //Value of the local buffer at each position, true if dest = 0
bool r2lbv21, r2lbv22, r2lbv23, r2lbv24 = false; //Value of the local buffer at each position, true if dest = 1

bool r2n2;	//noc[2].bufferArray[north].dest == 2
bool r2nb1, r2nb2, r2nb3, r2nb4 = false; //Length of the north buffer

bool r2e0;	//noc[2].bufferArray[east].dest == 0
bool r2e2;	//noc[2].bufferArray[east].dest == 2
bool r2eb1, r2eb2, r2eb3, r2eb4 = false; //Length of the east buffer
bool r2ebv1, r2ebv2, r2ebv3, r2ebv4 = false; //Value of the east buffer at each position, true if dest = 2, false if dest = 0

bool r2a1, r2a2, r2a3 = false; //priority positions of the arbiter  noc[2].bufferArray[0] == local, noc[2].bufferArray[1] == local, noc[2].bufferArray[0] == north || (noc[2].bufferArray[1] == north && r2a1)


bool r3l0;	//noc[3].bufferArray[local].dest == 0
bool r3l1;	//noc[3].bufferArray[local].dest == 1
bool r3l2;	//noc[3].bufferArray[local].dest == 2
bool r3lb1, r3lb2, r3lb3, r3lb4 = false; //Length of the local buffer
bool r3lbv11, r3lbv12, r3lbv13, r3lbv14 = false; //Value of the local buffer at each position, true if dest = 0
bool r3lbv21, r3lbv22, r3lbv23, r3lbv24 = false; //Value of the local buffer at each position, true if dest = 1

bool r3n3;	//noc[3].bufferArray[north].dest == 3
bool r3nb1, r3nb2, r3nb3, r3nb4 = false; //Length of the north buffer

bool r3w1;	//noc[3].bufferArray[west].dest == 1
bool r3w3;	//noc[3].bufferArray[west].dest == 3
bool r3wb1, r3wb2, r3wb3, r3wb4 = false; //Length of the east buffer
bool r3wbv1, r3wbv2, r3wbv3, r3wbv4 = false; //Value of the east buffer at each position, true if dest = 1, false if dest = 3

bool r3a1, r3a2, r3a3 = false; //priority positions of the arbiter  noc[3].bufferArray[0] == local, noc[3].bufferArray[1] == local, noc[3].bufferArray[0] == north || (noc[3].bufferArray[1] == north && r3a1)
// ---- End predicates ---


// ------ Begin: properties ---------
//property Pr1 = Pmax(<> (clk >= clkUpper));
//property averageLatency = Pmax(<> ((clk >= clkUpper) && ((totalLatency/totalFlits) <= 1.75)));
property p1 = Pmax(<>[S(clk)<=(clkUpper-clkLower)] (totalFlitsDelivered >= 1));
// ------ End: properties ---------


// ------ Begin: process definitions ------
//---- Paralell Processes ----
process Clock(){	
	/*tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	} */
	tick{= clk = 1 =};
	Clock()
}

process Top(){
	do{
		Populate();
		shiftBuffers();
		
		Arbiter_corner0();
		Arbiter_corner1();
		Arbiter_corner2();
		Arbiter_corner3();	
		
		tick;

		if(clk>=clkUpper){
			stop
		}
		else{
			tau

		} 	
	}
	
}


//Sub Processes
process Populate(){
	if((clk % INJECTIONRATEDENOMINATOR) < INJECTIONRATENUMERATOR){
		{= totalFlits += 4 =};
		//populate router 0
		if(r0lb4 == true){
			tau		// buffer is full
		}
		else if(r0lb3 == true){
			palt{
				:(1/3): {= r0lbv14 = true, r0lbv24 = false, r0lb4 = true =}
				:(1/3): {= r0lbv14 = false, r0lbv24 = true, r0lb4 = true =}
				:(1/3): {= r0lbv14 = true, r0lbv24 = true, r0lb4 = true =}
			}
		}
		else if(r0lb2 == true){
			palt{
				:(1/3): {= r0lbv13 = true, r0lbv23 = false, r0lb3 = true =}
				:(1/3): {= r0lbv13 = false, r0lbv23 = true, r0lb3 = true =}
				:(1/3): {= r0lbv13 = true, r0lbv23 = true, r0lb3 = true =}
			}
		}
		else if(r0lb1 == true){
			palt{
				:(1/3): {= r0lbv12 = true, r0lbv22 = false, r0lb2 = true =}
				:(1/3): {= r0lbv12 = false, r0lbv22 = true, r0lb2 = true =}
				:(1/3): {= r0lbv12 = true, r0lbv22 = true, r0lb2 = true =}
			}
		}
		else{
			palt{
				:(1/3): {= r0lbv11 = true, r0lbv21 = false, r0lb1 = true =}
				:(1/3): {= r0lbv11 = false, r0lbv21 = true, r0lb1 = true =}
				:(1/3): {= r0lbv11 = true, r0lbv21 = true, r0lb1 = true =}
			}
		};
	
	//populate router 1
		if(r1lb4 == true){
			tau		// buffer is full
		}
		else if(r1lb3 == true){
			palt{
				:(1/3): {= r1lbv14 = true, r1lbv24 = false, r1lb4 = true =}
				:(1/3): {= r1lbv14 = false, r1lbv24 = true, r1lb4 = true =}
				:(1/3): {= r1lbv14 = true, r1lbv24 = true, r1lb4 = true =}
			}
		}
		else if(r1lb2 == true){
			palt{
				:(1/3): {= r1lbv13 = true, r1lbv23 = false, r1lb3 = true =}
				:(1/3): {= r1lbv13 = false, r1lbv23 = true, r1lb3 = true =}
				:(1/3): {= r1lbv13 = true, r1lbv23 = true, r1lb3 = true =}
			}
		}
		else if(r1lb1 == true){
			palt{
				:(1/3): {= r1lbv12 = true, r1lbv22 = false, r1lb2 = true =}
				:(1/3): {= r1lbv12 = false, r1lbv22 = true, r1lb2 = true =}
				:(1/3): {= r1lbv12 = true, r1lbv22 = true, r1lb2 = true =}
			}
		}
		else{
			palt{
				:(1/3): {= r1lbv11 = true, r1lbv21 = false, r1lb1 = true =}
				:(1/3): {= r1lbv11 = false, r1lbv21 = true, r1lb1 = true =}
				:(1/3): {= r1lbv11 = true, r1lbv21 = true, r1lb1 = true =}
			}
		};
		
		
		//populate router 2
		if(r2lb4 == true){
			tau		// buffer is full
		}
		else if(r2lb3 == true){
			palt{
				:(1/3): {= r2lbv14 = true, r2lbv24 = false, r2lb4 = true =}
				:(1/3): {= r2lbv14 = false, r2lbv24 = true, r2lb4 = true =}
				:(1/3): {= r2lbv14 = true, r2lbv24 = true, r2lb4 = true =}
			}
		}
		else if(r2lb2 == true){
			palt{
				:(1/3): {= r2lbv13 = true, r2lbv23 = false, r2lb3 = true =}
				:(1/3): {= r2lbv13 = false, r2lbv23 = true, r2lb3 = true =}
				:(1/3): {= r2lbv13 = true, r2lbv23 = true, r2lb3 = true =}
			}
		}
		else if(r2lb1 == true){
			palt{
				:(1/3): {= r2lbv12 = true, r2lbv22 = false, r2lb2 = true =}
				:(1/3): {= r2lbv12 = false, r2lbv22 = true, r2lb2 = true =}
				:(1/3): {= r2lbv12 = true, r2lbv22 = true, r2lb2 = true =}
			}
		}
		else{
			palt{
				:(1/3): {= r2lbv11 = true, r2lbv21 = false, r2lb1 = true =}
				:(1/3): {= r2lbv11 = false, r2lbv21 = true, r2lb1 = true =}
				:(1/3): {= r2lbv11 = true, r2lbv21 = true, r2lb1 = true =}
			}
		};
		
		
		//populate router 3
		if(r3lb4 == true){
			tau		// buffer is full
		}
		else if(r3lb3 == true){
			palt{
				:(1/3): {= r3lbv14 = true, r3lbv24 = false, r3lb4 = true =}
				:(1/3): {= r3lbv14 = false, r3lbv24 = true, r3lb4 = true =}
				:(1/3): {= r3lbv14 = true, r3lbv24 = true, r3lb4 = true =}
			}
		}
		else if(r3lb2 == true){
			palt{
				:(1/3): {= r3lbv13 = true, r3lbv23 = false, r3lb3 = true =}
				:(1/3): {= r3lbv13 = false, r3lbv23 = true, r3lb3 = true =}
				:(1/3): {= r3lbv13 = true, r3lbv23 = true, r3lb3 = true =}
			}
		}
		else if(r3lb1 == true){
			palt{
				:(1/3): {= r3lbv12 = true, r3lbv22 = false, r3lb2 = true =}
				:(1/3): {= r3lbv12 = false, r3lbv22 = true, r3lb2 = true =}
				:(1/3): {= r3lbv12 = true, r3lbv22 = true, r3lb2 = true =}
			}
		}
		else{
			palt{
				:(1/3): {= r3lbv11 = true, r3lbv21 = false, r3lb1 = true =}
				:(1/3): {= r3lbv11 = false, r3lbv21 = true, r3lb1 = true =}
				:(1/3): {= r3lbv11 = true, r3lbv21 = true, r3lb1 = true =}
			}
		}
	}
	else {tau}
}
	
process shiftBuffers(){
	//shift local buffer in router 0
	if(r0lb1 == true || r0lb2 == true || r0lb3 == true || r0lb4 == true){
		//dequeue buffer
		{=
		r0l1 = (r0lbv11 && !r0lbv21), r0l2 = (!r0lbv11 && r0lbv21), r0l3 = (r0lbv11 && r0lbv21),
		r0lbv11 = r0lbv12, r0lbv21 = r0lbv22, r0lb1 = r0lb2,
		r0lbv12 = r0lbv13, r0lbv22 = r0lbv23, r0lb2 = r0lb3,
		r0lbv13 = r0lbv14, r0lbv23 = r0lbv24, r0lb3 = r0lb4,
		r0lbv14 = false, r0lbv24 = false, r0lb4 = false
		=}
	}
	else{
		tau
	};
	
	//shift east buffer in router 0
	if(r0eb1 == true || r0eb2 == true || r0eb3 == true || r0eb4 == true){
		//dequeue buffer
		{=
		r0e0 = (!r0ebv1), r0e2 = (r0ebv1),
		r0ebv1 = r0ebv2, r0eb1 = r0eb2,
		r0ebv2 = r0ebv3, r0eb2 = r0eb3,
		r0ebv3 = r0ebv4, r0eb3 = r0eb4,
		r0ebv4 = false, r0eb4 = false
		=}
	}
	else{
		tau
	};
	
	//shift south buffer in router 0
	if(r0sb1 == true || r0sb2 == true || r0sb3 == true || r0sb4 == true){
		//dequeue buffer
		{=
		r0sb1 = r0sb2,
		r0sb2 = r0sb3,
		r0sb3 = r0sb4,
		r0sb4 = false
		=}
	}
	else{
		tau
	};
	
	//shift local buffer in router 1
	if(r1lb1 == true || r1lb2 == true || r1lb3 == true || r1lb4 == true){
		//dequeue buffer
		{=
		r1l0 = (r1lbv11 && !r1lbv21), r1l2 = (!r1lbv11 && r1lbv21), r1l3 = (r1lbv11 && r1lbv21),
		r1lbv11 = r1lbv12, r1lbv21 = r1lbv22, r1lb1 = r1lb2,
		r1lbv12 = r1lbv13, r1lbv22 = r1lbv23, r1lb2 = r1lb3,
		r1lbv13 = r1lbv14, r1lbv23 = r1lbv24, r1lb3 = r1lb4,
		r1lbv14 = false, r1lbv24 = false, r1lb4 = false
		=}
	}
	else{
		tau
	};
	
	//shift west buffer in router 1
	if(r1wb1 == true || r1wb2 == true || r1wb3 == true || r1wb4 == true){
		//dequeue buffer
		{=
		r1w1 = (!r1wbv1), r1w3 = (r1wbv1),
		r1wbv1 = r1wbv2, r1wb1 = r1wb2,
		r1wbv2 = r1wbv3, r1wb2 = r1wb3,
		r1wbv3 = r1wbv4, r1wb3 = r1wb4,
		r1wbv4 = false, r1wb4 = false
		=}
	}
	else{
		tau
	};
	
	//shift south buffer in router 1
	if(r1sb1 == true || r1sb2 == true || r1sb3 == true || r1sb4 == true){
		//dequeue buffer
		{=
		r1sb1 = r1sb2,
		r1sb2 = r1sb3,
		r1sb3 = r1sb4,
		r1sb4 = false
		=}
	}
	else{
		tau
	};
	
	
	//shift local buffer in router 2
	if(r2lb1 == true || r2lb2 == true || r2lb3 == true || r2lb4 == true){
		//dequeue buffer
		{=
		r2l0 = (r2lbv11 && !r2lbv21), r2l1 = (!r2lbv11 && r2lbv21), r2l3 = (r2lbv11 && r2lbv21),
		r2lbv11 = r2lbv12, r2lbv21 = r2lbv22, r2lb1 = r2lb2,
		r2lbv12 = r2lbv13, r2lbv22 = r2lbv23, r2lb2 = r2lb3,
		r2lbv13 = r2lbv14, r2lbv23 = r2lbv24, r2lb3 = r2lb4,
		r2lbv14 = false, r2lbv24 = false, r2lb4 = false
		=}
	}
	else{
		tau
	};
	
	//shift east buffer in router 2
	if(r2eb1 == true || r2eb2 == true || r2eb3 == true || r2eb4 == true){
		//dequeue buffer
		{=
		r2e0 = (!r2ebv1), r2e2 = (r2ebv1),
		r2ebv1 = r2ebv2, r2eb1 = r2eb2,
		r2ebv2 = r2ebv3, r2eb2 = r2eb3,
		r2ebv3 = r2ebv4, r2eb3 = r2eb4,
		r2ebv4 = false, r2eb4 = false
		=}
	}
	else{
		tau
	};
	
	//shift north buffer in router 2
	if(r2nb1 == true || r2nb2 == true || r2nb3 == true || r2nb4 == true){
		//dequeue buffer
		{=
		r2nb1 = r2nb2,
		r2nb2 = r2nb3,
		r2nb3 = r2nb4,
		r2nb4 = false
		=}
	}
	else{
		tau
	};
	
	//shift local buffer in router 3
	if(r3lb1 == true || r3lb2 == true || r3lb3 == true || r3lb4 == true){
		//dequeue buffer
		{=
		r3l0 = (r3lbv11 && !r3lbv21), r3l1 = (!r3lbv11 && r3lbv21), r3l2 = (r3lbv11 && r3lbv21),
		r3lbv11 = r3lbv12, r3lbv21 = r3lbv22, r3lb1 = r3lb2,
		r3lbv12 = r3lbv13, r3lbv22 = r3lbv23, r3lb2 = r3lb3,
		r3lbv13 = r3lbv14, r3lbv23 = r3lbv24, r3lb3 = r3lb4,
		r3lbv14 = false, r3lbv24 = false, r3lb4 = false
		=}
	}
	else{
		tau
	};
	
	//shift west buffer in router 3
	if(r3wb1 == true || r3wb2 == true || r3wb3 == true || r3wb4 == true){
		//dequeue buffer
		{=
		r3w1 = (r3wbv1), r3w3 = (!r3wbv1),		///different from other patterns, may need to change
		r3wbv1 = r3wbv2, r3wb1 = r3wb2,
		r3wbv2 = r3wbv3, r3wb2 = r3wb3,
		r3wbv3 = r3wbv4, r3wb3 = r3wb4,
		r3wbv4 = false, r3wb4 = false
		=}
	}
	else{
		tau
	};
	
	//shift north buffer in router 3
	if(r3nb1 == true || r3nb2 == true || r3nb3 == true || r3nb4 == true){
		//dequeue buffer
		{=
		r3nb1 = r3nb2,
		r3nb2 = r3nb3,
		r3nb3 = r3nb4,
		r3nb4 = false
		=}
	}
	else{
		tau
	}
}


process Arbiter_corner0(){
	if(r0l2 && r0e2){		//conflict between local and east buffers
		if(!(r0a1 || (r0a2 && r0a3))){		//local and south are serviced, east unserviced
			{= r0l2 = false =}
		}
		else{		//east and south are serviced, local unserviced
			{= r0e2 = false =}
		};
		
		//input flit into router 2
		enque_r2nb();
		
		//service the south buffer
			if(r0s0){		//south.dest = 0
				{= 
				r0s0 = false,
				totalFlitsDelivered ++
				=}
			}
			else{			//south.dest = null
				tau
			};
			
		{=
		r0a1 = !(r0a1 || (r0a2 && r0a3)),
		r0a2 =  r0a1,
		r0a3 = !r0a1 && !r0a2 && r0a3
		=}
	}	
	else if(r0e0 && r0s0){		//conflict between east and south buffers
		if(r0a3){		//south and local are serviced, east is not
			{= 
			r0s0 = false,
			totalFlitsDelivered++
			=}
		}
		else{		//east and local are serviced, south is not
			{= 
			r0e0 = false,
			totalFlitsDelivered++
			=}
		};
		//flit delivered
		
		//service local buffer
		if(r0l1 || r0l3){	//local.dest = 1 || local.dest= 3
			enque_r1wb(r0l3)
		}
		else if(r0l2){	//local.dest = 2
			enque_r2nb()
		}
		else{		//local.dest = null
			tau
		};
		
		{=
		r0l1 = false,
		r0l2 = false,
		r0l3 = false
		=};
		
		//reset arbiter priority
		{=
		r0a1 = false,
		r0a2 = r0a1,
		r0a3 = !r0a3
		=}
	}
	else{
		// service the local buffer
		if(r0l1 || r0l3){	//local.dest = 1 || local.dest = 3
			enque_r1wb(r0l3)
		}
		else if(r0l2){	//local.dest = 2
			enque_r2nb()
		}
		else{		//local.dest = null
			tau
		};
		
		//service east buffer
		if(r0e0){		//east.dest = 0
			{= 
			r0e0 = false,
			totalFlitsDelivered++
			=}		//flit delivered
		}
		else if(r0e2){	//east.dest = 2
			{= r0e2 = false =};
			enque_r2nb()
		}
		else{			//east.dest = null
			tau
		};
		//service south buffer
		if(r0s0){		//south.dest = 0
			{= 
			r0s0 = false,
			totalFlitsDelivered++
			=}
		}
		else{			//south.dest = null
			tau
		}
	}
}

process Arbiter_corner1(){
	if(r1l3 && r1w3){		//conflict between local and east buffers
		if(!(r1a1 || (r1a2 && r1a3))){		//local and south are serviced, west unserviced
			{= r1l3 = false =}
		}
		else{		//west and south are serviced, local unserviced
			{= r1w3 = false =}
		};
		
		//input flit into router 2
		enque_r2nb();
		
		//service the south buffer
			if(r1s1){		//south.dest = 0
				//flit received
				{= 
				r1s1 = false,
				totalFlitsDelivered++
				=}
			}
			else{			//south.dest = null
				tau
			};
			
		{=
		r1a1 = !(r1a1 || (r1a2 && r1a3)),
		r1a2 =  r1a1,
		r1a3 = !r1a1 && !r1a2 && r1a3
		=}
	}	
	else if(r1w1 && r1s1){		//conflict between east and south buffers
		if(r1a3){		//south and local are serviced, east is not
			{= 
			r1s1 = false,
			totalFlitsDelivered++
			=}
		}
		else{		//east and local are serviced, south is not
			{= 
			r1w1 = false,
			totalFlitsDelivered++
			=}
		};
		//flit delivered
		
		//service local buffer
		if(r1l0 || r1l2){	//local.dest = 1 || local.dest= 3
			enque_r0eb(r1l2)
		}
		else if(r1l3){	//local.dest = 2
			enque_r3nb()
		}
		else{		//local.dest = null
			tau
		};
		
		{=
		r1l0 = false,
		r1l2 = false,
		r1l3 = false
		=};
		
		//reset arbiter priority
		{=
		r1a1 = false,
		r1a2 = r1a1,
		r1a3 = !r1a3
		=}
	}
	else{
		// service the local buffer
		if(r1l0 || r1l2){	//local.dest = 1 || local.dest = 3
			enque_r0eb(r1l2)
		}
		else if(r1l3){	//local.dest = 2
			enque_r3nb()
		}
		else{		//local.dest = null
			tau
		};
		
		//service west buffer
		if(r1w1){		//east.dest = 0
			{= 
			r1w1 = false,
			totalFlitsDelivered++
			=}		//flit delivered
		}
		else if(r1w3){	//east.dest = 2
			{= r1w3 = false =};
			enque_r3nb()
		}
		else{			//east.dest = null
			tau
		};
		//service south buffer
		if(r1s1){		//south.dest = 0
					//flit deleivered
			{= 
			r1s1 = false,
			totalFlitsDelivered++
			=}
		}
		else{			//south.dest = null
			tau
		}
	}
}

process Arbiter_corner2(){
	if(r2l0 && r2e0){		//conflict between local and east buffers
		if(!(r2a1 || (r2a2 && r2a3))){		//local and south are serviced, east unserviced
			{= r2l0 = false =}
		}
		else{		//east and south are serviced, local unserviced
			{= r2e0 = false =}
		};
		
		//input flit into router 0
		enque_r0sb();
		
		//service the north buffer
		if(r2n2){		//south.dest = 0
			//flit received
			{= 
			r2n2 = false,
			totalFlitsDelivered++
			=}
		}
		else{			//south.dest = null
			tau
		};
			
		{=
		r2a1 = !(r2a1 || (r2a2 && r2a3)),
		r2a2 =  r2a1,
		r2a3 = !r2a1 && !r2a2 && r2a3
		=}
	}	
	else if(r2e2 && r2n2){		//conflict between east and south buffers
		if(r2a3){		//south and local are serviced, east is not
			{= 
			r2n2 = false,
			totalFlitsDelivered++
			=}
		}
		else{		//east and local are serviced, south is not
			{= 
			r2e2 = false,
			totalFlitsDelivered++
			=}
		};
		//flit delivered
		
		//service local buffer
		if(r2l1 || r2l3){	//local.dest = 1 || local.dest= 3
			enque_r3wb(r2l1)
		}
		else if(r2l0){	//local.dest = 0
			enque_r0sb()
		}
		else{		//local.dest = null
			tau
		};
		
		{=
		r2l0 = false,
		r2l1 = false,
		r2l3 = false
		=};
		
		//reset arbiter priority
		{=
		r2a1 = false,
		r2a2 = r2a1,
		r2a3 = !r2a3
		=}
	}
	else{
		// service the local buffer
		if(r2l1 || r2l3){	//local.dest = 1 || local.dest = 3
			enque_r3wb(r2l1)
		}
		else if(r2l0){	//local.dest = 0
			enque_r0sb()
		}
		else{		//local.dest = null
			tau
		};
		
		//service east buffer
		if(r2e0){		//east.dest = 0
			{= r2e0 = false =};
			enque_r0sb()
		}
		else if(r2e2){	//east.dest = 2
			{= 
			r2e2 = false,
			totalFlitsDelivered++
			=}		//flit delivered
		}
		else{			//east.dest = null
			tau
		};
		//service north buffer
		if(r2n2){		//north.dest = 2
					//flit deleivered
			{= 
			r2n2 = false,
			totalFlitsDelivered++
			=}
		}
		else{			//south.dest = null
			tau
		}
	}
}

process Arbiter_corner3(){
	if(r3l1 && r3w1){		//conflict between local and east buffers
		if(!(r3a1 || (r3a2 && r3a3))){		//local and south are serviced, west unserviced
			{= r3l1 = false =}
		}
		else{		//west and south are serviced, local unserviced
			{= r3w1 = false =}
		};
		
		//input flit into router 2
		enque_r1sb();
		
		//service the north buffer
			if(r3n3){		//north.dest = 0
				tau		//flit received
				{= 
				r3n3 = false,
				totalFlitsDelivered++
				=}
			}
			else{			//north.dest = null
				tau
			};
			
		{=
		r3a1 = !(r3a1 || (r3a2 && r3a3)),
		r3a2 =  r3a1,
		r3a3 = !r3a1 && !r3a2 && r3a3
		=}
	}	
	else if(r3n3 && r3w3){		//conflict between east and south buffers
		if(r3a3){		//south and local are serviced, east is not
			{= 
			r3w3 = false,
			totalFlitsDelivered++
			=}
		}
		else{		//east and local are serviced, south is not
			{= 
			r3n3 = false,
			totalFlitsDelivered++
			=}
		};
		//flit delivered
		
		//service local buffer
		if(r3l0 || r3l2){	//local.dest = 0 || local.dest = 2
			enque_r2eb(r3l2)
		}
		else if(r3l1){	//local.dest = 1
			enque_r1sb()
		}
		else{		//local.dest = null
			tau
		};
		
		{=
		r3l0 = false,
		r3l1 = false,
		r3l2 = false
		=};
		
		//reset arbiter priority
		{=
		r3a1 = false,
		r3a2 = r3a1,
		r3a3 = !r3a3
		=}
	}
	else{
		// service the local buffer
		if(r3l0 || r3l2){	//local.dest = 0 || local.dest = 2
			enque_r2eb(r3l2)
		}
		else if(r3l1){	//local.dest = 1
			enque_r1sb()
		}
		else{		//local.dest = null
			tau
		};
		
		//service west buffer
		if(r3w3){		//east.dest = 3
			{= 
			r3w3 = false,
			totalFlitsDelivered++
			=}		//flit delivered
		}
		else if(r3w1){	//east.dest = 1
			{= r3w1 = false =};
			enque_r1sb()
		}
		else{			//east.dest = null
			tau
		};
		//service north buffer
		if(r3n3){		//south.dest = 0
				//flit deleivered
			{= 
			r3n3 = false,
			totalFlitsDelivered++
			=}
		}
		else{			//south.dest = null
			tau
		}
	}
}


process enque_r0eb(bool dest){
	if(r0eb4 == true){
		tau		// buffer is full
	}
	else if(r0eb3 == true){
		{=
		r0eb4 = true,
		r0ebv4 = dest,
		totalLatency++
		=}
	}
	else if(r0eb2 == true){
		{=
		r0eb3 = true,
		r0ebv3 = dest,
		totalLatency++
		=}
	}
	else if(r0eb1 == true){
		{=
		r0eb2 = true,
		r0ebv2 = dest,
		totalLatency++
		=}
	}
	else{
		{=
		r0eb1 = true,
		r0ebv1 = dest,
		totalLatency++
		=}
	}
}

process enque_r0sb(){
	if(r0sb4 == true){
		tau		// buffer is full
	}
	else if(r0sb3 == true){
		{=
		r0sb4 = true,
		totalLatency++
		=}
	}
	else if(r0sb2 == true){
		{=
		r0sb3 = true,
		totalLatency++
		=}
	}
	else if(r0sb1 == true){
		{=
		r0sb2 = true,
		totalLatency++
		=}
	}
	else{
		{=
		r0sb1 = true,
		totalLatency++
		=}
	}
}

process enque_r1wb(bool dest){
	if(r1wb4 == true){
		tau		// buffer is full
	}
	else if(r1wb3 == true){
		{=
		r1wb4 = true,
		r1wbv4 = dest,
		totalLatency++
		=}
	}
	else if(r1wb2 == true){
		{=
		r1wb3 = true,
		r1wbv3 = dest,
		totalLatency++
		=}
	}
	else if(r1wb1 == true){
		{=
		r1wb2 = true,
		r1wbv2 = dest,
		totalLatency++
		=}
	}
	else{
		{=
		r1wb1 = true,
		r1wbv1 = dest,
		totalLatency++
		=}
	}
}

process enque_r1sb(){
	if(r1sb4 == true){
		tau		// buffer is full
	}
	else if(r1sb3 == true){
		{=
		r1sb4 = true,
		totalLatency++
		=}
	}
	else if(r1sb2 == true){
		{=
		r1sb3 = true,
		totalLatency++
		=}
	}
	else if(r1sb1 == true){
		{=
		r1sb2 = true,
		totalLatency++
		=}
	}
	else{
		{=
		r1sb1 = true,
		totalLatency++
		=}
	}
}

process enque_r2nb(){
	if(r2nb4 == true){
		tau		// buffer is full
	}
	else if(r2nb3 == true){
		{=
		r2nb4 = true,
		totalLatency++
		=}
	}
	else if(r2nb2 == true){
		{=
		r2nb3 = true,
		totalLatency++
		=}
	}
	else if(r2nb1 == true){
		{=
		r2nb2 = true,
		totalLatency++
		=}
	}
	else{
		{=
		r2nb1 = true,
		totalLatency++
		=}
	}
}

process enque_r2eb(bool dest){
	if(r2eb4 == true){
		tau		// buffer is full
	}
	else if(r2eb3 == true){
		{=
		r2eb4 = true,
		r2ebv4 = dest,
		totalLatency++
		=}
	}
	else if(r2eb2 == true){
		{=
		r2eb3 = true,
		r2ebv3 = dest,
		totalLatency++
		=}
	}
	else if(r2eb1 == true){
		{=
		r2eb2 = true,
		r2ebv2 = dest,
		totalLatency++
		=}
	}
	else{
		{=
		r2eb1 = true,
		r2ebv1 = dest,
		totalLatency++
		=}
	}
}

process enque_r3nb(){
	if(r3nb4 == true){
		tau		// buffer is full
	}
	else if(r3nb3 == true){
		{=
		r3nb4 = true,
		totalLatency++
		=}
	}
	else if(r3nb2 == true){
		{=
		r3nb3 = true,
		totalLatency++
		=}
	}
	else if(r3nb1 == true){
		{=
		r3nb2 = true,
		totalLatency++
		=}
	}
	else{
		{=
		r3nb1 = true,
		totalLatency++
		=}
	}
}

process enque_r3wb(bool dest){
	if(r3wb4 == true){
		tau		// buffer is full
	}
	else if(r3wb3 == true){
		{=
		r3wb4 = true,
		r3wbv4 = dest,
		totalLatency++
		=}
	}
	else if(r3wb2 == true){
		{=
		r3wb3 = true,
		r3wbv3 = dest,
		totalLatency++
		=}
	}
	else if(r3wb1 == true){
		{=
		r3wb2 = true,
		r3wbv2 = dest,
		totalLatency++
		=}
	}
	else{
		{=
		r3wb1 = true,
		r3wbv1 = dest,
		totalLatency++
		=}
	}
}
// ---- End process definitions ----


par{
:: Clock()
:: Top()
}
