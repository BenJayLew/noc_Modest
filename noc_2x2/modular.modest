option "dtmc";

//Top level varables
//const int BUFFERLENGTH = 4;
//const int NOCSIZE = 2;
//const int INJECTIONRATENUMERATOR = 1;
//const int INJECTIONRATEDENOMINATOR = 2;

const int DUR;
//const int NsRateDenominator;
//const int EwRateDenominator;
const int clkLower = 100; 
const int clkUpper = clkLower + DUR;
int(clkLower..clkUpper) clk;
//transient int(0..1) clk;
transient int(0..1) clk2;

action tick;
action tock;
action tack;


/*transient int //totalFlitsDelivered0 = 0;
transient int //totalFlitsDelivered1 = 0;
transient int //totalFlitsDelivered2 = 0;
transient int //totalFlitsDelivered3 = 0;
int //totalFlitsDelivered;*/



int(0..4) localLen;
int(0..4) ewLen;
int(0..4) nsLen;
bool localPriority;
bool nsPriority;
bool ewLockedns;
bool ewLockedlocal;
bool localLockedns;
//bool localLockedew;


int(0..1) sentEw;
int(0..1) sentNs;

int(1..2) localWillSend = 1; //0 indicates it's empty, 1 indicates it sends ew, 2 indicated ns
int(1..2) ewWillSend = 1; //0 indicates it's empty, 1 indicates it sends local, 2 indicates ns


// ------ Begin: properties ---------
//property Pr1 = Pmax(<> (clk >= clkUpper) );
//property Pr2 = Pmax(<>[S(sentEw) <= clkUpper-clkLower] ((clk) >= clkUpper) );
//property Pr3 = Xmax(S(sentEw), clk>=clkUpper);
//property Pr4 = Xmax(S(sentNs), clk>=clkUpper);
//property Pr5 = Pmax(<>[S(clk2) <= (clkUpper-clkLower)] (sentEw == 1));
//property Pr6 = Pmax(<>[S(clk2) <= (clkUpper-clkLower)] (sentNs == 1));
property pr11 = Pmax(<> (nsLen ==4 && clk == 112));
property pr12 = Pmax(<> (nsLen == 4 && clk == 113));
property pr13 = Pmax(<> (nsLen ==4 && clk == 114));
property pr14 = Pmax(<> (nsLen ==4 && clk == 115));
property pr15 = Pmax(<> (nsLen == 4 && clk == 116));
property pr16 = Pmax(<> (nsLen == 4 && clk == 117));
property pr17 = Pmax(<> (nsLen == 4 && clk == 118));
property pr18 = Pmax(<> (nsLen ==4 && clk == 119));
property pr19 = Pmax(<> (nsLen ==4 && clk == 120));
property pr20 = Pmax(<> (nsLen == 4 && clk == 121));
property pr21 = Pmax(<> (nsLen ==4 && clk == 122));
property pr22 = Pmax(<> (nsLen ==4 && clk == 123));
property pr23 = Pmax(<> (nsLen == 4 && clk == 124));
property pr24 = Pmax(<> (nsLen == 4 && clk == 125));
property pr25 = Pmax(<> (nsLen == 4 && clk == 126));
property pr26 = Pmax(<> (nsLen ==4 && clk == 127));
property pr27 = Pmax(<> (nsLen ==4 && clk == 128));
property pr28 = Pmax(<> (nsLen == 4 && clk == 129));
property pr29 = Pmax(<> (nsLen ==4 && clk == 130));
property pr30 = Pmax(<> (nsLen ==4 && clk == 131));
property pr31 = Pmax(<> (nsLen == 4 && clk == 132));
property pr32 = Pmax(<> (nsLen == 4 && clk == 133));
property pr33 = Pmax(<> (nsLen == 4 && clk == 134));
property pr34 = Pmax(<> (nsLen ==4 && clk == 135));
property pr35 = Pmax(<> (nsLen ==4 && clk == 136));
property pr36 = Pmax(<> (nsLen == 4 && clk == 137));
property pr37 = Pmax(<> (nsLen ==4 && clk == 138));
property pr38 = Pmax(<> (nsLen ==4 && clk == 139));
property pr39 = Pmax(<> (nsLen == 4 && clk == 140));
property pr40 = Pmax(<> (nsLen == 4 && clk == 141));
property pr41 = Pmax(<> (nsLen == 4 && clk == 142));
property pr42 = Pmax(<> (nsLen ==4 && clk == 143));
property pr43 = Pmax(<> (nsLen ==4 && clk == 144));
property pr44 = Pmax(<> (nsLen == 4 && clk == 145));
property pr45 = Pmax(<> (nsLen ==4 && clk == 146));
property pr46 = Pmax(<> (nsLen ==4 && clk == 147));
property pr47 = Pmax(<> (nsLen == 4 && clk == 148));
property pr48 = Pmax(<> (nsLen == 4 && clk == 149));
property pr49 = Pmax(<> (nsLen == 4 && clk == 150));
property pr50 = Pmax(<> (nsLen ==4 && clk == 151));
property pr51 = Pmax(<> (nsLen ==4 && clk == 152));
property pr52 = Pmax(<> (nsLen == 4 && clk == 153));
property pr53 = Pmax(<> (nsLen ==4 && clk == 154));
property pr54 = Pmax(<> (nsLen ==4 && clk == 155));
property pr55 = Pmax(<> (nsLen == 4 && clk == 156));
property pr56 = Pmax(<> (nsLen == 4 && clk == 157));
property pr57 = Pmax(<> (nsLen == 4 && clk == 158));
property pr58 = Pmax(<> (nsLen ==4 && clk == 159));
property pr59 = Pmax(<> (nsLen ==4 && clk == 160));
property pr60 = Pmax(<> (nsLen == 4 && clk == 161));
property pr61 = Pmax(<> (nsLen ==4 && clk == 162));
property pr62 = Pmax(<> (nsLen ==4 && clk == 163));
property pr63 = Pmax(<> (nsLen ==4 && clk == 164));
property pr64 = Pmax(<> (nsLen ==4 && clk == 165));
property pr65 = Pmax(<> (nsLen == 4 && clk == 166));
property pr66 = Pmax(<> (nsLen ==4 && clk == 167));
property pr67 = Pmax(<> (nsLen ==4 && clk == 168));
property pr68 = Pmax(<> (nsLen ==4 && clk == 169));
property pr69 = Pmax(<> (nsLen == 4 && clk == 170));
property pr70 = Pmax(<> (nsLen ==4 && clk == 171));
property pr71 = Pmax(<> (nsLen ==4 && clk == 172));
//property Pr15 = Pmax(<> (nsLen ==4 && clk == 1010));
//property Pr16 = Pmax(<> (nsLen ==4 && clk == 1011));
//property Pr17 = Pmax(<> (nsLen == 4 && clk == 1012));
//property Pr18 = Pmax(<> (nsLen == 4 && clk == 1013));

//propert Pr19 = Pmax(<> (nsLen >= 4));
// ------ End: properties ---------

process LocalBuffer() {

		if(clk%2 == 0) {

		 	tick {= 

					localLen += (localLen < 4) ? 1 : 0,		//Adds a flit to the local buffer of each NoC, if they are not already full
					sentNs = 0,
					sentEw = 0

				=}

		}
		else {

			tick {= sentNs = 0, sentEw = 0 =}
		};

		localBuffer();

		tack {= clk++, clk2 =1 =};

		if (clkUpper-clk <= 0) {
		 stop
		}
		else {
		LocalBuffer()
		}

}

process EwBuffer() {

		tick;
		ewBuffer();
		receiveEw();

		if (clkUpper-clk <= 0) {
		 stop
		}
		else {
		EwBuffer()
		}
			
}

process NsBuffer() {

		tick;
		tock;
		receiveNs();

		if (clkUpper-clk <= 0) {
		 stop
		}
		else {
		NsBuffer()
		}
			
}

process Send() {
		tick;
		tock;
		send();

		if (clkUpper-clk <= 0) {
		 stop
		}
		else {
		Send()
		}
}



process localBuffer() {


	if (localLen != 0) {


		if(localLockedns) {
			tock {= localWillSend = 2 =}
		}
		else {
			tock palt{
				:(1/3): {= localWillSend = 2 =}
				:(2/3): {= localWillSend = 1 =}
			}
		}

	} 

	else {
		tock
	}

}

process ewBuffer() {


	if (ewLen != 0) {

		if(ewLockedlocal) {
			tock {= ewWillSend = 1 =}
		}
		else if(ewLockedns) {
			tock {= ewWillSend = 2 =}
		}
		else {
			tock palt {
				:(1/2): {= ewWillSend = 1 =}
				:(1/2): {= ewWillSend = 2 =}
			}
		}
	} 

	else {
		tock
	}

}

process send() {

	if(ewLen == 0) {
		if(localLen == 0) {
			if(nsLen == 0) {
				tack
			}
			else {
				tack {= nsLen-=1 =}
			}
		}
		else if(localWillSend == 1) {//local tries ew
			if(nsLen == 0) {
				tack {= localLen-=1, sentEw = 1 =}
			}
			else {
				tack {= nsLen-=1, localLen-=1, sentEw = 1 =}
			}
		}
		else { //local tries ns
			if(nsLen == 0) {
				tack {= localLen-=1, localLockedns = false, sentNs = 1 =}
			}
			else {
				tack {= nsLen-=1, localLen-=1, localLockedns = false, sentNs = 1 =}
			}
		}

	}
	else if(ewWillSend == 1){  //Ew tries local
		if(localLen == 0) {
			if(nsLen == 0) {
				tack {= ewLen-=1, ewLockedlocal = false =}
			}
			else {
				if(nsPriority) {
					tack {= nsLen-=1, localPriority = false, nsPriority = false, ewLockedlocal = true =}
				}
				else {
					tack {= ewLen-=1, nsPriority = true, ewLockedlocal = false =}
				}
			}
		}
		else if(localWillSend == 1) {//local tries ew
			if(nsLen == 0) {
				tack {= ewLen-=1, localLen-=1, ewLockedlocal = false, sentEw = 1 =}
			}
			else {
				if(nsPriority) {
					tack {= nsLen-=1, localLen-= 1, localPriority = false, sentEw = 1, nsPriority = false, ewLockedlocal = true =}
				}
				else {
					tack {= ewLen-=1, localLen-= 1, nsPriority = true, ewLockedlocal = false, sentEw = 1 =}
				}
			}
		}
		else {//local tries ns
			if(nsLen == 0) {
				tack {= ewLen-=1, localLen-=1, localLockedns=false, ewLockedlocal = false, sentNs = 1  =}
			}
			else {
				if(nsPriority) {
					tack {= nsLen-=1, localLen-=1, nsPriority = false, localPriority = false, localLockedns = false, ewLockedlocal = true, sentNs = 1 =}
				}
				else {
					tack {= ewLen-=1, localLen-=1, nsPriority = true, ewLockedlocal = false, localLockedns = false, sentNs = 1 =}
				}
			}	
		}		
	}
	else{ //ew tries ns
		if(localLen == 0) {
			if(nsLen == 0) {
				tack {= ewLen-=1, ewLockedns = false, sentNs = 1 =}
			}
			else {
				tack {= ewLen-=1, nsLen-=1, ewLockedns = false, sentNs = 1 =}
			}
		}
		else if(localWillSend == 1) { //local tries ew
			if(nsLen == 0) {
				tack {= ewLen-=1, localLen-=1, ewLockedns = false, sentNs = 1, sentEw = 1=}
			}
			else {
				tack {= nsLen-=1, ewLen-=1, localLen-=1, ewLockedns = false, sentNs = 1, sentEw = 1=}
			}
		}
		else {//local tries ns
			if(nsLen == 0) {
				if(localPriority) {
					tack {= localLen-=1, localPriority = false, nsPriority = false, ewLockedns = true, localLockedns = false, sentNs = 1 =}
				}
				else {
					tack {= ewLen-=1, localPriority = true, ewLockedns = false, localLockedns = true, sentNs = 1 =}
				}
			}
			else {
				if(localPriority) {
					tack {= localLen-=1, nsLen-=1, localPriority = false, nsPriority = false, ewLockedns = true, localLockedns = false, sentNs = 1 =}
				}
				else {
					tack {= ewLen-=1, nsLen-= 1, localPriority = true, ewLockedns = false, localLockedns = true, sentNs = 1 =}
				}
			}	
		}	
	}

}
/*
process nsFull() {

}
*/
process receiveNs() {

	if(nsLen < 4) {
		if (clk == 100 || clk == 102 ) {
			tack
		}
		else if (clk == 101) {
			tack palt {
				:(1/3): {= 1: nsLen +=1 =}
			}
		}
		else {
			if(clk%2 == 0) {
				tack palt {
					:(1/6): {= 1: nsLen+=1 =}
				}
			}
			else {
				tack palt {
					:(2/3): {= 1: nsLen+= 1 =}
				}
			}
		}
	}
	else { tack }

}

process receiveEw() {

	if(ewLen < 4) {
		if(clk%2 == 1) {
			tack palt {
				:(2/3): {= 1: ewLen+=1 =}
			}
		}
		else {tack}
	}
	else { tack }

}

	





par{
:: Send()	
::  LocalBuffer()
::  EwBuffer()
::  NsBuffer()
}
