/*
NoC router IDs
	0 - 1
	|   |
	2 - 3
*/

option "dtmc";

//Top level varables
const int BUFFERLENGTH = 4;
const int NOCSIZE = 2;
const int OPTIMALRUNSMEASURE = 5;
const int clkLower = 100; 
const int clkUpper = 105;
int(clkLower..clkUpper) clk;

int test, test1;

int(0..3) startNode;

datatype intlist = { int(0.. ((NOCSIZE*NOCSIZE)-1)) hd, intlist option tl };

datatype buffer = {int(-1..3) dest, int(-1..4) val, int(0..4) id, bool serviced, int(0..4) priority, intlist option buff};		//Datatype for a buffer with the next buffer value, id of the buffer, whether the buffer was serviced last clock cycle or not, and the priority number of the buffer

datatype router = {int(0..3) unserviced, int(0..3) totalUnserviced, buffer[] bufferArray, buffer[] temp, int[]bufferID};	//Datatype for a router, includes router-specific variables and an array of buffers

router r0, r1, r2, r3;

int/*(0..(clkUpper - clkLower))*/ optimalRuns0, optimalRuns1, optimalRuns2, optimalRuns3;

router[] noc;

action tick;


// ------ Begin: properties ---------
property Pr1 = Pmax(<> (clk >= clkUpper));
property optimalRuns0 = Pmax(<> (optimalRuns0 >= OPTIMALRUNSMEASURE));
property optimalRuns1 = Pmax(<> (optimalRuns1 >= OPTIMALRUNSMEASURE));
property optimalRuns2 = Pmax(<> (optimalRuns2 >= OPTIMALRUNSMEASURE));
property optimalRuns3 = Pmax(<> (optimalRuns3 >= OPTIMALRUNSMEASURE));
// ------ End: properties ---------



// ------ Begin: function definitions ------- 
// Calculate length of list:
function int len(intlist option ls) = if ls == none then 0 else 1 + len(ls!.tl); // "!" accesses the value of a non-empty option (causes an error if the option is empty)

// Return the front of the queue, i.e., the last element of the given integer list. No changes are made to the list.
function int peekFront(intlist option ls) =
	 if ls == none then -1
	 else if ls!.tl == none then ls!.hd
	      else peekFront(ls!.tl);

//Remove the front of the queue, i.e., the last element of the given integer list. Return the modified list. 
function intlist option dequeue(intlist option ls) = 
	if ls == none then none
	else if	ls!.tl == none then none 
		 else some(intlist { hd: ls!.hd, tl: dequeue(ls!.tl) });	

//Insert a new entry n as the head of the list ls. If ls has already reached its capacity before adding n, return ls; otherwise, return modified ls with n as its head. 
function intlist option enqueue(int n, intlist option ls) = 
	if len(ls) == BUFFERLENGTH then ls
	else some(intlist { hd: n, tl: ls });		 

//Routing function	(x-y routing)
function int route(int dest, int routerID) =
	if dest == -1 then -1/*no flit*/
	else if (dest % NOCSIZE) > (routerID % NOCSIZE) then 1/*east*/
	else if (dest % NOCSIZE) < (routerID % NOCSIZE) then 3/*west*/
	else if (dest / NOCSIZE) > (routerID / NOCSIZE) then 2/*south*/
	else if (dest / NOCSIZE) < (routerID / NOCSIZE) then 0/*north*/
	else 4/*local*/
	;
// ------ End: function definitions ------- 


// ------ Begin: process definitions ------
//---- Paralell Processes ----
process Clock(){	
	tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	}   
}

process Top(){
	initialize();
	Populate();
	//tick;		//for measuring initial values in testing and maybe syncing population of routers?
	initialRoute(0);
	initialRoute(1);
	initialRoute(2);
	initialRoute(3);
	do{
		Arbiter_corner(0);
		Arbiter_corner(1);
		Arbiter_corner(2);
		Arbiter_corner(3);	
		
		Populate();	
		
		updateDestination(0, 0);
		updateDestination(1, 0);
		updateDestination(2, 0);
		
		updateDestination(0, 1);
		updateDestination(1, 1);
		updateDestination(2, 1);
		
		updateDestination(0, 2);
		updateDestination(1, 2);
		updateDestination(2, 2);
		
		updateDestination(0, 3);
		updateDestination(1, 3);
		updateDestination(2, 3);
		
		tick;

		if(clk>=clkUpper){
			stop
		}
		else{
			tau

		} 	
	}
}

process Populate(){
	//subPopulate(0);
	subPopulate(1);
	subPopulate(2);
	subPopulate(3)
}


//---- Sub processes ----
process Arbiter_corner(int routerID){
	//Service buffers-------------------------------------------------------------------------------------------------------
		
		//Buffer priority 0
		//<Service Buffer bufferArray[0]>--------------------------------------------------------
		{= 
		noc[routerID].bufferArray[0].serviced = true 
		=};
		
		//<Service buffer <bufferArray[1]> ------------------------------------------------------
		if((noc[routerID].bufferArray[1].val != -1) && (noc[routerID].bufferArray[1].val == noc[routerID].bufferArray[0].val)) {			//If buffer bufferArray[1] conflicts with bufferArray[0]
			{= 
			noc[routerID].bufferArray[1].serviced = false,
			noc[routerID].unserviced++ 		//Increment unserviced
			=}
		}
		else {
			{= 	//Service Buffer
			noc[routerID].bufferArray[1].serviced = true 
			=}
		};
		
		//<Service buffer bufferArray[2]> --------------------------------------------------------
		//If buffer bufferArray[2] conflicts with bufferArray[1] or bufferArray[0]
		if((noc[routerID].bufferArray[2].val != -1) && (noc[routerID].bufferArray[2].val == noc[routerID].bufferArray[1].val || noc[routerID].bufferArray[2].val == noc[routerID].bufferArray[0].val)){	
			{= 
			noc[routerID].bufferArray[2].serviced = false, 
			noc[routerID].unserviced++			//Increment unserviced
			=}
		}
		else {
			{= 		//Service Buffer
			noc[routerID].bufferArray[2].serviced = true 
			=}
		};
		
		
		//Increment optimal runs if there were no conflitcs -------------------------------------------------------------------
		if(noc[routerID].unserviced == 0 && routerID == 0){
			{= 
				noc[routerID].totalUnserviced = noc[routerID].unserviced,
				optimalRuns0++
			=}
		}
		else if(noc[routerID].unserviced == 0 && routerID == 1){
			{= 
				noc[routerID].totalUnserviced = noc[routerID].unserviced,
				optimalRuns1++
			=}
		}
		else if(noc[routerID].unserviced == 0 && routerID == 2){
			{= 
				noc[routerID].totalUnserviced = noc[routerID].unserviced,
				optimalRuns2++
			=}
		}
		else if(noc[routerID].unserviced == 0 && routerID == 3){
			{= 
				noc[routerID].totalUnserviced = noc[routerID].unserviced,
				optimalRuns3++
			=}
		}
		else{
			{= 
			noc[routerID].totalUnserviced = noc[routerID].unserviced
			=}
		};
		
		//Set priority values for the next run and update the value of the buffers----------------------------------------------
		setPriority(0, routerID);
		setPriority(1, routerID);
		setPriority(2, routerID);
		
		
		//Rewrite buffer array with new priority values-------------------------------------------------------------------------
		{= 
		noc[routerID].temp[noc[routerID].bufferArray[0].priority] = noc[routerID].bufferArray[0],
		noc[routerID].temp[noc[routerID].bufferArray[1].priority] = noc[routerID].bufferArray[1],
		noc[routerID].temp[noc[routerID].bufferArray[2].priority] = noc[routerID].bufferArray[2],
		
		noc[routerID].bufferID[noc[routerID].bufferArray[0].id] = noc[routerID].bufferArray[0].priority,
		noc[routerID].bufferID[noc[routerID].bufferArray[1].id] = noc[routerID].bufferArray[1].priority,
		noc[routerID].bufferID[noc[routerID].bufferArray[2].id] = noc[routerID].bufferArray[2].priority
		=};
		
		{= noc[routerID].bufferArray = noc[routerID].temp =}
}
	
//initialize values --------------------------------------------------------------------------------------------------------------------------------------------
process initialize(){
	{= noc = [r0, r1, r2, r3] =};
	
	initialize_node_nw(0);
	initialize_node_ne(1);
	initialize_node_sw(2);
	initialize_node_se(3)
}

process initialize_node_nw(int routerID){
	buffer east, south, local;
	{=
	noc[routerID].bufferArray = [east, south, local],
	noc[routerID].temp = [east, south, local],
	
	noc[routerID].bufferID = [-1, 0, 1, -1, 2],
	
	noc[routerID].bufferArray[0].id = 1, 
	noc[routerID].bufferArray[1].id = 2, 
	noc[routerID].bufferArray[2].id = 4,
	
	noc[routerID].bufferArray[0].dest = -1,
	noc[routerID].bufferArray[1].dest = -1,
	noc[routerID].bufferArray[2].dest = -1,
	
	noc[routerID].unserviced = 0
	
	=}
}

process initialize_node_ne(int routerID){
	buffer south, west, local;
	{=
	noc[routerID].bufferArray = [south, west, local],
	noc[routerID].temp = [south, west, local], 
	
	noc[routerID].bufferID = [-1, -1, 0, 1, 2],
	
	noc[routerID].bufferArray[0].id = 2, 
	noc[routerID].bufferArray[1].id = 3, 
	noc[routerID].bufferArray[2].id = 4,
	
	noc[routerID].bufferArray[0].dest = -1,
	noc[routerID].bufferArray[1].dest = -1,
	noc[routerID].bufferArray[2].dest = -1,
	
	noc[routerID].unserviced = 0
	=}
}

process initialize_node_sw(int routerID){
	buffer north, east, local;
	{=
	noc[routerID].bufferArray = [north, east, local],
	noc[routerID].temp = [north, east, local], 
	
	noc[routerID].bufferID = [0, 1, -1, -1, 2],
	
	noc[routerID].bufferArray[0].id = 0, 
	noc[routerID].bufferArray[1].id = 1, 
	noc[routerID].bufferArray[2].id = 4,
	
	noc[routerID].bufferArray[0].dest = -1,
	noc[routerID].bufferArray[1].dest = -1,
	noc[routerID].bufferArray[2].dest = -1,
	
	noc[routerID].unserviced = 0
	=}
}

process initialize_node_se(int routerID){
	buffer north, west, local;
	{=
	noc[routerID].bufferArray = [north, west, local],
	noc[routerID].temp = [north, west, local], 
	
	noc[routerID].bufferID = [0, -1, -1, 1, 2],
	
	noc[routerID].bufferArray[0].id = 0, 
	noc[routerID].bufferArray[1].id = 3, 
	noc[routerID].bufferArray[2].id = 4,
	
	noc[routerID].bufferArray[0].dest = -1,
	noc[routerID].bufferArray[1].dest = -1,
	noc[routerID].bufferArray[2].dest = -1,
	
	noc[routerID].unserviced = 0
	=}
	
}

//runs routing after initial setup (for testing)
process initialRoute(int routerID){
	
	{=
	noc[routerID].bufferArray[0].val = route(noc[routerID].bufferArray[0].dest, routerID),
	noc[routerID].bufferArray[1].val = route(noc[routerID].bufferArray[1].dest, routerID),
	noc[routerID].bufferArray[2].val = route(noc[routerID].bufferArray[2].dest, routerID)
	=}
}


//Sets the new priority value of buffer bufferArray[i] and forwards the detination if the buffer was serviced ------------------------------------------------------------------
process setPriority(int i, int routerID){
	if (noc[routerID].bufferArray[i].serviced == true){
		if(noc[routerID].bufferArray[i].val == -1){ tau }
		else if(noc[routerID].bufferArray[i].val == 4){
			tau		//flit delivered
		}
		else if(noc[routerID].bufferArray[i].val == 0 && len(noc[routerID - NOCSIZE].bufferArray[noc[routerID - NOCSIZE].bufferID[2]].buff) <= BUFFERLENGTH){	
			{=
			noc[routerID - NOCSIZE].bufferArray[noc[routerID - NOCSIZE].bufferID[2]].buff = enqueue(noc[routerID].bufferArray[i].dest, noc[routerID - NOCSIZE].bufferArray[noc[routerID - NOCSIZE].bufferID[2]].buff)
			=}
		}
		else if(noc[routerID].bufferArray[i].val == 1 && len(noc[routerID + 1].bufferArray[noc[routerID + 1].bufferID[3]].buff) <= BUFFERLENGTH){
			{=
			noc[routerID + 1].bufferArray[noc[routerID + 1].bufferID[3]].buff = enqueue(noc[routerID].bufferArray[i].dest, noc[routerID + 1].bufferArray[noc[routerID + 1].bufferID[3]].buff)
			=}
		}
		else if(noc[routerID].bufferArray[i].val == 2 && len(noc[routerID + NOCSIZE].bufferArray[noc[routerID + NOCSIZE].bufferID[0]].buff) <= BUFFERLENGTH){
			{=
			noc[routerID + NOCSIZE].bufferArray[noc[routerID + NOCSIZE].bufferID[0]].buff = enqueue(noc[routerID].bufferArray[i].dest, noc[routerID + NOCSIZE].bufferArray[noc[routerID + NOCSIZE].bufferID[0]].buff)
			=}
		}
		else if(noc[routerID].bufferArray[i].val == 3 && len(noc[routerID - 1].bufferArray[noc[routerID - 1].bufferID[1]].buff) <= BUFFERLENGTH){
			{=
			noc[routerID - 1].bufferArray[noc[routerID - 1].bufferID[1]].buff = enqueue(noc[routerID].bufferArray[i].dest, noc[routerID - 1].bufferArray[noc[routerID - 1].bufferID[1]].buff)
			=}
		}
		else {tau};
		
		{=
		noc[routerID].bufferArray[i].priority = i + noc[routerID].unserviced 				//Set new priority
		=}
	}
	else {
		{= 
		noc[routerID].bufferArray[i].priority = noc[routerID].totalUnserviced - noc[routerID].unserviced,		//Set new priority
		noc[routerID].unserviced-- 						//decrement unserviced
		=}
	}
}

//Updates the destination from the buffer if the buffer was serviced
process updateDestination(int i , int routerID){
	if(noc[routerID].bufferArray[i].serviced == true){
		{= 
		noc[routerID].bufferArray[i].dest = peekFront(noc[routerID].bufferArray[i].buff)
		=};
		{=
		noc[routerID].bufferArray[i].val = route(noc[routerID].bufferArray[i].dest, routerID),		//Update value from buffer
		noc[routerID].bufferArray[i].buff = dequeue(noc[routerID].bufferArray[i].buff)
		=}
	}
	else {tau}
}

//Populate the buffers with new values
process subPopulate(int routerID){
	{= noc[routerID].bufferArray[noc[routerID].bufferID[4]].buff = enqueue(((DiscreteUniform(1, 3) + routerID) % 4), noc[routerID].bufferArray[noc[routerID].bufferID[4]].buff) =}
}
// ------- End: process definitions -------

par{
::	Clock()
:: 	Top()
}
