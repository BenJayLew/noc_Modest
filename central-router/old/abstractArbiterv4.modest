const int clkLower = 100; 
const int clkUpper = 104;
int(clkLower..clkUpper) clk;

datatype buffer = {int(0..1) val, int(0..3) id, bool serviced, int(0..3) priority, int(0..1) output};

int(0..2) unserviced;
int(0..2) totalUnserviced;

int(0..((clkUpper - clkLower) * 4)) totalServiced = 0;
int(0..(clkUpper - clkLower)) optimalRuns = 0;

//0- no conflict, 1- 1 confilct, 2- 2 pairs of conflict, 3 - three-way conflict
int(0..3) state = 0;
int(0..3) pState = 0;

buffer north, east, south, west;

buffer[] a; 	//Array of the four buffers. a[0] is the highest priority
buffer[] temp;		//Temporary buffer used to update buffer a

action tick;

// ------ Begin: properties ---------
property Pr1 = Pmax(<> (clk >= clkUpper));

property TotalServiced = Pmax(<> (totalServiced >= ((clkUpper-clkLower)*3)));

property Runs1 = Pmax(<> (optimalRuns == 1));
property Runs2 = Pmax(<> (optimalRuns == 2));
property Runs3 = Pmax(<> (optimalRuns == 3));	
property Runs4 = Pmax(<> (optimalRuns == 4));
property Runs5 = Pmax(<> (optimalRuns == 5));
// ------ End: properties -----------


process Clock(){	

	tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	}   
	
}

process Arbiter(){
	initialize();
	
	//runtime loop
	do {
		
		if(state == 0){	//previous state: no conflict -------------------------------------------------------------------------------------------------------------
			if(a[0].val + a[1].val + a[2].val + a[3].val == 4){		//All 4 buffers have values
				palt{
					:( 9/81): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 0 =}
					:(48/81): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 0 =} 
					:(12/81): {= unserviced = 2, totalUnserviced = 2, state = 3, pState = 0 =}
					:(12/81): {= unserviced = 2, totalUnserviced = 2, state = 2, pState = 0 =}
				}
			}
			else{
				if(a[0].val + a[1].val + a[2].val + a[3].val == 3){		//3 buffers have values
					palt{
						:(11/27): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 0 =}
						:(15/27): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 0 =}
						:( 1/27): {= unserviced = 2, totalUnserviced = 2, state = 3, pState = 0 =}
					}
				}
				else{
					if(a[0].val + a[1].val + a[2].val + a[3].val == 2){		//2 buffers have values
						palt{
							:(7/9): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 0 =}
							:(2/9): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 0 =}
						}
					}
					else{
						if(a[0].val + a[1].val + a[2].val + a[3].val == 1){		//1 buffer has a value
							{= unserviced = 0, totalUnserviced = 0, state = 0, pState = 0 =}
						}
						else{
							tau
						}
					}
				}
			}
		}
		else {
			if(state == 1){		//previous state:  1 conflcit ----------------------------------------------------------------------------------------------------------------------
				if(a[0].val + a[1].val + a[2].val + a[3].val == 4){		//All 4 buffers have values
					palt{
						:( 3/27): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 1 =}		
						:(16/27): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 1 =}	//might be wrong		
						:( 4/27): {= unserviced = 2, totalUnserviced = 2, state = 3, pState = 1 =}
						:( 4/27): {= unserviced = 2, totalUnserviced = 2, state = 2, pState = 1 =}		
					}
				}
				else{
					if(a[0].val + a[1].val + a[2].val + a[3].val == 3){		//3 buffers have values
						palt{
							:(11/27): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 1 =}
							:(15/27): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 1 =}
							:( 1/27): {= unserviced = 2, totalUnserviced = 2, state = 3, pState = 1 =}
						}
					}
					else{
						if(a[0].val + a[1].val + a[2].val + a[3].val == 2){		//2 buffers have values
							palt{
								:(7/9): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 1 =}
								:(2/9): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 1 =}
							}
						}
						else{
							if(a[0].val + a[1].val + a[2].val + a[3].val == 1){		//1 buffer has a value
								{= unserviced = 0, totalUnserviced = 0, state = 0, pState = 1 =}
							}
							else{
								tau
							}
						}
					}
				}
			}
			else {
				if(state == 3){		//previous state: tri-way conflict ------------------------------------------------------------------------------------------------------------
					if(a[0].val + a[1].val + a[2].val + a[3].val == 4){		//All 4 buffers have values
						palt{
							:(8/18): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 3 =}
							:(6/18): {= unserviced = 2, totalUnserviced = 2, state = 3, pState = 3 =}	//re-calculated values (might be wrong)
							:(4/18): {= unserviced = 2, totalUnserviced = 2, state = 2, pState = 3 =}
						}
					}
					else{
						if(a[0].val + a[1].val + a[2].val + a[3].val == 3){		//3 buffers have values
							palt{
								:(5/6): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 3 =}
								:(1/6): {= unserviced = 2, totalUnserviced = 2, state = 3, pState = 3 =}
							}
						}
						else{
							if(a[0].val + a[1].val + a[2].val + a[3].val == 2){		//2 buffers have values
								{= unserviced = 1, totalUnserviced = 1, state = 1, pState = 3 =}
							}
							else{
								tau
							}
						}
					}
				}
				else{
					if(state == 2){		//previous state: 2 pairs of conflict -----------------------------------------------------------------------------------------------------
						if(a[0].val + a[1].val + a[2].val + a[3].val == 4){		//All 4 buffers have values
							if (pState == 0) {
								palt{
									:( 5/36): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 2 =}
									:(22/36): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 2 =} 
									:( 4/36): {= unserviced = 2, totalUnserviced = 2, state = 3, pState = 2 =}
									:( 5/36): {= unserviced = 2, totalUnserviced = 2, state = 2, pState = 2 =}
								}
							}
							else {
								if(pState == 1){
									palt{
										:( 29/216): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 2 =}
										:(130/216): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 2 =} 
										:( 26/216): {= unserviced = 2, totalUnserviced = 2, state = 3, pState = 2 =}
										:( 31/216): {= unserviced = 2, totalUnserviced = 2, state = 2, pState = 2 =}
									}
								}
								else {
									if(pState == 3) {
										palt{
											:( 9/72): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 2 =}
											:(42/72): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 2 =} 
											:(10/72): {= unserviced = 2, totalUnserviced = 2, state = 3, pState = 2 =}
											:(11/72): {= unserviced = 2, totalUnserviced = 2, state = 2, pState = 2 =}
										}
									}
									else {
										if(pState == 2){
											palt{
												:( 7/45): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 2 =}
												:(28/45): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 2 =} 
												:( 4/45): {= unserviced = 2, totalUnserviced = 2, state = 3, pState = 2 =}
												:( 6/45): {= unserviced = 2, totalUnserviced = 2, state = 2, pState = 2 =}
											}
										}
										else {tau}
									}
								}
							}
							
							
						}
						else{
							if(a[0].val + a[1].val + a[2].val + a[3].val == 3){		//3 buffers have values
								palt{
									:(1/2): {= unserviced = 0, totalUnserviced = 0, state = 0, pState = 2 =}
									:(1/2): {= unserviced = 1, totalUnserviced = 1, state = 1, pState = 2 =}
								}
							}
							else{
								if(a[0].val + a[1].val + a[2].val + a[3].val == 2){		//2 buffers have values
									{= unserviced = 0, totalUnserviced = 0, state = 0, pState = 2 =}
								}
								else{
									tau
								}
							}
						}
					}
					else{		//default case
						tau{= state = 0 =}
					}
				}
			}
		};
		
		{= totalServiced = totalServiced + 4 - unserviced =};
		
		//Assign unserviced variables
		if(unserviced == 0){
			{= a[0].serviced = true, a[1].serviced = true, a[2].serviced = true, a[3].serviced = true, optimalRuns++ =}
		}
		else {
			if(state == 1){
				{= a[0].serviced = true =}; 
				palt{
					:(1/6): {= a[1].serviced = false, a[2].serviced = true, a[3].serviced = true =}
					:(2/6): {= a[1].serviced = true, a[2].serviced = false, a[3].serviced = true =}
					:(3/6): {= a[1].serviced = true, a[2].serviced = true, a[3].serviced = false =}
				}
			}
			else{
				if(state == 3){
					{= a[0].serviced = true =}; 
					palt{
						:(1/4): {= a[1].serviced = false, a[2].serviced = false, a[3].serviced = true =}
						:(2/4): {= a[1].serviced = true, a[2].serviced = false, a[3].serviced = false =}
						:(1/4): {= a[1].serviced = false, a[2].serviced = true, a[3].serviced = false =}
					}
				}
				else {
					if(state == 2){
						{= a[0].serviced = true =}; 
						palt{
							:(2/3): {= a[1].serviced = true, a[2].serviced = false, a[3].serviced = false =}
							:(1/3): {= a[1].serviced = false, a[2].serviced = true, a[3].serviced = false =}
						}
					}
					else{
						tau
					}
				}
			}
		};
		
		setPriority(0);
		setPriority(1);
		setPriority(2);
		setPriority(3);
		
		{= 
		temp[a[0].priority] = a[0],
		temp[a[1].priority] = a[1],
		temp[a[2].priority] = a[2],
		temp[a[3].priority] = a[3] 
		=};
		
		tick {= a = temp =};
		
		
		if (clk >= clkUpper) {
			stop
		}
		else {
			tau
		}
		
	}
}

process initialize(){
	{= 
	a = [north, east, south, west],
	temp = [north, east, south, west], 
	
	a[0].id = 0, 
	a[1].id = 1, 
	a[2].id = 2, 
	a[3].id = 3,  
	
	a[0].val = 1, 
	a[1].val = 1, 
	a[2].val = 1, 
	a[3].val = 1
	
	=}
	
}

process setPriority(int i){
	if (a[i].serviced == true){
		{= 
		//a[i].val = DiscreteUniform(0, 1),	//Update value	
		a[i].priority = i + unserviced 						//Set new priority
		=}
		//<update buffer value and dequeue buffer>
	}
	else {
		{= 
		a[i].priority = totalUnserviced - unserviced,		//Set new priority
		unserviced-- 						//decrement unserviced
		=}
	}
}

par{
::	Clock()
::	Arbiter()
}