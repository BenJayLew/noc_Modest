const int BUFFERLENGTH = 4;
const int clkLower = 100; 
const int clkUpper = 101;
int(clkLower..clkUpper) clk;

datatype intlist = { int(0..4) hd, intlist option tl };

datatype buffer = {int(-1..4) val, int(0..4) id, bool serviced, int(0..4) priority, intlist option buff};		//Datatype for a buffer with the next buffer value, id of the buffer, whether the buffer was serviced last clock cycle or not, and the priority number of the buffer
int(0..3) unserviced;		//Number of unserviced buffers, iterates down when unserviced buffer's priority is set
int(0..3) totalUnserviced;	//Total number of unserviced buffers in a clock cycle
int(0..((clkUpper-clkLower)*4)) totalServiced = 0;
int(0..(clkUpper-clkLower))optimalRuns = 0;

//intlist option buff = none;

buffer north, east, south, west, local;

buffer[] a; 	//Array of the four buffers. a[0] is the highest priority
buffer[] temp;		//Temporary buffer used to update buffer a

action tick;

// ------ Begin: properties ---------
property Pr1 = Pmax(<> (clk >= clkUpper));

//property TotalServiced = Pmax(<> (totalServiced >= ((clkUpper-clkLower)*3)));		//Probablility that the arbiter servieces at least 15 buffers out of a possible 20. probablity the arbiter is at least 75% efficient

//property Runs1 = Pmax(<> (optimalRuns == 1));		//Probablility that there was at least 1 cycle where all buffers were serviced
//property Runs2 = Pmax(<> (optimalRuns == 2));		//Probablility that there was at least 2 cycles where all buffers were serviced
//property Runs3 = Pmax(<> (optimalRuns == 3));		//Probablility that there was at least 3 cycles where all buffers were serviced
//property Runs4 = Pmax(<> (optimalRuns == 4));		//Probablility that there was at least 4 cycles where all buffers were serviced
//property Runs5 = Pmax(<> (optimalRuns == 5));		//Probablility that there was at least 5 cycles where all buffers were serviced
// ------ End: properties ---------



// ------ Begin: function definitions ------- 
// Calculate length of list:
function int len(intlist option ls) = if ls == none then 0 else 1 + len(ls!.tl); // "!" accesses the value of a non-empty option (causes an error if the option is empty)

// Return the front of the queue, i.e., the last element of the given integer list. No changes are made to the list.
function int peekFront(intlist option ls) =
	 if ls == none then -1
	 else if ls!.tl == none then ls!.hd
	      else peekFront(ls!.tl);

//Remove the front of the queue, i.e., the last element of the given integer list. Return the modified list. 
function intlist option dequeue(intlist option ls) = 
	if ls == none then none
	else if	ls!.tl == none then none 
		 else some(intlist { hd: ls!.hd, tl: dequeue(ls!.tl) });	

//Insert a new entry n as the head of the list ls. If ls has already reached its capacity before adding n, return ls; otherwise, return modified ls with n as its head. 
function intlist option enqueue(int n, intlist option ls) = 
	if len(ls) == BUFFERLENGTH then ls
	else some(intlist { hd: n, tl: ls });		 
		  
// ------ End: function definitions ------- 



	

process Clock()
{	
	tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	}   
	
}



//Adds a new random value to the buffer
// Parralel process 
/*process addBuffer()
{  
	do{
		tick{=
		//a[0].buff = enqueue((DiscreteUniform(1, 3) + a[0].id) % 4, a[0].buff),
		//a[1].buff = enqueue((DiscreteUniform(1, 3) + a[1].id) % 4, a[1].buff),
		//a[2].buff = enqueue((DiscreteUniform(1, 3) + a[2].id) % 4, a[2].buff),
		//a[3].buff = enqueue((DiscreteUniform(1, 3) + a[3].id) % 4, a[3].buff)
		
		a[0].buff = enqueue(3, a[0].buff),
		a[1].buff = enqueue(3, a[1].buff),
		a[2].buff = enqueue(3, a[2].buff),
		a[3].buff = enqueue(1, a[3].buff)
		=};
	
		if (clk >= clkUpper) {
			stop
		}
		else {
			tau
		}
	}
  
}
*/

//In Line process
process addBuffer()
{  
	{=
	a[0].buff = enqueue((DiscreteUniform(1, 4) + a[0].id) % 5, a[0].buff),
	a[1].buff = enqueue((DiscreteUniform(1, 4) + a[1].id) % 5, a[1].buff),
	a[2].buff = enqueue((DiscreteUniform(1, 4) + a[2].id) % 5, a[2].buff),
	a[3].buff = enqueue((DiscreteUniform(1, 4) + a[3].id) % 5, a[3].buff),
	a[3].buff = enqueue((DiscreteUniform(1, 4) + a[4].id) % 5, a[4].buff)
	=}
}


// ------------------------------------------------------------------- Arbiter ------------------------------------------------------------------------------------------------------

//Main process for the arbiter ---------------------------------------------------------------------------------------------------------------------------------
process Arbiter(){
	initialize();
	addBuffer();
	
	//runtime loop
	do {
		//Service buffers-------------------------------------------------------------------------------------------------------
		
		//Buffer priority 0
		//<Service Buffer a[0]>--------------------------------------------------------
		
		
		{= 
		a[0].serviced = true 
		=};
		
		
		//<Service buffer <a[1]> ------------------------------------------------------
		if((a[1].val != -1) && (a[1].val == a[0].val)) {			//If buffer a[1] conflicts with a[0]
			{= 
			a[0].serviced = true, 
			a[1].serviced = false,
			unserviced++ 		//Increment unserviced
			=}
		}
		else {
			{= 
			a[0].serviced = true, 		//Service Buffer
			a[1].serviced = true 
			=}
		};
		
		//<Service buffer a[2]> --------------------------------------------------------
		//If buffer a[2] conflicts with a[1] or a[0]
		if((a[2].val != -1) && (a[2].val == a[1].val || a[2].val == a[0].val)){	
			{= 
			a[2].serviced = false, 
			unserviced++			//Increment unserviced
			=}
		}
		else {
			{= 		//Service Buffer
			a[2].serviced = true 
			=}
		};
		
		//<Service buffer a[3]> ---------------------------------------------------------
		//If buffer a[3] conflicts with a[2], a[1], or a[0]
		if((a[3].val != -1) && (a[3].val == a[2].val || a[3].val == a[1].val || a[3].val == a[0].val)){	
			{= 
			a[3].serviced = false,
			unserviced++ 			//Increment unserviced
			=}
		}
		else {
			{= 	//Service Buffer
			a[3].serviced = true 
			=}
		};
		
		//<Service buffer a[4]> ---------------------------------------------------------
		//If buffer a[4] conflicts with a[3], a[2], a[1], or a[0]
		if((a[4].val != -1) && (a[3].val == a[2].val || a[3].val == a[1].val || a[3].val == a[0].val)){	
			{= 
			a[3].serviced = false,
			unserviced++ 			//Increment unserviced
			=}
		}
		else {
			{= 	//Service Buffer
			a[3].serviced = true 
			=}
		};
		
		
		//Increment optimal runs if there were no conflitcs -------------------------------------------------------------------
		if (unserviced == 0){
			{= 
			optimalRuns++,
			totalUnserviced = unserviced
			=}
		}
		else {
			{= 
			totalUnserviced = unserviced
			=}
		};
		
		//Set priority values for the next run and update the value of the buffers----------------------------------------------
		setPriority(0);
		setPriority(1);
		setPriority(2);
		setPriority(3);
		setPriority(4);
		
		
		//Rewrite buffer array with new priority values-------------------------------------------------------------------------
		{= 
		temp[a[0].priority] = a[0],
		temp[a[1].priority] = a[1],
		temp[a[2].priority] = a[2],
		temp[a[3].priority] = a[3],
		temp[a[4].priority] = a[4] 
		=};
		
		tick {= 
		a = temp
		/*,
		a[0].buff = enqueue((DiscreteUniform(1, 4) + a[0].id) % 5, a[0].buff),
		a[1].buff = enqueue((DiscreteUniform(1, 4) + a[1].id) % 5, a[1].buff),
		a[2].buff = enqueue((DiscreteUniform(1, 4) + a[2].id) % 5, a[2].buff),
		a[2].buff = enqueue((DiscreteUniform(1, 4) + a[3].id) % 5, a[3].buff),
		a[3].buff = enqueue((DiscreteUniform(1, 4) + a[4].id) % 5, a[4].buff)	
		*/		
		=};
		//addBuffer();
		
		if (clk >= clkUpper) {
			stop
		}
		else {
			tau
		}
		
		
	}
}

//initialize values --------------------------------------------------------------------------------------------------------------------------------------------
process initialize(){
	{= 
	a = [north, east, south, west, local],
	temp = [north, east, south, west, local], 
	
	a[0].id = 0, 
	a[1].id = 1, 
	a[2].id = 2, 
	a[3].id = 3,  
	a[4].id = 4,
	
	a[0].val = 1,
	a[1].val = 2,
	a[2].val = 3,
	a[3].val = 4,
	a[4].val = 0,
	
	/*
	a[0].val = DiscreteUniform(1, 4),
	a[1].val = (DiscreteUniform(1, 4) + 1) % 5,
	a[2].val = (DiscreteUniform(1, 4) + 2) % 5,
	a[3].val = (DiscreteUniform(1, 4) + 3) % 5,
	a[4].val = DiscreteUniform(0, 3),
	*/
	
	unserviced = 0
	=}

	
}

//Sets the new priority value of buffer a[i] and updates the value if the buffer was serviced ------------------------------------------------------------------
process setPriority(int i){
	if (a[i].serviced == true){
		{= 
		a[i].val = peekFront(a[i].buff),		//Update value from buffer
		a[i].buff = dequeue(a[i].buff),			//deque buffer
		a[i].priority = i + unserviced 				//Set new priority
		=}
	}
	else {
		{= 
		a[i].priority = totalUnserviced - unserviced,		//Set new priority
		unserviced-- 						//decrement unserviced
		=}
	}
}



par{
::	Clock()
::	Arbiter()
//::	addBuffer()
}