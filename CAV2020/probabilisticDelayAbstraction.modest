option "dtmc";

//Top level varables
const int BUFFERLENGTH = 4;
const int NOCSIZE = 2;
const int INJECTIONRATENUMERATOR = 1;
const int INJECTIONRATEDENOMINATOR = 2;

const int DUR;
const int clkLower = 100;
const int clkUpper = clkLower + DUR;
int(clkLower..clkUpper) clk;
//transient int(0..1) clk;

int(0..4) optimalRunsIncrement = 0;

int(0..10) optimalRuns;

action tick;

//int totalFlitsDelivered = 0;

datatype node = {	bool localB1, bool localB2, bool localB3, bool localB4, bool localLockedns, bool localLockedew,
					bool ewB1, bool ewB2, bool ewB3, bool ewB4, bool ewLockedns, bool ewLockedlocal, 
					bool nsB1, bool nsB2, bool nsB3, bool nsB4, bool a1, bool a2, bool a3
//					, int local_ew_count, int local_ns_count, int ew_ns_count, int ew_local_count, int ns_local_count
					};

//node r0, r1, r2, r3;

node[] noc = [node {localB1:false}, node {localB1:false}, node {localB1:false}, node {localB1:false}];

// ------ Begin: properties ---------
property p1 = Pmax (<> (optimalRuns >= 1));
//property Pr1 = Pmax(<> (totalFlitsDelivered >= 25));
//property p1 = Pmax(<>[S(clk)<=(clkUpper-clkLower)] (totalFlitsDelivered >= 2));
// ------ End: properties ---------

function int nsChannel(int n) = (((int)(n/2))*(n - 2) + (-((int)(n/2)) + 1)*(n + 2));

function int ewChannel(int n) = (n % 2)*(n - 1) + (-(n % 2) + 1)*(n + 1);

process Clock(){	
	
	//tick{= clk = 1 =};
	//Clock()
	
	
	tick {= clk++,
			optimalRuns += optimalRunsIncrement	
		=};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	} 
	
}

process Top(){
//	initialize();
	do{
		populate();
		arbiter(0);
		arbiter(1);
		arbiter(2);
		arbiter(3);
		
		tick;
		
		if(clk>=clkUpper){
			stop
		}
		else{
			tau

		} 	
		
	}
}
/*
process initialize(){
	{=
	noc = [r0, r1, r2, r3]
	=}
}
*/
process populate(){
	
	if((clk % INJECTIONRATEDENOMINATOR) < INJECTIONRATENUMERATOR){
		{=
		noc[0].localB4 = true,
		noc[1].localB4 = true,
		noc[2].localB4 = true,
		noc[3].localB4 = true
		=}
	}
	else {tau};
		
	subPopulate(0);
	subPopulate(1);
	subPopulate(2);
	subPopulate(3)
}

process subPopulate(int routerID){
	if(noc[routerID].localB3 == false){
		{= 	noc[routerID].localB3 = noc[routerID].localB4,
			noc[routerID].localB4 = false
		=}
	}
	else {tau};
	if(noc[routerID].localB2 == false){
		{= 	noc[routerID].localB2 = noc[routerID].localB3,
			noc[routerID].localB3 = noc[routerID].localB4
		=}
	}
	else {tau};
	if(noc[routerID].localB1 == false){
		{= 	noc[routerID].localB1 = noc[routerID].localB2,
			noc[routerID].localB2 = noc[routerID].localB3,
			noc[routerID].localB3 = noc[routerID].localB4,
			noc[routerID].localB4 = false
		=}
	}
	else {tau};
	
	if(noc[routerID].ewB3 == false){
		{= 	noc[routerID].ewB3 = noc[routerID].ewB4,
			noc[routerID].ewB4 = false
		=}
	}
	else {tau};
	if(noc[routerID].ewB2 == false){
		{= 	noc[routerID].ewB2 = noc[routerID].ewB3,
			noc[routerID].ewB3 = noc[routerID].ewB4
		=}
	}
	else {tau};
	if(noc[routerID].ewB1 == false){
		{= 	noc[routerID].ewB1 = noc[routerID].ewB2,
			noc[routerID].ewB2 = noc[routerID].ewB3,
			noc[routerID].ewB3 = noc[routerID].ewB4,
			noc[routerID].ewB4 = false
		=}
	}
	else {tau};
	
	if(noc[routerID].nsB3 == false){
		{= 	noc[routerID].nsB3 = noc[routerID].nsB4,
			noc[routerID].nsB4 = false
		=}
	}
	else {tau};
	if(noc[routerID].nsB2 == false){
		{= 	noc[routerID].nsB2 = noc[routerID].nsB3,
			noc[routerID].nsB3 = noc[routerID].nsB4
		=}
	}
	else {tau};
	if(noc[routerID].nsB1 == false){
		{= 	noc[routerID].nsB1 = noc[routerID].nsB2,
			noc[routerID].nsB2 = noc[routerID].nsB3,
			noc[routerID].nsB3 = noc[routerID].nsB4,
			noc[routerID].nsB4 = false
		=}
	}
	else {tau}
		
}

process arbiter(int n){
	
	if(noc[n].localB1 == true && noc[n].ewB1 == true && noc[n].nsB1 == true){ //All buffers have flits
		if(noc[n].localLockedns == true && noc[n].ewLockedlocal == true){
			ew_ns_conflict_local_ns(n)
		}
		else if(noc[n].localLockedns == true && noc[n].ewLockedns == true){
			local_ew_conflict_ns_serviced(n)
		}
		else if(noc[n].localLockedew == true && noc[n].ewLockedlocal == true){
			ew_ns_conflict_local_ew(n)
		}
		else if(noc[n].localLockedew == true && noc[n].ewLockedns == true){
			no_conflict_all(n)
		}
		else if(noc[n].localLockedns == true && noc[n].ewLockedlocal == false && noc[n].ewLockedns == false){
			palt{
				:(1/2): local_ew_conflict_ns_serviced(n)
				:(1/2): ew_ns_conflict_local_ns(n)
			}
		}
		else if(noc[n].localLockedew == true && noc[n].ewLockedlocal == false && noc[n].ewLockedns == false){
			palt{
				:(1/2): ew_ns_conflict_local_ew(n)
				:(1/2): no_conflict_all(n)
			}
		}
		else if(noc[n].localLockedns == false && noc[n].localLockedew == false && noc[n].ewLockedlocal == true){
			palt{
				:(2/3): ew_ns_conflict_local_ew(n)
				:(1/3): ew_ns_conflict_local_ns(n)
			}
		}
		else if(noc[n].localLockedns == false && noc[n].localLockedew == false && noc[n].ewLockedns == true){
			palt{
				:(2/3): no_conflict_all(n)
				:(1/3): local_ew_conflict_ns_serviced(n)
			}
		}
		else{
			palt{
				:(1/3):	no_conflict_all(n)		
				:(1/6): local_ew_conflict_ns_serviced(n)
				:(1/3): ew_ns_conflict_local_ew(n)
				:(1/6): ew_ns_conflict_local_ns(n)
			}
		}
	}
	
	else if(noc[n].localB1 == true && noc[n].ewB1 == true && noc[n].nsB1 == false){ //local and ew buffers have flits
		if(noc[n].localLockedns == true && noc[n].ewLockedlocal == true){
			no_conflict_localns_ewlocal(n)
		}
		else if(noc[n].localLockedns == true && noc[n].ewLockedns == true){
			local_ew_conflict_ns_empty(n)
		}
		else if(noc[n].localLockedew == true && noc[n].ewLockedlocal == true){
			no_conflict_localew_ewlocal(n)
		}
		else if(noc[n].localLockedew == true && noc[n].ewLockedns == true){
			no_conflict_localew_ewns(n)
		}
		else if(noc[n].localLockedns == true && noc[n].ewLockedlocal == false && noc[n].ewLockedns == false){
			palt{
				:(1/2): local_ew_conflict_ns_empty(n)
				:(1/2): no_conflict_localns_ewlocal(n)
			}
		}
		else if(noc[n].localLockedew == true && noc[n].ewLockedlocal == false && noc[n].ewLockedns == false){
			palt{
				:(1/2): no_conflict_localew_ewns(n)
				:(1/2): no_conflict_localew_ewlocal(n)
			}
		}
		else if(noc[n].localLockedns == false && noc[n].localLockedew == false && noc[n].ewLockedlocal == true){
			palt{
				:(2/3): no_conflict_localew_ewlocal(n)
				:(1/3): no_conflict_localns_ewlocal(n)
			}
		}
		else if(noc[n].localLockedns == false && noc[n].localLockedew == false && noc[n].ewLockedns == true){
			palt{
				:(2/3): no_conflict_localew_ewns(n)
				:(1/3): local_ew_conflict_ns_empty(n)
			}
		}
		else{
			palt{
				:(1/3):	no_conflict_localew_ewlocal(n)
				:(1/3):	no_conflict_localew_ewns(n)
				:(1/6):	no_conflict_localns_ewlocal(n)
				:(1/6): local_ew_conflict_ns_empty(n)
			}
		}
	}
	
	
	else if(noc[n].localB1 == true && noc[n].ewB1 == false && noc[n].nsB1 == true){ //local and ns buffers have flits
		if(noc[n].localLockedns == true){
			no_conflict_localns_ns(n)
		}
		else if(noc[n].localLockedew == true){
			no_conflict_localew_ns(n)
		}
		else{
			palt{
				:(2/3): no_conflict_localew_ns(n)
				:(1/3): no_conflict_localns_ns(n)
			}
		}
	}
		
	else if(noc[n].localB1 == false && noc[n].ewB1 == true && noc[n].nsB1 == true){ //ew and ns buffers have flits
		if(noc[n].ewLockedlocal == true){
			ew_ns_conflcit_local_empty(n)
		}
		else if(noc[n].ewLockedns == true){
			no_conflict_ewns_ns(n)
		}
		else{
			palt{
				:(1/2): ew_ns_conflcit_local_empty(n)
				:(1/2): no_conflict_ewns_ns(n)
			}
		}
	}
	
	else if(noc[n].localB1 == true && noc[n].ewB1 == false && noc[n].nsB1 == false){ //Only the local buffer has a flit
		no_conflict_local_only(n)
	}
	
	else if(noc[n].localB1 == false && noc[n].ewB1 == true && noc[n].nsB1 == false){ //Only the ew buffer has a flit
		no_conflict_ew_only(n)
	}
	
	else if(noc[n].localB1 == false && noc[n].ewB1 == false && noc[n].nsB1 == true){ //Only the ns buffer has a flit
		no_conflict_ns_only(n)
	}
	
	else {tau} //No flits
}

//Flit forwarding processes
process local_ew_conflict_ns_serviced(int n){
	if((noc[n].a1 || (noc[n].a2 && noc[n].a3))){				//localB1 and ewB1 conflict
		{=
//		totalFlitsDelivered++,			//service nsB1 buffer
		noc[n].nsB1 = false,
//		noc[n].ns_local_count++,
		
		noc[n].localB1 = (noc[nsChannel(n)].nsB4),  	//service localB1 buffer
		noc[n].localLockedns = (noc[nsChannel(n)].nsB4),
		1: noc[nsChannel(n)].nsB4 = true,	
//		noc[n].local_ns_count++,
		
		noc[n].ewLockedns = true,		//lock ewB1 to the nsB1 direction for next cycle.
		
		noc[n].a1 = (!(noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2)) || (!(noc[nsChannel(n)].nsB4) && (noc[n].a2) && !(noc[n].a3)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a1)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a2) && (noc[n].a3)),			//update aribiter priority positions
		noc[n].a2 = (!(noc[nsChannel(n)].nsB4) && (noc[n].a1)) || ((noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a2) && !(noc[n].a3)),
		noc[n].a3 = !(noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2) && (noc[n].a3)
		=}
	}
	else{
		{=
//		totalFlitsDelivered++,			//service nsB1 buffer
		noc[n].nsB1 = false,
		
		noc[n].ewB1 = (noc[nsChannel(n)].nsB4),		//ew sends if the ns channel can accept a flit
		noc[n].ewLockedns = noc[nsChannel(n)].nsB4,		
		1: noc[nsChannel(n)].nsB4 = true, 	//service es buffer
//		noc[n].ew_ns_count++,
		
		noc[n].localLockedns = true,		//lock localB1 to the nsB1 direction for next cycle.
		
		noc[n].a1 = (!(noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2)) || (!(noc[nsChannel(n)].nsB4) && (noc[n].a2) && !(noc[n].a3)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a1)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a2) && (noc[n].a3)),			//update aribiter priority positions
		noc[n].a2 = (!(noc[nsChannel(n)].nsB4) && (noc[n].a1)) || ((noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a2) && !(noc[n].a3)),
		noc[n].a3 = !(noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2) && (noc[n].a3)
		=}
	}
}

process local_ew_conflict_ns_empty(int n){
	if((noc[n].a1 || (noc[n].a2 && noc[n].a3))){				//localB1 and ewB1 conflict
		{=
		
		noc[n].localB1 = (noc[nsChannel(n)].nsB4),  	//service localB1 buffer
		noc[n].localLockedns = (noc[nsChannel(n)].nsB4),
		1: noc[nsChannel(n)].nsB4 = true,	
//		noc[n].local_ns_count++,
	
		noc[n].ewLockedns = true,		//lock ewB1 to the nsB1 direction for next cycle.
		
		noc[n].a1 = (!(noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2)) || (!(noc[nsChannel(n)].nsB4) && (noc[n].a2) && !(noc[n].a3)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a1)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a2) && (noc[n].a3)),			//update aribiter priority positions
		noc[n].a2 = (!(noc[nsChannel(n)].nsB4) && (noc[n].a1)) || ((noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a2) && !(noc[n].a3)),
		noc[n].a3 = !(noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2) && (noc[n].a3)
		=}
	}
	else{
		{=		
		noc[n].ewB1 = (noc[nsChannel(n)].nsB4),		//ew sends if the ns channel can accept a flit
		noc[n].ewLockedns = noc[nsChannel(n)].nsB4,		
		1: noc[nsChannel(n)].nsB4 = true, 	//service es buffer
//		noc[n].ew_ns_count++,
		
		noc[n].localLockedns = true,		//lock localB1 to the nsB1 direction for next cycle.

		noc[n].a1 = (!(noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2)) || (!(noc[nsChannel(n)].nsB4) && (noc[n].a2) && !(noc[n].a3)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a1)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a2) && (noc[n].a3)),			//update aribiter priority positions
		noc[n].a2 = (!(noc[nsChannel(n)].nsB4) && (noc[n].a1)) || ((noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a2) && !(noc[n].a3)),
		noc[n].a3 = !(noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2) && (noc[n].a3)		=}
	}
}

process ew_ns_conflict_local_ew(int n){ 
	if(noc[n].a3){
		{= 
		noc[n].localB1 = noc[ewChannel(n)].ewB4,
		noc[n].localLockedew = noc[ewChannel(n)].ewB4,
		1: noc[ewChannel(n)].ewB4 = true, 		//service localB1 buffer in ewB1 direction
//		noc[n].local_ew_count++,
		
//		totalFlitsDelivered ++,				//service nsB1 buffer
		noc[n].nsB1 = false,
//		noc[n].ns_local_count++,
		
		noc[n].ewLockedlocal = true,			//lock ewB1 to localB1 for next cycle
		
		noc[n].a1 = ((noc[ewChannel(n)].ewB4) && (noc[n].a1)) || ((noc[ewChannel(n)].ewB4) && (noc[n].a2)),						//reset arbiter priority positions
		noc[n].a2 = (!(noc[ewChannel(n)].ewB4) && (noc[n].a1)) || ((noc[ewChannel(n)].ewB4) && !(noc[n].a1) && !(noc[n].a2)),
		noc[n].a3 = !noc[n].a3
		=}	
	}
	else{
		{= 
		noc[n].localB1 = noc[ewChannel(n)].ewB4,
		1: noc[ewChannel(n)].ewB4 = true, 		//service localB1 buffer in ewB1 direction
//		noc[n].local_ew_count++,
		
//		totalFlitsDelivered ++,				//service ewB1 buffer
		noc[n].ewB1 = false,
//		noc[n].ew_local_count++,
		noc[n].ewLockedlocal = false,
		
		noc[n].a1 = ((noc[ewChannel(n)].ewB4) && (noc[n].a1)) || ((noc[ewChannel(n)].ewB4) && (noc[n].a2)),						//reset arbiter priority positions
		noc[n].a2 = (!(noc[ewChannel(n)].ewB4) && (noc[n].a1)) || ((noc[ewChannel(n)].ewB4) && !(noc[n].a1) && !(noc[n].a2)),
		noc[n].a3 = !noc[n].a3
		=}	
	}
}

process ew_ns_conflict_local_ns(int n){
	if(noc[n].a3){						
		{= 
		noc[n].localB1 = noc[nsChannel(n)].nsB4,
		noc[n].localLockedns = noc[nsChannel(n)].nsB4,
		1: noc[nsChannel(n)].nsB4 = true, 	//service localB1 buffer in nsB1 direction
//		noc[n].local_ns_count++,
		
//		totalFlitsDelivered++,				//service nsB1 buffer
		noc[n].nsB1 = false,
//		noc[n].ns_local_count++,
		
		noc[n].ewLockedlocal = true,			//lock ewB1 to localB1 for next cycle
		
		noc[n].a1 = ((noc[nsChannel(n)].ewB4) && (noc[n].a1)) || ((noc[nsChannel(n)].nsB4) && (noc[n].a2)),						//reset arbiter priority positions
		noc[n].a2 = (!(noc[nsChannel(n)].ewB4) && (noc[n].a1)) || ((noc[nsChannel(n)].nsB4) && !(noc[n].a1) && !(noc[n].a2)),
		noc[n].a3 = !noc[n].a3
		=}
	}
	else{
		{= 
		noc[n].localB1 = noc[nsChannel(n)].nsB4,
		noc[n].localLockedns = noc[nsChannel(n)].nsB4,
		1: noc[nsChannel(n)].nsB4 = true, 	//service localB1 buffer in nsB1 direction
//		noc[n].local_ns_count++,
		
//		totalFlitsDelivered++,				//service ewB1 buffer
		noc[n].ewB1 = false,
		noc[n].ewLockedlocal = false,
//		noc[n].ew_local_count++,
		
		noc[n].a1 = ((noc[nsChannel(n)].ewB4) && (noc[n].a1)) || ((noc[nsChannel(n)].ewB4) && (noc[n].a2)),						//reset arbiter priority positions
		noc[n].a2 = (!(noc[nsChannel(n)].ewB4) && (noc[n].a1)) || ((noc[nsChannel(n)].ewB4) && !(noc[n].a1) && !(noc[n].a2)),
		noc[n].a3 = !noc[n].a3
		=}
	}
}

process ew_ns_conflcit_local_empty(int n){ //Start here for re-calculating priorities
	if(noc[n].a3){						
		{=
		
//		totalFlitsDelivered++,				//service nsB1 buffer
		noc[n].nsB1 = false,
//		noc[n].ns_local_count++,
		
		noc[n].ewLockedlocal = true,			//lock ewB1 to localB1 for next cycle
		
		noc[n].a1 = false,						//reset arbiter priority positions
		noc[n].a2 = noc[n].a1,
		noc[n].a3 = !noc[n].a3	
		=}
	}	
	else{
		{=
		
//		totalFlitsDelivered++,				//service ewB1 buffer
		noc[n].ewB1 = false,
		noc[n].ewLockedlocal = false,
//		noc[n].ew_local_count++,
		
		noc[n].a1 = false,						//reset arbiter priority positions
		noc[n].a2 = noc[n].a1,
		noc[n].a3 = !noc[n].a3	
		=}
	}
}

process no_conflict_all(int n){
	{=		//no conlfict 
	noc[n].localB1 = noc[ewChannel(n)].ewB4,
	noc[n].localLockedew = noc[ewChannel(n)].ewB4,
	1: noc[ewChannel(n)].ewB4 = true, 		//service localB1 buffer in ewB1 direction
	
//	noc[n].local_ew_count++,
	
	 	//service es buffer in nsB1 direction
	noc[n].ewB1 = noc[nsChannel(n)].nsB4,
	noc[n].ewLockedns = noc[nsChannel(n)].nsB4,
	1: noc[nsChannel(n)].nsB4 = true,
//	noc[n].ew_ns_count++,
	
//	totalFlitsDelivered++,			//service nsB1 buffer
	noc[n].nsB1 = false,
//	noc[n].ns_local_count++,
	
	noc[n].a1 = (!(noc[nsChannel(n)].nsB4) && noc[n].a1) || (!(noc[nsChannel(n)].nsB4) && noc[ewChannel(n)].ewB4) || (noc[ewChannel(n)].ewB4 && noc[n].a1) || (noc[ewChannel(n)].ewB4 && noc[n].a2 && noc[n].a3),
	noc[n].a2 = (!(noc[nsChannel(n)].nsB4) && !(noc[ewChannel(n)].ewB4) && noc[n].a2) || (noc[nsChannel(n)].nsB4 && !(noc[ewChannel(n)].ewB4) && noc[n].a1) || (noc[nsChannel(n)].nsB4 && noc[n].a2 && !(noc[n].a3)) || (noc[nsChannel(n)].nsB4 && noc[ewChannel(n)].ewB4 && !(noc[n].a1) && !(noc[n].a2)),
	noc[n].a3 = !(noc[nsChannel(n)].nsB4) && noc[n].a3,
	
	optimalRunsIncrement+= (!noc[ewChannel(n)].ewB4 && !noc[nsChannel(n)].nsB4) ? 1 : 0
	
	=}
}

process no_conflict_localns_ewlocal(int n){
	{=	//localB1 forward nsB1, ewB1 forward localB1
	noc[n].localB1 = noc[nsChannel(n)].nsB4,
	noc[n].localLockedns = noc[nsChannel(n)].nsB4,
	1: noc[nsChannel(n)].nsB4 = true,
//	noc[n].local_ns_count++,
	
//	totalFlitsDelivered++,
//	noc[n].ew_local_count++,
	noc[n].ewB1 = false,
	noc[n].ewLockedlocal = false,
	
	noc[n].a1 = noc[nsChannel(n)].nsB4 || noc[n].a1,
	noc[n].a2 = !(noc[nsChannel(n)].nsB4) && noc[n].a2
	//noc[n].a3 = noc[n].a3		//redundant
	
	//, optimalRuns++
	
	=}
}

process no_conflict_localew_ewlocal(int n){
	{= 	//localB1 forward ewB1, ewB1 forward localB1
	noc[n].localB1 = noc[ewChannel(n)].ewB4,
	noc[n].localLockedew = noc[ewChannel(n)].ewB4,
	1: noc[ewChannel(n)].ewB4 = true, 
//	noc[n].local_ew_count++,
	
//	totalFlitsDelivered++,
//	noc[n].ew_local_count++,
	noc[n].ewB1 = false,
	noc[n].ewLockedlocal = false,
	
	noc[n].a1 = noc[ewChannel(n)].ewB4 || noc[n].a1,
	noc[n].a2 = !(noc[ewChannel(n)].ewB4) && noc[n].a2
	//noc[n].a3 = noc[n].a3		//redundant
	
	//, optimalRuns++
	
	=}
}

process no_conflict_localew_ewns(int n){
	{=
	noc[n].localB1 = noc[ewChannel(n)].ewB4,
	noc[n].localLockedew = noc[ewChannel(n)].ewB4,
	1: noc[ewChannel(n)].ewB4 = true, 
//	noc[n].local_ew_count++,
	
//	noc[n].ew_ns_count++,
	noc[n].ewB1 = noc[nsChannel(n)].nsB4, 
	noc[n].ewLockedns = noc[nsChannel(n)].nsB4,
	1: noc[nsChannel(n)].nsB4 = true,
		
	noc[n].a1 = (!(noc[nsChannel(n)].nsB4) && noc[n].a1) || (!(noc[nsChannel(n)].nsB4) && noc[ewChannel(n)].ewB4) || (noc[ewChannel(n)].ewB4 && noc[n].a1) || (noc[ewChannel(n)].ewB4 && noc[n].a2 && noc[n].a3),
	noc[n].a2 = (!(noc[nsChannel(n)].nsB4) && !(noc[ewChannel(n)].ewB4) && noc[n].a2) || (noc[nsChannel(n)].nsB4 && !(noc[ewChannel(n)].ewB4) && noc[n].a1) || (noc[nsChannel(n)].nsB4 && noc[n].a2 && !(noc[n].a3)) || (noc[nsChannel(n)].nsB4 && noc[ewChannel(n)].ewB4 && !(noc[n].a1) && !(noc[n].a2)),
	noc[n].a3 = !(noc[nsChannel(n)].nsB4) && noc[n].a3
	
	//, optimalRuns++
	=}
}

process no_conflict_ewns_ns(int n){
	{=	//no conflict	
	noc[n].ewB1 = noc[nsChannel(n)].nsB4, 
	noc[n].ewLockedns = noc[nsChannel(n)].nsB4,
	1: noc[nsChannel(n)].nsB4 = true, 
//	noc[n].ew_ns_count++,
	
//	totalFlitsDelivered++,
//	noc[n].ns_local_count++,
	noc[n].nsB1 = false,
	
	noc[n].a1 = !(noc[nsChannel(n)].nsB4) && noc[n].a1,
	noc[n].a2 = (!(noc[nsChannel(n)].nsB4) && noc[n].a2) || (noc[nsChannel(n)].nsB4 && noc[n].a1) || (noc[n].a2 && !(noc[n].a3)),
	noc[n].a3 = !(noc[nsChannel(n)].nsB4) && noc[n].a3
	
	//, optimalRuns++
	=}
}

process no_conflict_localew_ns(int n){
	{=
	noc[n].localB1 = noc[ewChannel(n)].ewB4, 
	noc[n].localLockedew = noc[ewChannel(n)].ewB4,
	1: noc[ewChannel(n)].ewB4 = true,
//	noc[n].local_ew_count++,
	
//	totalFlitsDelivered++,
	noc[n].nsB1 = false,
//	noc[n].ns_local_count++,
	
	noc[n].a1 = noc[ewChannel(n)].ewB4 || noc[n].a1,
	noc[n].a2 = !(noc[ewChannel(n)].ewB4) && noc[n].a2
	//noc[n].a3 = noc[n].a3		//redundant
	=}
}

process no_conflict_localns_ns(int n){
	{=
	noc[n].localB1 = noc[nsChannel(n)].nsB4, 
	noc[n].localLockedns = noc[nsChannel(n)].nsB4,
	1: noc[nsChannel(n)].nsB4 = true,
//	noc[n].local_ns_count++,
	
//	totalFlitsDelivered++,
	noc[n].nsB1 = false,
//	noc[n].ns_local_count++,
	
	noc[n].a1 = noc[nsChannel(n)].nsB4 || noc[n].a1,
	noc[n].a2 = !(noc[nsChannel(n)].nsB4) && noc[n].a2
	//noc[n].a3 = noc[n].a3		//redundant		
	=}
}

process no_conflict_local_only(int n){
	if(noc[n].localLockedns == true){		//service only the local to ns
		{= 
		noc[n].localB1 = noc[nsChannel(n)].nsB4, 
		noc[n].localLockedns = noc[nsChannel(n)].nsB4,
//		noc[n].local_ns_count++,
		1: noc[nsChannel(n)].nsB4 = true,

		noc[n].a1 = noc[nsChannel(n)].nsB4 || noc[n].a1,
		noc[n].a2 = !(noc[nsChannel(n)].nsB4) && noc[n].a2
		//noc[n].a3 = noc[n].a3		//redundant		
		=}
	}
	else if(noc[n].localLockedew == true){
		{= 		//forward ewB1 direction
		noc[n].localB1 = noc[ewChannel(n)].ewB4, 
		noc[n].localLockedew = noc[ewChannel(n)].ewB4,
//		noc[n].local_ew_count++,
		1: noc[ewChannel(n)].ewB4 = true,
		
		noc[n].a1 = noc[ewChannel(n)].ewB4 || noc[n].a1,
		noc[n].a2 = !(noc[ewChannel(n)].ewB4) && noc[n].a2
		//noc[n].a3 = noc[n].a3		//redundant
		=}
	}
	else{
		palt{
			:(2/3): {= 		//forward ewB1 direction
					noc[n].localB1 = noc[ewChannel(n)].ewB4, 
					noc[n].localLockedew = noc[ewChannel(n)].ewB4,
//					noc[n].local_ew_count++,
					1: noc[ewChannel(n)].ewB4 = true,
					
					noc[n].a1 = noc[ewChannel(n)].ewB4 || noc[n].a1,
					noc[n].a2 = !(noc[ewChannel(n)].ewB4) && noc[n].a2
					//noc[n].a3 = noc[n].a3		//redundant
					=}
			:(1/3): {= 					//forward nsB1 direction
					noc[n].localB1 = noc[nsChannel(n)].nsB4, 
					noc[n].localLockedns = noc[nsChannel(n)].nsB4,
//					noc[n].local_ns_count++,
					1: noc[nsChannel(n)].nsB4 = true,
					
					noc[n].a1 = noc[nsChannel(n)].nsB4 || noc[n].a1,
					noc[n].a2 = !(noc[nsChannel(n)].nsB4) && noc[n].a2
					//noc[n].a3 = noc[n].a3		//redundant
					=}
		}
	}
}

process no_conflict_ew_only(int n){		
	if(noc[n].ewLockedlocal == true){
		{= 
//		totalFlitsDelivered++,
//		noc[n].ew_local_count++,
		noc[n].ewB1 = false,
		noc[n].ewLockedlocal = false 
		=}
	}
	else if(noc[n].ewLockedns == true){
		{= 
		noc[n].ewB1 = noc[nsChannel(n)].nsB4, 
		noc[n].ewLockedns = noc[nsChannel(n)].nsB4,
//		noc[n].ew_ns_count++,
		1: noc[nsChannel(n)].nsB4 = true,
		
		noc[n].a1 = !(noc[nsChannel(n)].nsB4) && noc[n].a1,
		noc[n].a2 = (!(noc[nsChannel(n)].nsB4) && noc[n].a2) || (noc[nsChannel(n)].nsB4 && noc[n].a1) || (noc[n].a2 && !(noc[n].a3)),
		noc[n].a3 = !(noc[nsChannel(n)].nsB4) && noc[n].a3
		=}
	}
	else{
		palt{
			:(1/2): {= 
					noc[n].ewB1 = noc[nsChannel(n)].nsB4, 
					noc[n].ewLockedns = noc[nsChannel(n)].nsB4,
//					noc[n].ew_ns_count++,
					1: noc[nsChannel(n)].nsB4 = true,
					
					noc[n].a1 = !(noc[nsChannel(n)].nsB4) && noc[n].a1,
					noc[n].a2 = (!(noc[nsChannel(n)].nsB4) && noc[n].a2) || (noc[nsChannel(n)].nsB4 && noc[n].a1) || (noc[n].a2 && !(noc[n].a3)),
					noc[n].a3 = !(noc[nsChannel(n)].nsB4) && noc[n].a3
					=}
			:(1/2): {= 
//					totalFlitsDelivered++,
//					noc[n].ew_local_count++,
					noc[n].ewB1 = false,
					noc[n].ewLockedlocal = false 
					=}
		}
	}
}

process no_conflict_ns_only(int n){
	{= 
//	totalFlitsDelivered++,
//	noc[n].ns_local_count++,
	noc[n].nsB1 = false
	=}
}

par{
::	Clock()
:: 	Top()
}
