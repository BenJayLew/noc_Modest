//Version of the concrete model to calculate probabilities for the 4 state abstract model

// datatype buffer = {int(-1..3) val, int(0..3) id, bool serviced, int(0..3) priority, int timesServiced};		//Datatype for a buffer with the next buffer value, id of the buffer, whether the buffer was serviced last clock cycle or not, and the priority number of the buffer
int(0..2) unserviced;		//Number of unserviced buffers, iterates down when unserviced buffer's priority is set
int(0..2) totalUnserviced;	//Total number of unserviced buffers in a clock cycle
//int totalServiced = 0;
//int optimalRuns = 0;
const int clkLower = 100; 
const int clkUpper = 101;
int(clkLower..clkUpper) clk;

const int totalStates = 4;
int(0..totalStates-1) state;
int(0..totalStates-1) pstate;
//int(0..3) pPstate;
//int(0..3) p3state;
//int(0..3) p4state;

// buffer north, east, south, west;

// buffer[] a; // = [north, east, south, west]; 	//Array of the four buffers. a[0] is the highest priority
// buffer[] temp;		//Temporary buffer used to update buffer a

int(-1..3) a0_val, a1_val, a2_val, a3_val;
int(0..3) a0_id, a1_id, a2_id, a3_id, a0_priority, a1_priority, a2_priority, a3_priority;
bool a0_serviced, a1_serviced, a2_serviced, a3_serviced;

int(-1..3) temp0_val, temp1_val, temp2_val, temp3_val;
int(0..3) temp0_id, temp1_id, temp2_id, temp3_id, temp0_priority, temp1_priority, temp2_priority, temp3_priority;
bool temp0_serviced, temp1_serviced, temp2_serviced, temp3_serviced;


action tick;

// ------ Begin: properties ---------
//property Pr1 = Pmax(<> (clk >= clkUpper));

//property TotalServiced = Pmax(<> (totalServiced >= ((clkUpper-clkLower)*3)));		//Probablility that the arbiter services at least 15 buffers out of a possible 20. probablity the arbiter is at least 75% efficient

//property conflict1 = Pmax(<> (totalUnserviced == 1 && clk >= clkUpper));

//property conflict2 = Pmax(<> (totalUnserviced == 2 && clk >= clkUpper));

//property triway = Pmax(<> (tri == true && clk >= clkUpper));

//1 clock cycle

property State0 = Pmax(<> ((clk >= clkUpper) && (state == 0)));
property State1 = Pmax(<> ((clk >= clkUpper) && (state == 1)));
property State2 = Pmax(<> ((clk >= clkUpper) && (state == 2)));
property State3 = Pmax(<> ((clk >= clkUpper) && (state == 3)));


//2 clock cycles
/*
//property State1_0 = Pmax(<> ((clk >= clkUpper) && (pstate == 1) && (state == 0)));
//property State1_1 = Pmax(<> ((clk >= clkUpper) && (pstate == 1) && (state == 1)));
//property State1_3 = Pmax(<> ((clk >= clkUpper) && (pstate == 1) && (state == 3)));
//property State1_2 = Pmax(<> ((clk >= clkUpper) && (pstate == 1) && (state == 2)));

//property State3_0 = Pmax(<> ((clk >= clkUpper) && (pstate == 3) && (state == 0)));
//property State3_1 = Pmax(<> ((clk >= clkUpper) && (pstate == 3) && (state == 1)));
//property State3_3 = Pmax(<> ((clk >= clkUpper) && (pstate == 3) && (state == 3)));
//property State3_2 = Pmax(<> ((clk >= clkUpper) && (pstate == 3) && (state == 2)));

//property State2_0 = Pmax(<> ((clk >= clkUpper) && (pstate == 2) && (state == 0)));
//property State2_1 = Pmax(<> ((clk >= clkUpper) && (pstate == 2) && (state == 1)));
//property State2_3 = Pmax(<> ((clk >= clkUpper) && (pstate == 2) && (state == 3)));
//property State2_2 = Pmax(<> ((clk >= clkUpper) && (pstate == 2) && (state == 2)));
*/


//property Runs1 = Pmax(<> (optimalRuns == 1));		//Probablility that there was at least 1 cycle where all buffers were serviced
//property Runs2 = Pmax(<> (optimalRuns == 2));		//Probablility that there was at least 2 cycles where all buffers were serviced
//property Runs3 = Pmax(<> (optimalRuns == 3));		//Probablility that there was at least 3 cycles where all buffers were serviced
//property Runs4 = Pmax(<> (optimalRuns == 4));		//Probablility that there was at least 4 cycles where all buffers were serviced
//property Runs5 = Pmax(<> (optimalRuns == 5));		//Probablility that there was at least 5 cycles where all buffers were serviced
// ------ End: properties ---------

process Clock(){	
	/*
	do {
	tick
	}
	*/
	tick {= clk++ =};
	if (clk <= clkUpper) {
	   Clock()
	}
	else {
	   stop
	}   
	
}


//Main process for the arbiter -------------------------------------------------------------------------------------------------------------------------------------------------
process Arbiter(){
	initialize();
	
	//runtime loop
	do {
		//Service buffers-------------------------------------------------------------------------------------------------------
		
		//Buffer priority 0
		//<Service Buffer a[0]>--------------------------------------------------------
		{= 
		//a[0].timesServiced++,
		a0_serviced = true 
		=};
		
		//<Service buffer <a[1]> ------------------------------------------------------
		if( a1_val == a0_val) {			//If buffer a[1] conflicts with a[0]
			{= 
			a1_serviced = false,
			unserviced++ 		//Increment unserviced
			=}
		}
		else {
			{= 
			//a[1].timesServiced++,		//Service Buffer
			a1_serviced = true 
			=}
		};
		
		//<Service buffer a[2]> --------------------------------------------------------
		//If buffer a[2] conflicts with a[1] or a[0]
		if(a2_val == a1_val || a2_val == a0_val){	
			{= 
			a2_serviced = false, 
			unserviced++			//Increment unserviced
			=}
		}
		else {
			{= 
			//a[2].timesServiced++,		//Service Buffer
			a2_serviced = true 
			=}
		};
		
		//<Service buffer a[3]> ---------------------------------------------------------
		//If buffer a[3] conflicts with a[2], a[1], or a[0]
		if( a3_val == a2_val || a3_val == a1_val || a3_val == a0_val){	
			{= 
			a3_serviced = false,
			unserviced++ 			//Increment unserviced
			=}
		}
		else {
			{= 
			//a[3].timesServiced++,		//Service Buffer
			a3_serviced = true 
			=}
		};
		
		
		{= 
		totalUnserviced = unserviced,
		pstate = state
		//, totalServiced = totalServiced + 4 - unserviced
		=};
		
		//{= p4state = p3state =};
		//{= p3state = pPstate =};
		//{= pPstate = pstate =};
		

		
		//Set priority values for the next run and update the value of the buffers----------------------------------------------
		setPriority0();
		setPriority1();
		setPriority2();
		setPriority3();
		
		
		/*
		if ((a[0].val == a[1].val) && totalUnserviced == 2) {
			{= tri = true =}
		}
		else {tau};
		*/
		
		
		//Rewrite buffer array with new priority values-------------------------------------------------------------------------
		//buffer 0
		if(a0_priority == 1){
			{=
			temp1_val = a0_val,
			temp1_id = a0_id,
			temp1_serviced = a0_serviced,
			temp1_priority = a0_priority
			=}
		}
		else if(a0_priority == 2){
			{=
			temp2_val = a0_val,
			temp2_id = a0_id,
			temp2_serviced = a0_serviced,
			temp2_priority = a0_priority
			=}
		}
		else if(a0_priority == 3){
			{=
			temp3_val = a0_val,
			temp3_id = a0_id,
			temp3_serviced = a0_serviced,
			temp3_priority = a0_priority
			=}
		}
		//priority and values stay the same
		else{tau};
		
		
		//buffer1
		if(a1_priority == 0){
			{=
			temp0_val = a1_val,
			temp0_id = a1_id,
			temp0_serviced = a1_serviced,
			temp0_priority = a1_priority
			=}
		}
		else if(a1_priority == 2){
			{=
			temp2_val = a1_val,
			temp2_id = a1_id,
			temp2_serviced = a1_serviced,
			temp2_priority = a1_priority
			=}
		}
		else if(a1_priority == 3){
			{=
			temp3_val = a1_val,
			temp3_id = a1_id,
			temp3_serviced = a1_serviced,
			temp3_priority = a1_priority
			=}
		}
		//priority and values stay the same
		else{tau};
		
		
		//buffer2
		if(a2_priority == 0){
			{=
			temp0_val = a2_val,
			temp0_id = a2_id,
			temp0_serviced = a2_serviced,
			temp0_priority = a2_priority
			=}
		}
		else if(a2_priority == 1){
			{=
			temp1_val = a2_val,
			temp1_id = a2_id,
			temp1_serviced = a2_serviced,
			temp1_priority = a2_priority
			=}
		}
		else if(a2_priority == 3){
			{=
			temp3_val = a2_val,
			temp3_id = a2_id,
			temp3_serviced = a2_serviced,
			temp3_priority = a2_priority
			=}
		}
		//priority and values stay the same
		else{tau};
		
		//buffer3
		if(a3_priority == 0){
			{=
			temp0_val = a3_val,
			temp0_id = a3_id,
			temp0_serviced = a3_serviced,
			temp0_priority = a3_priority
			=}
		}
		else if(a3_priority == 1){
			{=
			temp1_val = a3_val,
			temp1_id = a3_id,
			temp1_serviced = a3_serviced,
			temp1_priority = a3_priority
			=}
		}
		else if(a3_priority == 2){
			{=
			temp2_val = a3_val,
			temp2_id = a3_id,
			temp2_serviced = a3_serviced,
			temp2_priority = a3_priority
			=}
		}
		//priority and values stay the same
		else{tau};
		
		//set arbiters for next cycle:
		{=
		a0_val = temp0_val, a0_id = temp0_id, a0_serviced = temp0_serviced, a0_priority = temp0_priority,
		a1_val = temp1_val, a1_id = temp1_id, a1_serviced = temp1_serviced, a1_priority = temp1_priority,
		a2_val = temp2_val, a2_id = temp2_id, a2_serviced = temp2_serviced, a2_priority = temp2_priority,
		a3_val = temp3_val, a3_id = temp3_id, a3_serviced = temp3_serviced, a3_priority = temp3_priority
		=};


		if (totalUnserviced == 0){
			tick {= 
			//optimalRuns++,
			state = 0
			=}
		}
		else if(totalUnserviced == 1){
			tick{= state = 1 =}
		}
		else if(totalUnserviced == 2 && !(a0_val == a1_val)){
			tick{= state = 2 =}
		}
		else if(totalUnserviced == 2 && a0_val == a1_val){
			tick{= state = 3 =}
		}
		//Add new states here

		else {
			tau
		};
			
		
		
		if (clk >= clkUpper) {
			stop
		}
		else {
			tau
		}
		
		
	}
}

//initialize values -------------------------------------------------------------------------------------------------------------------------------------------------------------
process initialize(){
	{= 
	
	a0_id = 0, 
	a1_id = 1, 
	a2_id = 2, 
	a3_id = 3,  
	
	
	a0_val = DiscreteUniform(1, 3),
	a1_val = (DiscreteUniform(1, 3) + 1) % 4,
	a2_val = (DiscreteUniform(1, 3) + 2) % 4,
	a3_val = DiscreteUniform(0, 2),
	
	
	unserviced = 0
	=}

	
}

//Sets the new priority value of buffer a[i] and updates the value if the buffer was serviced ------------------------------------------------------------------------------------
process setPriority0(){
	if (a0_serviced == true){
		{= 
		a0_val = (DiscreteUniform(1, 3) + a0_id) % 4,	//Update value	
		a0_priority = unserviced 						//Set new priority
		=}
		//<update buffer value and dequeue buffer>
	}
	else {
		{= 
		a0_priority = totalUnserviced - unserviced,		//Set new priority
		unserviced-- 						//decrement unserviced
		=}
	}
}

process setPriority1(){
	if (a1_serviced == true){
		{= 
		a1_val = (DiscreteUniform(1, 3) + a1_id) % 4,	//Update value	
		a1_priority = unserviced 						//Set new priority
		=}
		//<update buffer value and dequeue buffer>
	}
	else {
		{= 
		a1_priority = totalUnserviced - unserviced,		//Set new priority
		unserviced-- 						//decrement unserviced
		=}
	}
}

process setPriority2(){
	if (a2_serviced == true){
		{= 
		a2_val = (DiscreteUniform(1, 3) + a2_id) % 4,	//Update value	
		a2_priority = unserviced 						//Set new priority
		=}
		//<update buffer value and dequeue buffer>
	}
	else {
		{= 
		a2_priority = totalUnserviced - unserviced,		//Set new priority
		unserviced-- 						//decrement unserviced
		=}
	}
}

process setPriority3(){
	if (a3_serviced == true){
		{= 
		a3_val = (DiscreteUniform(1, 3) + a3_id) % 4,	//Update value	
		a3_priority = unserviced 						//Set new priority
		=}
		//<update buffer value and dequeue buffer>
	}
	else {
		{= 
		a3_priority = totalUnserviced - unserviced,		//Set new priority
		unserviced-- 						//decrement unserviced
		=}
	}
}


par{
::	Clock()
::	Arbiter()
}
